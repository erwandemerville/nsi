{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Num\u00e9rique et sciences informatiques","text":""},{"location":"#numerique-et-sciences-informatiques","title":"Num\u00e9rique et sciences informatiques","text":"<p>Bienvenue, ici vous retrouverez tous les cours, exercices, activit\u00e9s et \u00e9valuations r\u00e9alis\u00e9s dans le cadre de la sp\u00e9cialit\u00e9 NSI (premi\u00e8re et terminale).</p> <p>En cas de questionnements concernant un cours, un exercice, ou quoi que ce soit, n'h\u00e9sitez pas \u00e0 me contacter via la messagerie de l'ENT.</p> <p>Programmes officiels</p> <ul> <li>Programme de premi\u00e8re NSI</li> <li>Programme de terminale NSI</li> </ul>"},{"location":"#nsi-premiere","title":"NSI premi\u00e8re","text":"Liste des contenus Description Les bases du langage Python Les bases du langage Python. Repr\u00e9sentation des donn\u00e9es en machine Repr\u00e9sentation des entiers, r\u00e9els, encodage du texte..."},{"location":"#nsi-terminale","title":"NSI terminale","text":"Liste des contenus Description Modularit\u00e9 Cr\u00e9ation et utilisation de modules et d'API. Mise au point des programmes Types de donn\u00e9es, annotations, tests... Programmation orient\u00e9e objet D\u00e9couverte des classes en Python. R\u00e9cursivit\u00e9 Utilisation de la r\u00e9cursivit\u00e9 en langage Python.  Sujet e3c de rentr\u00e9e corrig\u00e9 Le sujet d'e3c de rentr\u00e9e avec correction d\u00e9taill\u00e9e.  R\u00e9visions / Entra\u00eenement Python Quelques exercices pour vous exercer au langage Python."},{"location":"rendus/","title":"Rendu des travaux","text":""},{"location":"rendus/#rendu-des-travaux","title":"Rendu des travaux","text":"<p>Les travaux demand\u00e9s (fichiers Python, TP, activit\u00e9s, etc.) sont \u00e0 rendre sur le parcours \u00c9l\u00e9a.</p> <p>Acc\u00e9der \u00e0 \u00c9l\u00e9a</p> <p>Vous pouvez acc\u00e9der \u00e0 \u00c9l\u00e9a :</p> <ul> <li>soit en cliquant ici et en vous connectant en choisissant <code>ENT Hauts-de-France</code> dans la liste d\u00e9roulante, </li> <li>soit en vous connectant \u00e0 votre ENT et en ouvrant l'application \u00c9l\u00e9a \u00e0 partir de votre liste des applications :</li> </ul> <p></p> <p>Nommage des fichiers</p> <ul> <li>Afin d'\u00e9viter les confusions, pensez \u00e0 renommer vos fichiers en y ajoutant votre nom. Par exemple, si vous souhaitez rendre un script Python nomm\u00e9 <code>programme.py</code>, renommez-le en <code>&lt;VOTRE_NOM&gt;_programme.py</code>.</li> <li>Si votre travail contient plusieurs fichiers, cr\u00e9ez une archive ZIP contenant tous vos fichiers et dont le nom sera de la forme <code>&lt;VOTRE_NOM&gt;_&lt;NOM_ARCHIVE&gt;.zip</code>. Pour cr\u00e9er une archive ZIP sur Windows : s\u00e9lectionnez les fichiers \u00e0 archiver, puis faites un clic droit <code>Envoyer vers</code> <code>Dossier compress\u00e9</code>.</li> </ul> Autre m\u00e9thode de rendu - UNIQUEMENT EN CAS DE SOUCIS AVEC \u00c9L\u00c9A <p>Cette m\u00e9thode de rendu n'est \u00e0 utiliser que si vous ne pouvez pas acc\u00e9der au parcours \u00c9l\u00e9a !</p> <p>Cliquez sur le bouton correspondant \u00e0 votre classe pour acc\u00e9der \u00e0 la page de t\u00e9l\u00e9versement :</p> <p>Vous devez activer JavaScript pour que cette page fonctionne correctement !</p> <p>Premi\u00e8re Terminale</p>"},{"location":"premiere/","title":"NSI - Premi\u00e8re","text":""},{"location":"premiere/#nsi-premiere","title":"NSI - Premi\u00e8re","text":"Liste des contenus Description Les bases du langage Python Les bases du langage Python. Repr\u00e9sentation des donn\u00e9es en machine Repr\u00e9sentation des entiers, r\u00e9els, encodage du texte..."},{"location":"premiere/bases_python/","title":"Les bases du langage Python","text":""},{"location":"premiere/bases_python/#les-bases-du-langage-python","title":"Les bases du langage Python","text":"Liste des contenus Description Cours - Introduction \u00e0 la programmation Python Cours d'introduction au langage Python. D\u00e9couverte de l'IDE Thonny D\u00e9couverte d'un environnement de d\u00e9veloppement Python.  Jeu - Chasse au tr\u00e9sor Cr\u00e9ation d'un jeu de chasse au tr\u00e9sor avec Python. Exercices sur les fonctions Exercices sur les fonctions. Notebooks d'exercices Des notebooks Jupyter pour vous exercer."},{"location":"premiere/bases_python/chassetresor/","title":"Jeu - Chasse au tr\u00e9sor","text":""},{"location":"premiere/bases_python/chassetresor/#jeu-chasse-au-tresor","title":"Jeu - Chasse au tr\u00e9sor","text":""},{"location":"premiere/bases_python/chassetresor/#presentation-et-explications","title":"Pr\u00e9sentation et explications","text":"Une image du jeu <p>Pr\u00e9sentation du jeu</p> <p>L'objectif de ce TP est de cr\u00e9er un petit jeu de chasse au tr\u00e9sor en Python, dans lequel le but est de trouver un tr\u00e9sor dans une grille de jeu de taille donn\u00e9e.  </p> <p>La grille contient des boutons cliquables. Le joueur devra alors cliquer sur les boutons de son choix, avec \u00e0 chaque erreur un indice lui indiquant s'il se rapproche ou s'il s'\u00e9loigne du tr\u00e9sor.</p> <p>Le nombre de tentatives effectu\u00e9es sera stock\u00e9 et affich\u00e9 \u00e0 la fin du jeu.</p> <p>Le module <code>tkinter</code> sera utilis\u00e9 pour g\u00e9rer l'interface graphique du jeu.</p> <p>\u00c0 t\u00e9l\u00e9charger</p> <p>T\u00e9l\u00e9chargez et ouvrez dans Thonny le fichier Python suivant :</p> <p></p> chasse_au_tresor.py Corrig\u00e9 <p>Voici le corrig\u00e9 d\u00e9taill\u00e9 de ce programme :</p> <p></p> chasse_au_tresor_corr.py <p>Prenez connaissance du programme corrig\u00e9, lisez bien les commentaires. On a ajout\u00e9 une fonction <code>desactiver_boutons_cliques()</code> qui permet de d\u00e9sactiver les boutons sur lesquels le joueur a cliqu\u00e9 (et ainsi \u00e9viter qu'il reclique dessus).</p> <p>En cas de difficult\u00e9s de compr\u00e9hension de certaines parties du programme, n'h\u00e9sitez pas \u00e0 me contacter.</p> <p>Grille de jeu et coordonn\u00e9es</p> <p>La grille de jeu est carr\u00e9e, il y a donc autant de lignes que de colonnes. Les axes en <code>x</code> et en <code>y</code> se pr\u00e9sentent ainsi :</p> <p></p> <p>Sur cette grille de taille <code>N = 5</code>, le bouton colori\u00e9 en vert aura donc pour coordonn\u00e9es <code>x = 3</code> et <code>y = 1</code>. Important : Les coordonn\u00e9es <code>x</code> et <code>y</code> commencent \u00e0 partir de l'indice <code>0</code>, et non pas <code>1</code>.</p> <p>La grille de jeu est repr\u00e9sent\u00e9e avec une nouvelle structure de donn\u00e9es : une liste.</p> <p>Une liste est cr\u00e9\u00e9e \u00e0 l'aide de crochets. Par exemple, une liste contenant les \u00e9l\u00e9ments <code>4</code>, <code>8</code> et <code>2</code> se cr\u00e9e ainsi :</p> <pre><code>liste = [4, 8, 2]\n</code></pre> <p>On peut ensuite r\u00e9cup\u00e9rer un \u00e9l\u00e9ment de cette liste \u00e0 l'aide de son indice. Les indices commencent \u00e0 partir de <code>0</code>. Pour r\u00e9cup\u00e9rer le premier \u00e9l\u00e9ment de la liste, on \u00e9crira :</p> <pre><code>liste[0]  # r\u00e9cup\u00e9rer le premier \u00e9l\u00e9ment de la liste, c'est-\u00e0-dire 1\n</code></pre> <p>Pour cr\u00e9er un tableau (\u00e0 deux dimensions), on utilise une liste de listes. Chaque ligne du tableau sera repr\u00e9sent\u00e9e par une sous-liste de la liste principale. Voici un exemple de tableau en <code>Python</code> :</p> <pre><code>tab = [ [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 0] ]\n</code></pre> <p>On a d\u00e9fini la variable <code>tab</code> sur 3 lignes ici pour la compr\u00e9hension, mais on peut tr\u00e8s bien l'\u00e9crire sur une seule ligne :</p> <pre><code>tab = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n</code></pre> <p>Ainsi, pour r\u00e9cup\u00e9rer par exemple l'\u00e9l\u00e9ment <code>4</code>, on \u00e9crira :</p> <pre><code>tab[1][0]\n</code></pre> <p>Cela correspond au premier \u00e9l\u00e9ment de la 2\u00e8me ligne.</p> <p>Constante et variables globales</p> <p>Les variables globales sont des variables qui peuvent \u00eatre utilis\u00e9es n'importe o\u00f9 dans un programme, y compris \u00e0 l'int\u00e9rieur des fonctions. Elles se trouvent g\u00e9n\u00e9ralement au d\u00e9but d'un programme, juste apr\u00e8s les imports :</p> <pre><code>N = 5  # Constante d\u00e9finissant la taille de la grille\n\n# Coordonn\u00e9es du tr\u00e9sor (choisies al\u00e9atoirement au d\u00e9but du jeu)\nTRESOR_X = randint(...)\nTRESOR_Y = randint(...)\n\n# Variables pour stocker la position de la derni\u00e8re case cliqu\u00e9e par le joueur (initialement None)\nderniere_pos_x = None\nderniere_pos_y = None\n\n# Compteur de tentatives (initialement 0)\ntentatives = 0\n</code></pre> <p>Une constante est une variable globale dont la valeur n'est pas modifi\u00e9e par le programme. Les constantes sont, par convention, \u00e9crites en MAJUSCULES. Ici, on distingue trois constantes :</p> <ul> <li><code>N</code> qui repr\u00e9sente la taille de la grille de jeu (la grille est carr\u00e9e), vous pouvez \u00e0 tout moment modifier cette valeur pour augmenter la taille de la grille de votre jeu !</li> <li><code>TRESOR_X</code> et <code>TRESOR_Y</code> qui d\u00e9finissent les coordonn\u00e9es du tr\u00e9sor dans la grille de jeu. Ces coordonn\u00e9es sont d\u00e9finies al\u00e9atoirement \u00e0 l'aide de la fonction <code>randint</code> du module <code>random</code>.</li> </ul> <p>Les autres variables globales sont :</p> <ul> <li><code>derniere_pos_x</code>, <code>derniere_pos_y</code> qui stockent les coordonn\u00e9es de la derni\u00e8re case sur laquelle le joueur a cliqu\u00e9, on les initialise \u00e0 <code>None</code> puisqu'au d\u00e9but du jeu, le joueur n'a pas encore cliqu\u00e9.</li> <li><code>tentatives</code> qui stocke le nombre de tentatives effectu\u00e9es par le joueur, on l'initialise \u00e0 <code>0</code> au d\u00e9but du jeu.</li> </ul> <p>Ces trois derni\u00e8res variables globales sont modifi\u00e9es par la fonction <code>verifier_case</code> du programme. Pour pouvoir modifier des variables globales dans une fonction, il faut les r\u00e9f\u00e9rencer avec le mot-cl\u00e9 <code>global</code> :</p> <pre><code>global tentatives, derniere_pos_x, derniere_pos_y\n</code></pre>"},{"location":"premiere/bases_python/chassetresor/#travail-a-realiser","title":"Travail \u00e0 r\u00e9aliser","text":"<p>\u00c0 faire</p> <p>Vous devez compl\u00e9ter le programme <code>chasse_au_tresor.py</code>, en rempla\u00e7ant les pointill\u00e9s <code>...</code> par le code appropri\u00e9. Les parties du programme \u00e0 compl\u00e9ter sont indiqu\u00e9es par le commentaire <code>\"\u00c0 COMPL\u00c9TER\"</code>.</p> <p>Vous devez \u00e9galement compl\u00e9ter les fonctions <code>verifier_case</code> et <code>calculer_distance</code>. Lisez bien les commentaires (pr\u00e9c\u00e9des par un <code>#</code>), qui vous aideront \u00e0 comprendre le programme.</p> <p>Pour <code>calculer_distance</code> :</p> <ul> <li>vous utiliserez la fonction native <code>abs</code> qui renvoie la valeur absolue d'un nombre donn\u00e9 en entr\u00e9e,</li> <li>vous utiliserez la distance de Manhattan.</li> </ul> <p>Aidez-vous des commentaires pour compl\u00e9ter les lignes de code incompl\u00e8tes.</p> <p>Une fois votre programme complet, ex\u00e9cutez-le pour tester votre jeu.</p>"},{"location":"premiere/bases_python/chassetresor/#aller-plus-loin","title":"Aller plus loin","text":"<p>IMPORTANT : Avant de continuer</p> <p>Pour cette partie, je vous recommande de t\u00e9l\u00e9charger le programme corrig\u00e9, afin d'avoir la version corrig\u00e9e du jeu avec de nouveaux commentaires d'explications ajout\u00e9s.</p> <p>On a \u00e9galement ajout\u00e9 une fonction <code>desactiver_boutons_cliques()</code> au programme, qui permet de d\u00e9sactiver les boutons sur lesquels le joueur a cliqu\u00e9 (et ainsi \u00e9viter qu'il reclique dessus).</p> <p>Maintenant que votre jeu est complet, on propose d'y apporter des am\u00e9liorations ! Ces am\u00e9liorations doivent permettrent de rendre le jeu plus interactif et plus difficile, tout en utilisant uniquement les notions de base nous avons vu en Python.</p> <p>\u00c0 faire</p> <p>Vous devez ajouter les deux am\u00e9liorations suivantes \u00e0 votre programme.</p> <ol> <li> <p>Limitation du nombre de tentatives : Le joueur ne dispose plus d\u2019un nombre illimit\u00e9 de tentatives. Le nombre maximal de tentatives sera fix\u00e9 par une nouvelle variable globale <code>MAX_TENTATIVES</code> (qu'il faudra d\u00e9finir en haut du programme, comme les autres variables globales). Si le joueur n\u2019a pas trouv\u00e9 le tr\u00e9sor apr\u00e8s le nombre fix\u00e9 de tentatives, le jeu affiche un message d\u2019\u00e9chec et d\u00e9sactive les boutons.</p> </li> <li> <p>Affichage de la proximit\u00e9 en nombre de cases : En plus de donner l\u2019indication <code>\u201cPlus proche !\u201d</code> ou <code>\u201cPlus loin !\u201d</code>, afficher la distance en nombre de cases par rapport au tr\u00e9sor. Il suffira d'afficher la valeur obtenue avec la fonction <code>calculer_distance()</code>. Exemple d'affichage : <code>\"Plus proche ! Vous \u00eates \u00e0 3 cases du tr\u00e9sor.\"</code>.</p> </li> </ol> <p>Pour les plus motiv\u00e9s</p> <p>Si vous vous sentez \u00e0 l'aise et motiv\u00e9, vous pouvez tenter d'apporter une nouvelle am\u00e9lioration, plus complexe \u00e0 mettre en place, consistant \u00e0 ajouter un deuxi\u00e8me tr\u00e9sor cach\u00e9.</p> <ul> <li> <p>Le jeu contiendra alors deux tr\u00e9sors cach\u00e9s \u00e0 des positions diff\u00e9rentes (d\u00e9termin\u00e9es al\u00e9atoirement).</p> </li> <li> <p>Le joueur devra trouver les deux tr\u00e9sors pour gagner. L\u2019interface devra donc afficher un message distinct pour chaque tr\u00e9sor trouv\u00e9. Exemple de message : <code>\"Bravo ! Vous avez trouv\u00e9 le tr\u00e9sor 1 en 5 tentatives !\"</code></p> </li> <li> <p>De m\u00eame, \u00e0 chaque tentative, on indiquera si le joueur est plus proche ou plus loin (ainsi que la distance en nombre de cases) par rapport au tr\u00e9sor le plus proche. Il faudra donc d\u00e9terminer lequel des deux tr\u00e9sors est le plus proche du joueur avant d'afficher le message.</p> </li> <li> <p>La partie s'arr\u00eatera si le joueur a trouv\u00e9 les deux tr\u00e9sors, ou s'il a d\u00e9pass\u00e9 la limite de tentatives fix\u00e9e par la variable globale <code>MAX_TENTATIVES</code> d\u00e9finie dans le cadre des am\u00e9liorations pr\u00e9c\u00e9dentes.</p> </li> </ul>"},{"location":"premiere/bases_python/cours/","title":"Introduction au Python","text":""},{"location":"premiere/bases_python/cours/#introduction-a-la-programmation-avec-python","title":"Introduction \u00e0 la programmation avec Python","text":""},{"location":"premiere/bases_python/cours/#vous-avez-dit-programme","title":"Vous avez dit \"programme\" ?","text":"<p>Un programme est la description d\u2019un algorithme dans un langage compr\u00e9hensible par un humain et par une machine, qui l\u2019ex\u00e9cute afin de traiter des donn\u00e9es. </p> <p>Il existe de nombreux langages de programmation, dont certains sont plus proches du langage naturel (on parle de langages de haut niveau), tandis que d\u2019autres sont plus proches de celui de la machine (on parle de langages de bas niveau), on rappelle que la machine ne comprend que le binaire, c'est-\u00e0-dire une suite de bits <code>0</code> ou <code>1</code> (nous reviendrons sur cela dans le cadre d'un autre chapitre).</p> <p>On peut citer, parmi les langages :</p> <ul> <li>de haut niveau : Python, JavaScript, Java, C#,</li> <li>de bas niveau : C, Assembleur, langage machine (le plus bas niveau possible).</li> </ul> <p>Le langage de programmation Python, que l'on utilisera dans le cadre de cet enseignement, est d\u00e9j\u00e0 utilis\u00e9 au lyc\u00e9e en math\u00e9matiques, et est \u00e9galement pr\u00e9sent dans d\u2019autres disciplines et dans le nouvel enseignement de sciences num\u00e9riques et Technologie (SNT) en seconde. Au-del\u00e0 du cadre de l'enseignement, c'est un langage extr\u00eamement populaire, car l\u2019un des plus versatiles et g\u00e9n\u00e9ralistes. Il est utilis\u00e9 aussi bien par des d\u00e9veloppeurs d\u00e9butants que par des d\u00e9veloppeurs d\u2019applications web et mobile, des ing\u00e9nieurs logiciels, des Data Scientists...</p> <p> </p> Guido Van Rossum, cr\u00e9ateur de PythonSource : Wikip\u00e9dia <p>Le langage Python a \u00e9t\u00e9 cr\u00e9\u00e9 par un ing\u00e9nieur informaticien n\u00e9erlandais du nom de Guido Van Rossum.</p> <p>La premi\u00e8re version publique date de 1991. Van Rossum a ensuite poursuivi son travail sur le projet et a travaill\u00e9 entre autres pour Google puis Dropbox. La version de Python que nous utiliserons est la version 3, disponible depuis 2008 avec des mises \u00e0 jour r\u00e9guli\u00e8res. La derni\u00e8re version en date lors de l'\u00e9criture de cet article est la version 3.11.5.</p> <p>Le langage Python est multiplateforme, vous pouvez donc l'installer sur les syst\u00e8mes d\u2019exploitation Linux, MacOs, Windows, et m\u00eame sur des smartphones dot\u00e9s du syst\u00e8me Android ou d'iOS. Il est gratuit et plac\u00e9 sous licence libre, la Python Software Foundation License (PSFL) .</p> <p>Les constructions \u00e9l\u00e9mentaires propes au langage Python sont communes \u00e0 de nombreux autres langages de programmation.</p> <p>Un programme est ainsi compos\u00e9 :</p> <ul> <li>de s\u00e9quences, (des instructions ex\u00e9cut\u00e9es l\u2019une apr\u00e8s l\u2019autre dans l\u2019ordre o\u00f9 elles sont \u00e9crites),</li> <li>de d\u00e9finitions de variables et de fonctions,</li> <li>d\u2019affectations,</li> <li>d\u2019instructions conditionnelles,</li> <li>de boucles (born\u00e9es et non-born\u00e9es),</li> <li>d'expressions et d'appels de fonctions.</li> </ul>"},{"location":"premiere/bases_python/cours/#un-ide-pour-debuter","title":"Un IDE pour d\u00e9buter","text":"<p>Il existe de nombreux environnements de d\u00e9veloppement (EDI, ou IDE en anglais) permettant de d\u00e9velopper en Python. Celui que je vous conseille pour d\u00e9buter est Thonny, cliquez-ici pour d\u00e9couvrir l'IDE Thonny.</p>"},{"location":"premiere/bases_python/cours/#expressions-arithmetiques-variables-et-instructions","title":"Expressions arithm\u00e9tiques, variables et instructions","text":"<p>Le langage de programmation Python permet d'interagir avec la machine \u00e0 l'aide d'un programme appel\u00e9 interpr\u00e9teur Python. On peut l'utiliser de deux mani\u00e8res diff\u00e9rentes :</p> <ul> <li>en mode interactif, qui consiste \u00e0 dialoguer directement avec l'interpr\u00e9teur,</li> <li>en mode programme, qui consiste \u00e0 \u00e9crire un programme dans un fichier et \u00e0 le faire ex\u00e9cuter par l'interpr\u00e9teur.</li> </ul>"},{"location":"premiere/bases_python/cours/#mode-interactif","title":"Mode interactif","text":"<p>Le mode interactif s'apparente \u00e0 une calculatrice. Les trois chevrons <code>&gt;&gt;&gt;</code> indiquent que l'interpr\u00e9teur attend vos instructions.</p> <p>Par exemple, si vous saisissez <code>1 + 2</code> apr\u00e8s les chevrons et que vous appuyez sur la touche Entr\u00e9e, l'interpr\u00e9teur effectuera le calcul et affichera le r\u00e9sultat :</p> <pre><code>&gt;&gt;&gt; 1 + 2\n3\n</code></pre> <p>\u00c0 vous de jouer !</p> <p>Saisissez dans l'interpr\u00e9teur Python ci-dessous plusieurs expressions en utilisant les op\u00e9rateurs <code>+</code> (addition), <code>-</code> (soustraction), <code>*</code> (multiplication) et <code>/</code> (division).</p> <p></p>&gt;&gt;&gt;"},{"location":"premiere/bases_python/cours/#arithmetique","title":"Arithm\u00e9tique","text":"<p>En Python, on peut saisir des combinaisons d'op\u00e9rations arithm\u00e9tiques.</p> <p>Par exemple :</p> <pre><code>&gt;&gt;&gt; 2 + 5 * (10 - 1 / 2)\n49.5\n</code></pre> <p>\u00c0 noter que les espaces sont purement d\u00e9coratifs, on aurait pu \u00e9crire :</p> <pre><code>&gt;&gt;&gt; 2+6*(10-1/2)\n49.5\n</code></pre> <p>Erreur de syntaxe</p> <p>L'interpr\u00e9teur n'accepte que les expressions arithm\u00e9tiques bien form\u00e9es. Autrement, une <code>SyntaxError</code> indiquant une erreur de syntaxe sera lev\u00e9e, par exemple :</p> <pre><code>&gt;&gt;&gt; 1 + * 2\n    File \"&lt;stdin&gt;\", line 1\n    1 + * 2\n        ^\nSyntaxError: invalid syntax\n</code></pre> <p><code>&lt;stdin&gt;</code> signifie standard input (entr\u00e9e standard), on reviendra sur les notions d'entr\u00e9e standard et de sortie standard plus loin dans ce cours lorsque l'on pr\u00e9sentera les fonctions <code>input</code> et <code>print</code>.</p> <p>Erreur division par z\u00e9ro</p> <p>Un autre type d'erreur qui peut \u00eatre lev\u00e9e par l'interpr\u00e9teur Python est une <code>zeroDivisionError</code>, indiquant que l'expression contient une division par z\u00e9ro. Par exemple :</p> <pre><code>&gt;&gt;&gt; 2 / (3 - 3)\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n</code></pre> <p>Les nombres de Python peuvent \u00eatre des nombres entiers relatifs, de type <code>int</code>, et des nombres d\u00e9cimaux, que l'on appelle flottants, de type <code>float</code>.</p> <p>Les nombres entiers peuvent \u00eatre de taille arbitraire, et ne sont limit\u00e9s que par la m\u00e9moire disponible de la machine pour les stocker. Les nombres flottants quant \u00e0 eux ont une capacit\u00e9 limit\u00e9e, et les nombres d\u00e9cimaux tr\u00e8s grands et tr\u00e8s petits ne sont pas repr\u00e9sentables. (On reviendra plus tard sur la repr\u00e9sentation des nombres r\u00e9els en machine).</p> <p>Important : En Python, la virgule s\u00e9parant la partie enti\u00e8re de la partie d\u00e9cimale doit \u00eatre repr\u00e9sent\u00e9e par un point, auquel cas vous pourrez observer des comportements \u00e9tranges de l'interpr\u00e9teur.</p> <p>Diff\u00e9rentes fa\u00e7ons de diviser</p> <p>Lorsque l'on utilise l'op\u00e9rateur de division classique de Python <code>/</code>, on obtient un nombre flottant (type <code>float</code>) :</p> <pre><code>&gt;&gt;&gt; 7 / 2\n3.5\n&gt;&gt;&gt; type(7 / 2)\n&lt;class 'float'&gt;\n</code></pre> <p>Les types de base</p> <p>Vous pouvez voir ci-dessus appara\u00eetre le mot-cl\u00e9 <code>class</code>. Les classes sont une notion qui n'est abord\u00e9e qu'en terminale, mais en gros, il faut comprendre que tout ce qui est manipul\u00e9 en Python est objet. Il y a des objets de type <code>int</code> (les nombres entiers), des objets de type <code>float</code> (les nombres flottants), des objets de type <code>str</code> (les cha\u00eenes de caract\u00e8res, etc.)</p> <p>Ici, on a utilis\u00e9 une fonction appel\u00e9e <code>type</code> afin de voir de quel type est l'objet qui r\u00e9sulte de l'op\u00e9ration <code>7 / 2</code>. (On a ici la confirmation que l'on obtient bien un flottant.)</p> <p>Il existe deux autres op\u00e9rateurs bien utiles :</p> <ul> <li><code>//</code> permettant d'obtenir le quotient de la division euclidienne de deux op\u00e9randes,</li> <li><code>%</code> permettant d'obtenir le reste de la division euclidienne de deux op\u00e9randes.</li> </ul> <p>Par exemple :</p> <pre><code>&gt;&gt;&gt; 7 // 2\n3\n&gt;&gt;&gt; 7 % 2\n1\n&gt;&gt;&gt; type(7 // 2)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(7 % 2)\n&lt;class 'int'&gt;\n</code></pre> <p>Ces deux op\u00e9rateurs renvoient donc des entiers. On rappelle que pour deux nombres entiers \\(a\\) et \\(b\\), \\(a = q \\times b + r\\), avec \\(q~=~a~//~b\\) le quotient et \\(r~=~a~\\%~b\\) le reste.</p>"},{"location":"premiere/bases_python/cours/#variables","title":"Variables","text":"<p>Saisir des expressions arithm\u00e9tiques, c'est bien. Mais une calculatrice sait d\u00e9j\u00e0 le faire !</p> <p>Nous allons maintenant introduire la notion de variable. Une variable permet de stocker une donn\u00e9e utilis\u00e9e par un programme.</p> <p>Cela se fait par une affectation qui associe une donn\u00e9e, repr\u00e9sent\u00e9e par une valeur ou une expression, avec un nom. Une expression stock\u00e9e dans une variable peut elle-m\u00eame contenir d'autres variables.</p> <p>Une variable peut s'apparenter \u00e0 une \"bo\u00eete\" sur laquelle est \u00e9crit un nom et dans laquelle on place des informations diverses (m\u00eame si dans la r\u00e9alit\u00e9, ce n'est pas tout \u00e0 fait \u00e7a). Un nom peut \u00eatre n\u2019importe quelle cha\u00eene alphanum\u00e9rique, \u00e0 l'exception de certains mots r\u00e9ser\u00e9s, et ne doit pas commencer par un chiffre.</p> <p>L\u2019op\u00e9rateur d\u2019affectation est not\u00e9 <code>=</code>. Par exemple, l\u2019instruction <code>x = 4</code> associe la valeur 4 au nom <code>x</code> :</p> <pre><code>&gt;&gt;&gt; x = 4\n&gt;&gt;&gt;\n</code></pre> <p>Si l'on saisit une instruction d'affectation dans l'interpr\u00e9teur Python, aucun r\u00e9sultat n'est affich\u00e9. Si l'on souhaite acc\u00e9der \u00e0 la valeur m\u00e9moris\u00e9e dans <code>a</code>, il suffit de saisir :</p> <pre><code>&gt;&gt;&gt; a\n4\n</code></pre> <p>L\u2019instruction <code>y = 3 + 5</code> associe la valeur de l\u2019expression situ\u00e9e \u00e0 droite du signe <code>=</code>, ici 8, au nom <code>y</code>. L\u2019instruction <code>z = x + y</code> associe la valeur de l\u2019expression situ\u00e9e \u00e0 droite du signe <code>=</code>, ici 12 (la somme des valeurs contenues dans les variables <code>x</code> et <code>y</code>), au nom <code>z</code>.</p> <p>Python permet par ailleurs d'effectuer des affectations multiples, par exemple <code>x, y, z = 1, 3, 5</code>, qui associe les valeurs 1, 3 et 5 respectivement aux noms <code>x</code>, <code>y</code> et <code>z</code>. Ceci est \u00e9quivalent \u00e0 \u00e9crire <code>x=1; y=3; z=5</code> sur une ligne ou \u00e0 effectuer les 3 affectations sur 3 lignes successives.</p> <p>\u00c0 retenir</p> <ul> <li>Une variable est compos\u00e9e d\u2019un nom (ou identificateur), d\u2019une adresse en m\u00e9moire o\u00f9 est enregistr\u00e9e une valeur (ou un ensemble de valeurs), et d\u2019un type qui d\u00e9finit ses propri\u00e9t\u00e9s.</li> <li>Une expression a une valeur qui est le r\u00e9sultat d\u2019une combinaison de variables ou d\u2019objets, de constantes et d\u2019op\u00e9rateurs.</li> <li>Une instruction est une commande qui doit \u00eatre ex\u00e9cut\u00e9e par la machine.</li> <li>Une affectation est une instruction qui commande \u00e0 la machine de cr\u00e9er une variable en lui pr\u00e9cisant son nom et la valeur qui lui est associ\u00e9e.</li> </ul> <p>Il est important de bien distinguer une expression, qui se calcule et a une valeur, d'une instruction, qui est ex\u00e9cut\u00e9e par la machine.</p> <p>\u00c0 vous de jouer !</p> <p>Voici une suite d'instructions :</p> <p></p>### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder a = 4bksl-nlb = 6bksl-nlc = a + bbksl-nlbksl-nl <p>Quelle sera la valeur contenue dans la variable <code>c</code> apr\u00e8s avoir saisi ces instructions ?  V\u00e9rifiez en ex\u00e9cutant le programme.</p> <p>M\u00eame question avec la suite d'instructions suivante :</p> <p></p>### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder a = 4bksl-nla = a py-str abksl-nlb = a + 4bksl-nlbksl-nl <p>\u00c0 vous de jouer 2 !</p> <p>Voici une suite d'instructions :</p> <pre><code>x = 3\ny = 6\nz = 4 + x * y\nx = z / 2\n</code></pre> <p>Quelle sera la valeur contenue dans la variable <code>x</code> apr\u00e8s avoir saisi ces instructions ? V\u00e9rifier en utilisant la console de Thonny. Que constatez-vous de particulier sur la valeur contenue dans <code>x</code> ?</p> R\u00e9ponse - \u00c0 vous de jouer 2 ! <p>Normalement, la console devrait afficher la valeur <code>11.0</code>. On constate que l'on obtient ici un nombre d\u00e9cimal, et non pas un nombre entier. En fait, il existe plusieurs types de donn\u00e9es que peuvent contenir les variables : les entiers, les flottants (nombres d\u00e9cimaux), mais \u00e9galement d'autres types de donn\u00e9es que l'on verra plus tard, comme les cha\u00eenes de caract\u00e8res, les bool\u00e9ens...</p> <p>Si l'on avait utilis\u00e9 l'op\u00e9rateur <code>//</code>, c'est-\u00e0-dire si l'on avait saisi <code>z // 2</code>, on aurait obtenu le quotient de la division euclidienne entre les op\u00e9randes <code>z</code> et <code>2</code>, c'est-\u00e0-dire l'entier <code>11</code>. L'op\u00e9rateur permettant d'obtenir le reste d'une division euclidienne est <code>%</code>.</p>"},{"location":"premiere/bases_python/cours/#mode-programme","title":"Mode programme","text":"<p>Le mode programme de Python consiste \u00e0 \u00e9crire une suite d\u2019instructions dans un fichier et \u00e0 les faire ex\u00e9cuter par l\u2019interpr\u00e9teur Python. Cette suite d\u2019instructions s\u2019appelle un programme (ou code source). Cela permet d'\u00e9viter d'avoir \u00e0 ressaisir \u00e0 chaque fois les instructions dans le mode interactif. Cela permet de faire la distinction entre le r\u00f4le de programmeur et celui d\u2019utilisateur d\u2019un programme.</p>"},{"location":"premiere/bases_python/cours/#affichage-sur-la-sortie-standard","title":"Affichage sur la sortie standard","text":"<p>Contrairement au mode interactif, en mode programme, les r\u00e9sultats des expressions calcul\u00e9es ne sont plus affich\u00e9s \u00e0 l\u2019\u00e9cran. Il faut utiliser pour ceci une instruction explicite d\u2019affichage. En Python, elle s\u2019appelle <code>print</code>. Par exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>print(3)bksl-nl</p> <p>On peut \u00e9galement fournir \u00e0 <code>print</code> une expression, qui sera calcul\u00e9e puis affich\u00e9e :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>4 + 2 py-str 3bksl-nl</p> <p><code>print</code> est \u00e9galement capable d'afficher du texte, qui doit \u00eatre mis entre guillemets <code>\"</code> ou apostrophes <code>'</code>, par exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>print(\"Bienvenue \u00e0 tous !\")bksl-nl</p> <p>On peut \u00e9galement afficher la valeur d'une variable, exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>a = 34bksl-nlb = 21 + abksl-nlprint(a)  # afficher la valeur de abksl-nlprint(b)  # afficher la valeur de bbksl-nl</p> <p>Si l'on souhaite inclure la valeur d'une variable dans un texte affich\u00e9 par <code>print</code>, on peut proc\u00e9der de diff\u00e9rentes fa\u00e7ons :</p> <ul> <li>avec la concat\u00e9nation : on peut inclure notre variable dans une cha\u00eene de caract\u00e8res en utilisant la concat\u00e9nation de cha\u00eenes de caract\u00e8res. Pour cela, on transforme notre variable de type <code>int</code> en type <code>str</code> (c'est-\u00e0-dire en cha\u00eene de caract\u00e8res) avec la fonction <code>str()</code>, et on effectue la concat\u00e9nation en utilisant un <code>+</code>.</li> <li>avec des f-strings (pas au programme) : si on ajoute un <code>f</code> devant notre cha\u00eene de caract\u00e8res, on peut inclure nos variables entre accolades, et elles seront remplac\u00e9es par leur valeur. Il n'y a, dans ce cas, pas besoin de convertir le type de nos variables en <code>str</code>.</li> <li>en donnant plusieurs valeurs (plusieurs arguments) \u00e0 notre fonction <code>print</code> : dans ce cas, <code>print</code> affichera chaque valeur les unes \u00e0 la suite des autres, que cela soit des cha\u00eenes de caract\u00e8res ou non.</li> </ul> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>nombre = 42bksl-nlprint(\"Votre nombre est \" + str(nombre) + \" !\")  # avec une concat\u00e9nation de cha\u00eenes de caract\u00e8resbksl-nlbksl-nlprint(f\"Votre nombre est {nombre} !\")  # avec un f-stringbksl-nlbksl-nlprint(\"Votre nombre est \", nombre, \" !\")  # en donnant plusieurs valeurs \u00e0 printbksl-nl</p> <p>La fonction <code>print</code> effectue par d\u00e9faut un retour \u00e0 la ligne apr\u00e8s avoir affich\u00e9 les valeurs que vous lui avez donn\u00e9. Pour changer ce comportement, on peut ajouter le param\u00e8tre <code>end</code> :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>''' Utilisation du param\u00e8tre end de print. '''bksl-nlbksl-nlprint(\"abc\", end=\"\")bksl-nlprint(\"def\", end=\"\")bksl-nlprint(\"ghi\", end=\".\")bksl-nl</p> <p>Un autre param\u00e8tre que l'on peut utiliser avec la fonction <code>print</code> est le param\u00e8tre <code>sep</code>. Ce param\u00e8tre permet d'indiquer un autre caract\u00e8re pour s\u00e9parer plusieurs valeurs donn\u00e9es \u00e0 la fonction <code>print</code>, par exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>''' Utilisation du param\u00e8tre end de print. '''bksl-nlbksl-nl# Initialement, la s\u00e9paration est un espace :bksl-nlprint(\"Bonjour\", \"Monsieur\", \"Demerville\")bksl-nl# Rempla\u00e7ons le s\u00e9parateur par un tiret :bksl-nlprint(\"Bonjour\", \"Monsieur\", \"Demerville\", sep=\"-\")bksl-nl</p>"},{"location":"premiere/bases_python/cours/#interaction-avec-lutilisateur-lire-sur-lentree-standard","title":"Interaction avec l'utilisateur, lire sur l'entr\u00e9e standard","text":"<p>Pour demander \u00e0 l'utilisateur de saisir une valeur, de mani\u00e8re \u00e0 pouvoir la stocker dans une variable et en faire quelque chose, on utilise la fonction <code>input</code>.</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>''' Programme qui calcule le nombre suivant celuibksl-nldonn\u00e9 par l'utilisateur. '''bksl-nlbksl-nls = input()bksl-nla = int(s)bksl-nlprint(\"le nombre suivant est \", a + 1)bksl-nl</p> <p>Attention au type</p> <p>La valeur renvoy\u00e9e par la fonction <code>input</code> est de type <code>str</code> (cha\u00eene de caract\u00e8res). Si vous voulez utiliser cette valeur dans une op\u00e9ration arithm\u00e9tique par exemple, il faut donc la convertir en <code>int</code> (nombre entier), d'o\u00f9 l'utilisation de la fonction <code>int</code> ci-dessus.</p> <p>Un programme contenant un appel \u00e0 <code>input</code> ne s'arr\u00eate que lorsque l'utilisateur a saisi une valeur et appuy\u00e9 sur la touche <code>Entr\u00e9e</code>. En attendant, le programme reste en stand-by.</p> <p>Notebook bloqu\u00e9</p> <p>Lorsque vous travaillez sur un notebook (sur Capytale par exemple), faites attention lorsque vous ex\u00e9cutez une cellule de code contenant un <code>input</code> : tant que vous ne saisissez pas de valeur attendue par la fonction <code>input</code>, l'ex\u00e9cution de la cellule ne s'arr\u00eatera pas, et vous ne pourrez ex\u00e9cuter aucune autre cellule de code pendant ce temps (si vous le faites, vous obtiendrez un message d'erreur).</p> <p>On peut \u00e9galement indiquer dans un <code>input</code> un message \u00e0 afficher, voici une exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>''' Programme qui calcule le nombre suivant celuibksl-nldonn\u00e9 par l'utilisateur. '''bksl-nlbksl-nlage = input(\"Indiquez votre \u00e2ge : \")bksl-nlprint(\"Votre \u00e2ge est de :\", age, \"ans.\")bksl-nl</p> <p>Cela permet d'indiquer \u00e0 l'utilisateur la nature de la valeur attendue.</p>"},{"location":"premiere/bases_python/cours/#les-boucles-bornees-for","title":"Les boucles born\u00e9es <code>for</code>","text":"<p>R\u00e9p\u00e9ter plusieurs fois les m\u00eames instructions est assez r\u00e9barbatif. C'est pour cela qu'il existe une instruction appel\u00e9e boucle born\u00e9e, utilisant le mot-cl\u00e9 <code>for</code>, qui permet de r\u00e9p\u00e9ter plusieurs fois un bloc d'instructions. Par exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>for i in range(10):bksl-nl    print(\"Je ne dois pas bavarder en cours.\")bksl-nl</p> <p>Dans la fonction <code>range</code>, on indique le nombre de fois que l'on souhaite afficher l'instruction <code>print</code>. Ici, on l'affiche 10 fois.</p> <p>En r\u00e9alit\u00e9, ce qu'il se passe, c'est que la boucle va it\u00e9rer de la valeur <code>i = 0</code> \u00e0 la valeur <code>i = 9</code> (la valeur indiqu\u00e9e dans le <code>range</code> moins 1), la variable <code>i</code> fournie \u00e0 notre boucle \u00e9tant ce l'on appelle l'indice de boucle. On dit que <code>i</code> incr\u00e9mente (augmente de 1) \u00e0 chaque it\u00e9ration de la boucle.</p> <p>En pseudo-langage, on pourrait traduire ce programme de la mani\u00e8re suivante : </p><pre><code>POUR i ALLANT DE 0 \u00e0 9 :\n    AFFICHER \"Je ne dois pas bavarder en cours\"\n</code></pre> <p>Si l'on affiche ce que contient notre variable <code>i</code> \u00e0 chaque fois :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>for i in range(10):bksl-nl    print(\"i = \", end=\"\")bksl-nl    print(i)bksl-nl</p> <p>On peut utiliser le <code>range</code> de plusieurs mani\u00e8re diff\u00e9rentes :</p> <ul> <li><code>range(valeur)</code> : avec une seule valeur enti\u00e8re, la boucle va it\u00e9rer de <code>0</code> \u00e0 <code>valeur - 1</code>,</li> <li><code>range(min, max)</code> : avec deux valeurs enti\u00e8res, la boucle va it\u00e9rer de <code>min</code> \u00e0 <code>max - 1</code>,</li> <li><code>range(min, max, pas)</code> : avec trois valeurs enti\u00e8res, la boucle va it\u00e9rer de <code>min</code> \u00e0 <code>max - 1</code> avec un pas de <code>pas</code>. Si l'on n'indique pas ce pas, il est de 1 par d\u00e9faut.</li> </ul> <p>Par exemple, si l'on souhaite afficher tous les nombres pairs de 2 \u00e0 98 :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>''' Affichage des nombres pairs de 2 \u00e0 98 '''bksl-nlbksl-nlfor nb in range(2, 99, 2):bksl-nl    print(nb)bksl-nl</p> <p>Ici, on a appel\u00e9 l'indice de boucle <code>nb</code>. On peut l'appeller comme on veut, mais on utilise souvent des noms \u00e0 une lettre comme <code>i</code>, <code>j</code> et <code>k</code>.</p> <p>On peut \u00e9galement passer la valeur de retour d'un <code>input</code> \u00e0 l'int\u00e9rieur d'un <code>range</code>, par exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>''' Un compte \u00e0 rebours '''bksl-nlbksl-nlnb = input(\"Valeur initiale du compte \u00e0 rebours : \")bksl-nlfor i in range(int(nb), -1, -1):bksl-nl    print(i)bksl-nl</p> <p>Attention au type</p> <p>Le <code>range</code> ne prend que des entiers. Si vous souhaitez lui passer la valeur de retour d'un <code>input</code>, il faut donc convertir cette valeur en valeur enti\u00e8re avec la fonction <code>int</code>.</p>"},{"location":"premiere/bases_python/cours/#comparaisons-booleens-tests","title":"Comparaisons, bool\u00e9ens, tests","text":"<p>Une part importante de la conception d\u2019un programme consiste \u00e0 imaginer les diff\u00e9rents cas de figure possibles, notamment selon les entr\u00e9es fournies par l\u2019utilisateur ou les valeurs des diff\u00e9rentes variables, de mani\u00e8re \u00e0 adapter le programme \u00e0 chacun des cas. Pour traduire cela dans l\u2019\u00e9criture du programme, on peut utiliser des instructions de branchement (<code>if</code>, <code>elif</code>, <code>else</code>) qui rassemblent plusieurs blocs de code alternatifs, chacun associ\u00e9 \u00e0 une condition logique, et qui \u00e0 chaque ex\u00e9cution s\u00e9lectionne au plus l\u2019un de ces blocs.</p>"},{"location":"premiere/bases_python/cours/#les-instructions-de-branchement","title":"Les instructions de branchement","text":"<p>Les instructions <code>if</code> (si), <code>elif</code> (sinon si) et <code>else</code> (sinon) permettent d'ex\u00e9cuter des blocs de code uniquement lorsqu'une condition est remplie. Par exemple, voici un programme qui demande \u00e0 l'utilisateur de saisir un nombre et affiche un message diff\u00e9rent selon le nombre saisi :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>nb = int(input(\"Saisissez votre \u00e2ge : \"))bksl-nlif nb &lt; 5:bksl-nl    print(\"Vous \u00eates un b\u00e9b\u00e9.\")bksl-nlelif nb &lt; 12:bksl-nl    print(\"Vous \u00eates un enfant.\")bksl-nlelif nb &lt; 18:bksl-nl    print(\"Vous \u00eates un ado\")bksl-nlelif nb &lt; 40:bksl-nl    print(\"Vous \u00eates un adulte\")bksl-nlelif nb &lt; 60:bksl-nl    print(\"Vous \u00eates un vieil adulte\")bksl-nlelse:bksl-nl    print(\"Vous \u00eates un vieillard.\")bksl-nl</p> <p>Le programme est execut\u00e9 s\u00e9quentiellement, autrement dit, on v\u00e9rifie d'abord la premi\u00e8re condition, si elle est vraie, alors on affiche le message indiqu\u00e9, sinon on passe \u00e0 la deuxi\u00e8me condition, et ainsi de suite...</p> <p>Le comportement de ce programme est donc le suivant :</p> <ul> <li>si <code>nb</code> est inf\u00e9rieur \u00e0 <code>5</code> (donc compris entre <code>0</code> et <code>4</code> inclus), on affiche <code>\"Vous \u00eates un b\u00e9b\u00e9.\"</code>,</li> <li>sinon si <code>nb</code> est inf\u00e9rieur \u00e0 <code>12</code> (donc compris entre <code>5</code> et <code>11</code> inclus), on affiche <code>\"Vous \u00eates un enfant.\"</code>,</li> <li>sinon si <code>nb</code> est inf\u00e9rieur \u00e0 <code>18</code> (donc compris entre <code>12</code> et <code>17</code> inclus), on affiche <code>\"Vous \u00eates un ado.\"</code>,</li> <li>sinon si <code>nb</code> est inf\u00e9rieur \u00e0 <code>40</code> (donc compris entre <code>18</code> et <code>39</code> inclus), on affiche <code>\"Vous \u00eates un adulte.\"</code>,</li> <li>sinon si <code>nb</code> est inf\u00e9rieur \u00e0 <code>60</code> (donc compris entre <code>40</code> et <code>59</code> inclus), on affiche <code>\"Vous \u00eates un vieil adulte.\"</code>,</li> <li>sinon, (donc si l'\u00e2ge est au moins de <code>60</code>), on affiche <code>\"Vous \u00eates un vieillard.\"</code>.</li> </ul> <p>Une seule branche est donc choisie en fonction de la valeur de <code>nb</code>, et un seul message sera donc affich\u00e9.</p> <p>Voici les symboles permettant d'effectuer des comparaisons :</p> &gt; plus grand que &gt;= sup\u00e9rieur ou \u00e9gal \u00e0 == \u00e9gal \u00e0 &lt; plus petit que &lt;= inf\u00e9rieur ou \u00e9gal \u00e0 != diff\u00e9rent de <p>Homog\u00e9n\u00e9it\u00e9 des valeurs compar\u00e9es</p> <p>Lorsque vous effectuez une comparaison (utilisant l'un des symboles ci-dessus), il faut vous assurer que vous compariez bien ce qui est comparable. Vous pouvez comparer des entiers entre eux, des flottants entre eux, des cha\u00eenes de caract\u00e8res entre eux, ou encore comparer un entier avec un flottant... Mais vous ne pouvez pas, par exemple, comparer un entier avec une cha\u00eene de caract\u00e8res, ou vous obtiendrez une erreur.</p> <pre><code>&gt;&gt;&gt; 1 &lt; \"123\"\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: '&lt;' not supported between instances of 'int' and 'str'\n</code></pre> <p>Le type <code>bool</code></p> <p>Lorsque vous effectuez une expression conditionnelle (qu'on appelera parfois test), cette expression est \u00e9valu\u00e9e par Python soit \u00e0 la valeur <code>True</code>, soit \u00e0 la valeur <code>False</code>. Voici un exemple (ex\u00e9cuter le programme pour voir le r\u00e9sultat) :</p> <p></p>### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder x = 10bksl-nltest1 = x &gt; 5bksl-nltest2 = x &gt; 15bksl-nlbksl-nlprint(\"test1 =\", test1)bksl-nlprint(\"test2 =\", test2)bksl-nl <p>Les valeurs <code>True</code> et <code>False</code> sont des valeurs bool\u00e9ennes (de type <code>bool</code>), ce sont d'ailleurs les deux seules valeurs que peut prendre une variable de ce type.</p> <p>Lorsque vous utilisez une instruction de branchement, comme <code>if &lt;condition&gt;</code>, la condition est une expression qui est \u00e9valu\u00e9e \u00e0 <code>True</code> ou <code>False</code>. Les instructions du bloc <code>if</code> ne sont ex\u00e9cut\u00e9es que si la condition est \u00e9valu\u00e9e \u00e0 <code>True</code>.</p> <p>Par exemple :</p> <pre><code>age = 30\nmajeur = age &gt;= 18\nif majeur:\n    print(\"Vous \u00eates majeur\")\n</code></pre> <p>Ici, l'expression <code>age &gt;= 18</code> est \u00e9valu\u00e9e \u00e0 <code>True</code>, et la valeur <code>True</code> est stock\u00e9e dans la variable <code>majeur</code>. Ainsi, on rentre bien dans le bloc <code>if</code>.</p> <p>Cela revient au m\u00eame r\u00e9sultat que d'\u00e9crire :</p> <pre><code>age = 30\nif age &gt;= 18:\n    print(\"Vous \u00eates majeur\")\n</code></pre>"},{"location":"premiere/bases_python/cours/#les-operateurs-logiques","title":"Les op\u00e9rateurs logiques","text":"<p>En Python, des op\u00e9rateurs logiques permettent de combiner plusieurs conditions et ainsi r\u00e9duire le nombre d'instructions de branchement n\u00e9cessaires.</p>"},{"location":"premiere/bases_python/cours/#loperateur-and","title":"L'op\u00e9rateur <code>and</code>","text":"<p>Si l'on souhaite par exemple v\u00e9rifier deux conditions \u00e0 la fois et afficher le message <code>\"OK\"</code> lorsque les deux conditions sont v\u00e9rifi\u00e9es, on peut proc\u00e9der ainsi :</p> <pre><code>if &lt;condition 1&gt;:\n    if &lt;condition 2&gt;:\n        print(\"OK !\")\n</code></pre> <p>Plut\u00f4t que d'utiliser deux instructions <code>if</code>, on peut obtenir le m\u00eame comportement en utilisant l'op\u00e9rateur logique <code>and</code> de la mani\u00e8re suivante :</p> <pre><code>if &lt;condition 1&gt; and &lt;condition 2&gt;:\n    print(\"OK\")\n</code></pre> <p>En effet, ici, on entre dans le bloc <code>if</code> seulement si le test <code>&lt;condition 1&gt; and &lt;condition 2&gt;</code> est \u00e9valu\u00e9 \u00e0 <code>True</code>, c'est-\u00e0-dire si la condition 1 ET la condition 2 sont toutes les deux vraies (\u00e9valu\u00e9es au bool\u00e9en <code>True</code>).</p> <p>On peut bien s\u00fbr utiliser autant de fois l'op\u00e9rateur <code>and</code> que l'on souhaite \u00e0 l'int\u00e9rieur d'un test, voici un exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>taille = 175bksl-nlpoids = 70bksl-nlif taille &gt; 170 and taille &lt; 180 and poids &gt; 60 and poids &lt; 80:bksl-nl    print(\"Vous pouvez entrer\")bksl-nl</p> <p>Ici, le message <code>\"Vous pouvez entrer\"</code> est affich\u00e9 uniquement si les 4 conditions <code>taille &gt; 170</code>, <code>taille &lt; 180</code>, <code>poids &gt; 60</code>, <code>poids &lt; 80</code> sont v\u00e9rifi\u00e9es.</p>"},{"location":"premiere/bases_python/cours/#loperateur-or","title":"L'op\u00e9rateur <code>or</code>","text":"<p>Autre situation : on souhaite maintenant tester deux conditions, et v\u00e9rifier si seulement l'une ou l'autre est vraie, ou si les deux sont vraies \u00e0 la fois.</p> <p>En utilisant des instructions de branchement, on pourrait \u00e9crire :</p> <pre><code>if &lt;condition 1&gt;:\n    print(\"OK !\")\nelif &lt;condition 2&gt;:\n    print(\"OK !\")\nelse:\n    print(\"Pas ok.\")\n</code></pre> <p>Ici encore, on peut r\u00e9duire le nombre d'instructions de branchement en introduisant l'op\u00e9rateur logique <code>or</code> :</p> <pre><code>if &lt;condition 1&gt; or &lt;condition 2&gt;:\n    print(\"OK !\")\nelse:\n    print(\"Pas ok.\")\n</code></pre> <p>Un op\u00e9rateur paresseux</p> <p>L'op\u00e9rateur <code>or</code> poss\u00e8de une caract\u00e9ristique int\u00e9ressante. En effet, si vous utilisez un <code>or</code> entre deux conditions, Python n'\u00e9valuera pas la deuxi\u00e8me condition si la premi\u00e8re est \u00e9valu\u00e9e \u00e0 <code>True</code>. Par exemple :</p> <pre><code>x = 35\ny = 15\nif x &gt;= 30 or y &lt;= 20:\n    print(\"OK\")\n</code></pre> <p>Ici, l'expression <code>y &lt;= 20</code> ne sera pas \u00e9valu\u00e9e car la premi\u00e8re expression <code>x &gt;= 30</code> est \u00e9valu\u00e9e \u00e0 <code>True</code>. \u00c9tant donn\u00e9 que seule l'une ou l'autre des conditions doit \u00eatre vraie pour que le test <code>x &gt;= 30 or y &lt;= 20</code> soit v\u00e9rifi\u00e9, on a pas besoin de tester la deuxi\u00e8me condition.</p> <p>Voici un autre exemple en utilisant deux op\u00e9rateurs <code>or</code> :</p> <pre><code>x = 35\ny = 15\nz = 'hello'\nif x &gt;= 50 or y &lt;= 20 or z == 'hello':\n    print(\"OK\")\n</code></pre> <p>Ici, on \u00e9valuera le premi\u00e8re et la deuxi\u00e8me condition, mais pas la troisi\u00e8me, car la deuxi\u00e8me condition <code>y &lt;= 20</code> est \u00e9valu\u00e9e \u00e0 <code>True</code>.</p> <p>Tout comme pour le <code>and</code>, on peut accumuler autant de fois l'op\u00e9rateur <code>or</code> qu'on le souhaite dans un test, on peut \u00e9galement combiner des <code>and</code> et des <code>or</code>, par exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>age = 15bksl-nlaccompagne = Truebksl-nlif (age &gt;= 18 and age &lt; 70) or accompagne:bksl-nl    print(\"Vous pouvez entrer\")bksl-nl</p> <p>Python effectue les op\u00e9rations de gauche \u00e0 droite et en tenant compte des parenth\u00e8ses.</p> <p>Dans le programme ci-dessus (n'h\u00e9sitez pas \u00e0 le modifier pour faire vos propres tests), Python effectuera d'abord le test <code>age &gt;= 18 and age &lt; 70</code>, qui sera \u00e9valu\u00e9 \u00e0 <code>False</code>, puis il effectuera ensuite le test <code>False or accompagne</code>, soit (puisque <code>accompagne</code> vaut <code>True</code>) <code>False or True</code>, qui sera donc \u00e9valu\u00e9 \u00e0 <code>True</code>.</p>"},{"location":"premiere/bases_python/cours/#loperateur-not","title":"L'op\u00e9rateur <code>not</code>","text":"<p>L'op\u00e9rateur logique <code>not</code> utilis\u00e9e sur une expression bool\u00e9enne renvoie <code>True</code> si l'expression est \u00e9valu\u00e9e \u00e0 <code>False</code>, et <code>False</code> si l'expression est \u00e9valu\u00e9e <code>True</code>.</p> <p>Voici un exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>age = 15bksl-nlaccompagne = Truebksl-nlif (age &gt;= 18 and age &lt; 70) or accompagne:bksl-nl    print(\"Vous pouvez entrer\")bksl-nl</p>"},{"location":"premiere/bases_python/cours/#tables-de-verite","title":"Tables de v\u00e9rit\u00e9","text":"<p>Les op\u00e9rateurs logiques <code>and</code>, <code>or</code> et <code>not</code> permettent de combiner des expressions bool\u00e9ennes pour cr\u00e9er des conditions plus complexes. Voici les tables de v\u00e9rit\u00e9 qui montrent comment ces op\u00e9rateurs fonctionnent.</p> <code>A</code> <code>B</code> <code>A and B</code> True True True True False False False True False False False False <code>A</code> <code>B</code> <code>A or B</code> True True True True False True False True True False False False <code>A</code> <code>not A</code> True False False True <p>Ces tables montrent que l'op\u00e9rateur <code>and</code> ne renvoie <code>True</code> que si les deux op\u00e9randes sont vraies, tandis que l'op\u00e9rateur <code>or</code> renvoie <code>True</code> si au moins une des op\u00e9randes est vraie. L'op\u00e9rateur <code>not</code>, quant \u00e0 lui, inverse la valeur bool\u00e9enne.</p>"},{"location":"premiere/bases_python/cours/#les-fonctions","title":"Les fonctions","text":"<p>Vous avez jusqu'ici utilis\u00e9 plusieurs fonctions natives de Python, comme <code>print</code>, <code>input</code>, <code>int</code> (la fonction, pas le type), <code>range</code>...</p> <p>Les fonctions permettent de cr\u00e9er des fragments de code r\u00e9utilisables. Cela va nous permettre d'aller beaucoup plus loin dans la conception de nos programmes, en cr\u00e9ant des fonctions pour effectuer certaines t\u00e2ches autant de fois qu'on le souhaite, et pour diff\u00e9rentes valeurs d'entr\u00e9e.</p> <p>Pour d\u00e9finir une fonction, on utilise le mot-cl\u00e9 <code>def</code>, suivi du nom de la fonction, suivi de <code>:</code>, puis vient ensuite (\u00e0 la ligne, avec une identation) le bloc d'instructions \u00e0 ex\u00e9cuter dans la fonction.</p> <p>Une fonction = une t\u00e2che</p> <p>Il est fortement conseill\u00e9, pour la clart\u00e9 du code, de faire en sorte qu'une fonction repr\u00e9sente une seule t\u00e2che.</p> <p>Par exemple, voici une fonction qui prend deux nombres entiers et renvoie la somme de ces deux nombres :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>def somme(a, b):bksl-nl    ''' Fonction qui renvoie la somme des entiers a et b. '''bksl-nl    return a + bbksl-nl</p> <p>Pour tester cette fonction, vous pouvez l'appeler dans l'interpr\u00e9teur  (en saisissant l'instruction d'appel apr\u00e8s les trois chevrons <code>&gt;&gt;&gt;</code> et en appuyant sur la touche <code>Entr\u00e9e</code>) apr\u00e8s avoir ex\u00e9cut\u00e9 le programme. Par exemple, entrez l'instruction <code>somme(3,5)</code> dans l'interpr\u00e9teur ci-dessus apr\u00e8s ex\u00e9cution du programme pour observer le r\u00e9sultat.</p> <p>Vous pouvez \u00e9galement appeller cette fonction directement dans le programme, mais pour afficher la valeur renvoy\u00e9e, il faudra ajouter un <code>print</code> :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>def somme(a, b):bksl-nl    ''' Fonction qui renvoie la somme des entiers a et b. '''bksl-nl    return a + bbksl-nlbksl-nlprint(\"La somme de 4 et de 8 vaut : \", somme(4, 8))bksl-nl</p> <p>La valeur renvoy\u00e9e par la fonction est indiqu\u00e9e avec le mot-cl\u00e9 <code>return</code>. Lorsque le <code>return</code> est rencontr\u00e9, on sort de la fonction. Ainsi, si vous rajoutez des instructions apr\u00e8s ce <code>return</code>, elles ne seront pas ex\u00e9cut\u00e9es, exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>def somme(a, b):bksl-nl    ''' Fonction qui renvoie la somme des entiers a et b. '''bksl-nl    return a + bbksl-nl    print(\"Ce message n'apparaitra pas.\")bksl-nl</p>"},{"location":"premiere/bases_python/cours/#fonctions-sans-parametres","title":"Fonctions sans param\u00e8tres","text":"<p>Une fonction peut ne pas avoir de param\u00e8tres. Par exemple, voici une fonction qui renvoie une valeur al\u00e9atoire entre 1 et 100, en appelant la fonction <code>randint</code> du module <code>random</code> :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>from random import randintbksl-nlbksl-nldef valeurpy-undaleatoire():bksl-nl    return randint(1,100)bksl-nlbksl-nlprint(\"Valeur al\u00e9atoire : \", valeurpy-undaleatoire())bksl-nl</p> <p>Ici, on appelle la fonction sans lui fournir de valeurs, mais la fonction appel\u00e9e renvoie bien une valeur (le mot-cl\u00e9 <code>return</code> est bien pr\u00e9sent).</p>"},{"location":"premiere/bases_python/cours/#fonctions-sans-valeur-de-retour-procedures","title":"Fonctions sans valeur de retour : proc\u00e9dures","text":"<p>Il est \u00e9galement possible de cr\u00e9er une fonction qui ne contient pas de valeur de retour (pas de <code>return</code>). Par exemple :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>def hurler(message):bksl-nl    print(message)bksl-nlbksl-nlhurler(\"HOURAAAAAAAAAAA !!!\")bksl-nl</p> <p>On cr\u00e9e ici une fonction qui contient un param\u00e8tre <code>message</code>, et qui affiche avec <code>print</code> ce message, mais ne renvoie rien. La fonction est ensuite appel\u00e9e, avec le message <code>\"HOURAAAAAAAAAAA !!!\"</code> qui est donc affich\u00e9.</p> <p>Les fonctions qui ne renvoient rien peuvent \u00eatre appel\u00e9es proc\u00e9dures. Toutefois, en Python, il n'y a techniquement pas de distinction entre les fonctions et les proc\u00e9dures, contrairement \u00e0 d'autres langages comme le Java par exemple.</p>"},{"location":"premiere/bases_python/cours/#variables-locales-et-globales","title":"Variables locales et globales","text":"<p>Lorsque vous d\u00e9finissez une variable \u00e0 l'int\u00e9rieur d'une fonction, cette variable n'existe qu'\u00e0 l'int\u00e9rieur de la fonction.</p> <p>Par exemple, dans la fonction ci-dessous, on a cr\u00e9\u00e9 une variable <code>resultat</code>. Cette variable n'existe qu'\u00e0 l'int\u00e9rieur de la fonction, vous pourriez donc avoir une autre variable <code>resultat</code> \u00e0 l'ext\u00e9rieur de la fonction, qui contiendrait une autre valeur.</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>def produit(a, b):bksl-nl    resultat = 1bksl-nl    for py-und in range(b):bksl-nl        resultat = resultat py-str abksl-nl    return resultatbksl-nl</p>"},{"location":"premiere/bases_python/cours/#les-boucles-non-bornees-while","title":"Les boucles non born\u00e9es <code>while</code>","text":"<p>Nous avons vu qu'il \u00e9tait possible de cr\u00e9er des boucles born\u00e9es \u00e0 l'aide d'instructions utilisant le mot-cl\u00e9 <code>for</code>. Nous allons voir ici que l'on peut \u00e9galement cr\u00e9er des boucles non born\u00e9es \u00e0 l'aide du mot-cl\u00e9 <code>while</code> (qui signifie TANT QUE en fran\u00e7ais).</p> <p>Une boucle non born\u00e9e permet d'ex\u00e9cuter un bloc d'instructions plusieurs fois, et de continuer TANT QUE une condition donn\u00e9e est v\u00e9rifi\u00e9e.</p> <p>La structure d'une boucle <code>while</code> en Python est la suivante :</p> <pre><code>while condition:\n    # Bloc d'instructions \u00e0 r\u00e9p\u00e9ter tant que la condition est vraie\n</code></pre> <p>La boucle <code>while</code> commence par \u00e9valuer la condition :</p> <ul> <li>Si la condition est vraie, le bloc d'instructions \u00e0 l'int\u00e9rieur de la boucle est ex\u00e9cut\u00e9.</li> <li>Apr\u00e8s chaque ex\u00e9cution du bloc, la condition est \u00e0 nouveau \u00e9valu\u00e9e :<ul> <li>Tant que la condition reste vraie, la boucle continue de s'ex\u00e9cuter.</li> <li>D\u00e8s que la condition devient fausse, la boucle s'arr\u00eate.</li> </ul> </li> </ul> <p>Voici un premier exemple d'utilisation d'une boucle <code>while</code> (cliquez sur le premier bouton, Lancer, pour ex\u00e9cuter le programme):</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>i = 1bksl-nlwhile i &lt;= 5:bksl-nl    print(i)bksl-nl    i += 1bksl-nl</p> <p>Dans cet exemple, la boucle <code>while</code> est utilis\u00e9e pour afficher les nombres de <code>1</code> \u00e0 <code>5</code>. La variable <code>i</code> est initialis\u00e9e \u00e0 <code>1</code>, et la boucle continue TANT QUE <code>i</code> est inf\u00e9rieur ou \u00e9gal \u00e0 <code>5</code>. \u00c0 chaque it\u00e9ration de la boucle, la valeur de <code>i</code> est ici affich\u00e9e (\u00e0 l'aide du <code>print</code>), puis est incr\u00e9ment\u00e9e de <code>1</code> \u00e0 l'aide de l'instruction <code>i += 1</code>. La boucle s'arr\u00eate lorsque <code>i</code> atteint <code>6</code>, car la condition devient fausse.</p> <p>Voici un autre exemple un peu plus concret de l'utilisation d'une boucle <code>while</code> :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>motpy-unddepy-undpasse = \"secret\"bksl-nlessaispy-undrestants = 3bksl-nlbksl-nlwhile essaispy-undrestants &gt; 0:bksl-nl    tentative = input(\"Entrez le mot de passe : \")bksl-nl    bksl-nl    if tentative == motpy-unddepy-undpasse:bksl-nl        print(\"Acc\u00e8s autoris\u00e9 !\")bksl-nl        break  # Sortir de la bouclebksl-nl    else:bksl-nl        essaispy-undrestants -= 1bksl-nl        print(f\"Mot de passe incorrect. Il vous reste {essaispy-undrestants} essais.\")bksl-nlbksl-nlif essaispy-undrestants == 0:bksl-nl    print(\"Nombre maximal d'essais atteint. Acc\u00e8s refus\u00e9.\")bksl-nl</p> <p>Dans cet exemple, une boucle <code>while</code> est utilis\u00e9e pour demander \u00e0 l'utilisateur (\u00e0 l'aide de la fonction <code>input</code>) de saisir un mot de passe jusqu'\u00e0 trois essais. La boucle continue tant qu'il reste des essais (tant que <code>essais_restants &gt; 0</code>) :</p> <ul> <li>Si l'utilisateur saisit le mot de passe correct (c'est-\u00e0-dire lorsque <code>tentative == mot_de_passe</code>), la boucle s'arr\u00eate \u00e0 l'aide de l'instruction <code>break</code>. L'instruction <code>break</code> permet de sortir directement de la boucle, et \u00e9vite donc de r\u00e9-\u00e9valuer sa condition.</li> <li>Sinon, le nombre d'essais restants est d\u00e9cr\u00e9ment\u00e9 (cela signifie que l'on soustrait 1 \u00e0 <code>essais_restants</code>), et un message est affich\u00e9 (\u00e0 l'aide de la fonction <code>print</code>) pour informer l'utilisateur du nombre d'essais restants.</li> </ul> <p>Une fois que l'on est sorti de la boucle (ce qui se produit soit si on a rencontr\u00e9 l'instruction <code>break</code>, soit si la condition de la boucle est fausse), on affiche un message d'acc\u00e8s refus\u00e9 si le nombre maximal d'essais a \u00e9t\u00e9 atteint.</p> <p>Attention aux boucles infinies !</p> <p>Dans une boucle non born\u00e9e <code>while</code>, contrairement \u00e0 une boucle born\u00e9e <code>for</code>, il y a un risque de cr\u00e9er boucle infinie, c'est-\u00e0-dire une boucle dont la condition n'est jamais \u00e9valu\u00e9e \u00e0 <code>False</code>. Par exemple :</p> <pre><code>i = 1\nwhile i &lt; 5:\n    print(i)\n</code></pre> <p>Ici, on n'a pas \u00e9crit d'instruction permettant d'incr\u00e9menter la variable <code>i</code>, donc la condition <code>i &lt; 5</code> sera toujours vraie. Le programme ne s'arr\u00eatera donc jamais.</p> <p>\u00c0 vous de jouer !</p> <p>\u00c9crivez un programme en Python qui demande \u00e0 l'utilisateur d'entrer un nombre entier positif <code>n</code>. Ensuite, utilisez une boucle <code>while</code> pour calculer la somme de tous les entiers de <code>1</code> \u00e0 <code>n</code>. Affichez ensuite le r\u00e9sultat.</p> <p>Voici un exemple d'ex\u00e9cution du programme :</p> <pre><code>Entrez un nombre entier positif : 5\nLa somme des entiers de 1 \u00e0 5 est : 15\n</code></pre> Cliquez ici pour afficher l'aide <p>Voici comment proc\u00e9der pour r\u00e9aliser ce programme :</p> <ol> <li>Utilisez la fonction <code>input</code> pour demander \u00e0 l'utilisateur de saisir un nombre entier positif, vous stockerez la valeur saisie dans une variable que vous pourrez appeler <code>n</code>. N'oubliez de convertir cette valeur en entier \u00e0 l'aide de la fonction <code>int</code>.</li> <li>Cr\u00e9ez une variable pour accumuler la somme totale, que vous initialiserez \u00e0 <code>0</code> avant d'entrer dans la boucle.</li> <li>Cr\u00e9ez une variable que vous appelerez <code>i</code> par exemple, qui prendra chaque valeur de 1 \u00e0 <code>n</code>.</li> <li>Utilisez une boucle <code>while</code> qui continue tant que <code>i</code> est inf\u00e9rieur ou \u00e9gal \u00e0 <code>n</code>, pour ajouter les entiers de <code>1</code> \u00e0 <code>n</code> \u00e0 la somme totale.</li> <li>N'oubliez pas d'incr\u00e9menter la valeur de <code>i</code> \u00e0 chaque it\u00e9ration de la boucle.</li> <li>Enfin, apr\u00e8s la boucle, affichez le r\u00e9sultat \u00e0 l'aide de la fonction <code>print</code>.</li> </ol> <p>Vous pouvez r\u00e9aliser ce programme sur Thonny ou dans l'IDE ci-dessous (vous pourrez t\u00e9l\u00e9charger votre programme en cliquant sur le deuxi\u00e8me bouton pour le conserver.)</p> <p></p>### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder"},{"location":"premiere/bases_python/cours/#les-listes","title":"Les listes","text":"<p>En programmation en langage Python, les listes sont l'une des structures de donn\u00e9es les plus couramment utilis\u00e9es. Une liste (objet de type <code>list</code>) est une collection ordonn\u00e9e d'\u00e9l\u00e9ments pouvant \u00eatre de diff\u00e9rents types (nombres entiers, flottants, cha\u00eenes de caract\u00e8res, objets, etc.). Les listes sont extr\u00eamement flexibles et permettent de stocker et de manipuler des donn\u00e9es de mani\u00e8re efficace.</p>"},{"location":"premiere/bases_python/cours/#creation-dune-liste","title":"Cr\u00e9ation d'une liste","text":"<p>Pour cr\u00e9er une liste en Python, vous pouvez utiliser des crochets <code>[]</code> et s\u00e9parer les \u00e9l\u00e9ments par des virgules. Voici comment cr\u00e9er une liste simple :</p> <pre><code>ma_liste = [1, 2, 3, 4, 5]\n</code></pre> <p>On aurait \u00e9galement pu cr\u00e9er cette liste en utilisant la m\u00e9thode de cr\u00e9ation par compr\u00e9hension, en utilisant une boucle :</p> <pre><code>ma_liste = [v for v in range(1, 6)]\n</code></pre> <p>Si l'on voulait cr\u00e9er une liste contenant tous les nombres pairs de 2 \u00e0 98 en utilisant la m\u00e9thode par compr\u00e9hension, on aurait \u00e9crit :</p> <pre><code>ma_liste = [v for v in range(2, 99, 2)]\n</code></pre> <p>ou bien, en ajoutant une condition <code>if</code> :</p> <pre><code>ma_liste = [v for v in range(2, 99) if v % 2 == 0]\n</code></pre> <p>Une liste peut contenir n'importe quel type d'\u00e9l\u00e9ment, y compris d'autres listes. Par exemple :</p> <pre><code>liste_mixte = [1, \"texte\", 3.14, [10, 20, 30]]\n</code></pre>"},{"location":"premiere/bases_python/cours/#acces-aux-elements-dune-liste","title":"Acc\u00e8s aux \u00e9l\u00e9ments d'une liste","text":"<p>Vous pouvez acc\u00e9der aux \u00e9l\u00e9ments individuels d'une liste en utilisant leur indice (position) dans la liste. L'indice commence \u00e0 <code>0</code> pour le premier \u00e9l\u00e9ment. Voici comment acc\u00e9der aux \u00e9l\u00e9ments d'une liste :</p> <pre><code>ma_liste = [10, 20, 30, 40, 50]\n\n# Acc\u00e8s au premier \u00e9l\u00e9ment (indice 0)\npremier_element = ma_liste[0]  # premier_element contient maintenant 10\n\n# Acc\u00e8s au troisi\u00e8me \u00e9l\u00e9ment (indice 2)\ntroisieme_element = ma_liste[2]  # troisieme_element contient maintenant 30\n</code></pre>"},{"location":"premiere/bases_python/cours/#modification-des-elements-dune-liste","title":"Modification des \u00e9l\u00e9ments d'une liste","text":"<p>Les \u00e9l\u00e9ments d'une liste peuvent \u00eatre modifi\u00e9s en utilisant leur indice. Par exemple :</p> <pre><code>ma_liste = [10, 20, 30, 40, 50]\n\n# Modification du deuxi\u00e8me \u00e9l\u00e9ment (indice 1)\nma_liste[1] = 25  # La liste devient maintenant [10, 25, 30, 40, 50]\n</code></pre>"},{"location":"premiere/bases_python/cours/#ajout-et-suppression-delements","title":"Ajout et suppression d'\u00e9l\u00e9ments","text":"<p>Pour ajouter un \u00e9l\u00e9ment \u00e0 la fin d'une liste, vous pouvez utiliser la m\u00e9thode <code>append()</code> :</p> <pre><code>ma_liste = [1, 2, 3]\nma_liste.append(4)  # La liste devient maintenant [1, 2, 3, 4]\n</code></pre> <p>Pour supprimer un \u00e9l\u00e9ment en fonction de sa valeur, vous pouvez utiliser la m\u00e9thode <code>remove()</code> :</p> <pre><code>ma_liste = [1, 2, 3, 4, 5]\nma_liste.remove(3)  # La liste devient maintenant [1, 2, 4, 5]\n</code></pre> <p>Pour supprimer un \u00e9l\u00e9ment en fonction de son indice, vous pouvez utiliser le mot-cl\u00e9 <code>del</code> :</p> <pre><code>ma_liste = [1, 2, 3, 4, 5]\ndel ma_liste[2]  # La liste devient maintenant [1, 2, 4, 5]\n</code></pre> <p>\u00c0 noter que la suppression d'\u00e9l\u00e9ments dans une liste n'est pas au programme de premi\u00e8re, ni m\u00eame de terminale. Vous ne serez donc pas interrog\u00e9s dessus, mais cela peut s'av\u00e9rer bien utile tout de m\u00eame.</p>"},{"location":"premiere/bases_python/cours/#parcours-dune-liste-avec-des-boucles","title":"Parcours d'une liste avec des boucles","text":"<p>Les listes sont souvent parcourues \u00e0 l'aide de boucles born\u00e9es <code>for</code>. Voici comment parcourir une liste et afficher ses \u00e9l\u00e9ments :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>mapy-undliste = [10, 20, 30, 40, 50]bksl-nlbksl-nlfor element in mapy-undliste:bksl-nl    print(element)bksl-nl</p> <p>Ce code affichera chaque \u00e9l\u00e9ment de la liste sur une ligne diff\u00e9rente.</p> <p>Une autre m\u00e9thode pour parcourir une liste et afficher ses \u00e9l\u00e9ments consiste \u00e0 utiliser l'indice de ses \u00e9l\u00e9ments : On souhaite maintenant parcourir, \u00e0 l'aide d'une boucle <code>for</code>, chaque \u00e9l\u00e9ment \u00e0 partir de l'indice <code>0</code> (indice du premier \u00e9l\u00e9ment), et jusqu'\u00e0 l'indice du dernier \u00e9l\u00e9ment.</p> <p>On peut faire cela en utilisant une boucle <code>for</code> avec la fonction <code>range()</code> pour g\u00e9n\u00e9rer des indices, puis en acc\u00e9dant aux \u00e9l\u00e9ments de la liste \u00e0 l'aide de ces indices. Voici comment cela fonctionne :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>mapy-undliste = [10, 20, 30, 40, 50]bksl-nlbksl-nl# Obtenez la longueur de la listebksl-nllongueur = len(mapy-undliste)bksl-nlbksl-nl# Utilisez une boucle for avec la fonction range() pour g\u00e9n\u00e9rer des indicesbksl-nlfor i in range(longueur):bksl-nl    element = mapy-undliste[i]bksl-nl    print(f\"\u00c9l\u00e9ment \u00e0 l'indice {i} : {element}\")bksl-nl</p> <p>Dans cet exemple, nous avons utilis\u00e9 la fonction <code>len</code> sur <code>ma_liste</code> pour obtenir la longueur de la liste, c'est-\u00e0-dire son nombre d'\u00e9l\u00e9ments. Ensuite, nous avons utilis\u00e9 <code>range(longueur)</code> pour g\u00e9n\u00e9rer une s\u00e9quence d'indices de <code>0</code> \u00e0 <code>longueur - 1</code>. \u00c0 chaque it\u00e9ration de la boucle, nous avons acc\u00e9d\u00e9 \u00e0 l'\u00e9l\u00e9ment d'indice <code>i</code> \u00e0 l'aide de <code>ma_liste[i]</code>, puis nous l'avons affich\u00e9.</p> <p>On aurait pu \u00e9crire ce programme de mani\u00e8re plus simple, comme ceci :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>mapy-undliste = [10, 20, 30, 40, 50]bksl-nlbksl-nl# Utilisez une boucle for avec la fonction range() pour g\u00e9n\u00e9rer des indicesbksl-nlfor i in range(len(mapy-undliste)):bksl-nl    element = mapy-undliste[i]bksl-nl    print(f\"\u00c9l\u00e9ment \u00e0 l'indice {i} : {element}\")bksl-nl</p> <p>Ici, on a mis directement <code>len(ma_liste)</code> \u00e0 l'int\u00e9rieur du <code>range</code>, ce qui \u00e9vite de cr\u00e9er une variable suppl\u00e9mentaire.</p>"},{"location":"premiere/bases_python/cours/#a-vous-de-jouer","title":"\u00c0 vous de jouer !","text":"<p>Exercice : Manipulation de listes</p> <p>Cr\u00e9ez un programme en r\u00e9alisant les t\u00e2ches suivantes :</p> <ol> <li>Cr\u00e9ez une liste appel\u00e9e <code>nombres</code> contenant les entiers de <code>1</code> \u00e0 <code>5</code>.</li> <li>Utilisez une boucle <code>for</code> pour parcourir la liste <code>nombres</code> et afficher chaque \u00e9l\u00e9ment.</li> <li>Modifiez la liste <code>nombres</code> pour qu'elle contienne les carr\u00e9s des nombres de <code>1</code> \u00e0 <code>5</code>. Cela signifie que la liste doit maintenant contenir <code>[1, 4, 9, 16, 25]</code>.</li> <li>Utilisez \u00e0 nouveau une boucle <code>for</code> pour parcourir la liste mise \u00e0 jour et afficher chaque \u00e9l\u00e9ment.</li> </ol> Aide - Code \u00e0 trous <p>Pour vous aider, vous pouvez r\u00e9utiliser ce programme \u00e0 trous :</p> <pre><code># Cr\u00e9er une liste contenant les entiers de 1 \u00e0 5\nnombres = .......\n\n# Parcourir la liste et afficher chaque \u00e9l\u00e9ment\nprint(\"Liste d'origine :\")\nfor nombre in .......:\n    print(.......)\n\n# Modifier la liste pour qu'elle contienne les carr\u00e9s des nombres de 1 \u00e0 5\nfor ... in range(.......):\n    nombres[i] = ....... ** 2\n\n# Parcourir la liste mise \u00e0 jour et afficher chaque \u00e9l\u00e9ment\nprint(\"\\nListe mise \u00e0 jour :\")\nfor nombre in .......:\n    print(.......)\n</code></pre> <p>Vous pouvez r\u00e9aliser ce programme sur Thonny ou dans l'IDE ci-dessous (vous pourrez t\u00e9l\u00e9charger votre programme en cliquant sur le deuxi\u00e8me bouton pour le conserver.)</p> <p></p>### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder"},{"location":"premiere/bases_python/cours/#les-chaines-de-caracteres","title":"Les cha\u00eenes de caract\u00e8res","text":"<p>Les cha\u00eenes de caract\u00e8res offrent une certaine ressemblance avec les tuples, dans le sens o\u00f9 l'on peut lire les caract\u00e8res de la m\u00eame mani\u00e8re que l'on lit les \u00e9l\u00e9ments d'un tuple, mais on ne peut pas modifier une cha\u00eene de caract\u00e8res.</p> <p>En particulier, on peut obtenir la taille d\u2019une cha\u00eene de caract\u00e8res, c\u2019est-\u00e0-dire son nombre de caract\u00e8res, avec l\u2019op\u00e9ration <code>len</code> et acc\u00e9der au i-i\u00e8me caract\u00e8re d\u2019une cha\u00eene avec les crochets :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>s = \"abcdefgh\"bksl-nlbksl-nlprint(len(s))  # afficher la taille de la cha\u00eene sbksl-nlbksl-nlprint(s[0])  # afficher le premier caract\u00e8re de sbksl-nlbksl-nlprint(s[len(s) - 1])  # afficher le dernier caract\u00e8re de sbksl-nl</p> <p>Voici deux mani\u00e8re dont on peut parcourir une cha\u00eene de caract\u00e8res pour afficher chaque caract\u00e8re un \u00e0 un, le principe est le m\u00eame que pour les listes et les tuples :</p> <p>En r\u00e9cup\u00e9rant directement chaque \u00e9l\u00e9ment \u00e0 chaque it\u00e9ration d'une boucle :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>s = \"abcdefgh\"bksl-nlbksl-nlfor car in s:bksl-nl    print(car)bksl-nl</p> <p>En r\u00e9cup\u00e9rant chaque \u00e9l\u00e9ment par son indice (la variable <code>i</code> de la boucle prendra les valeurs <code>0</code>, puis <code>1</code>, puis <code>2</code>, juste qu'\u00e0 l'indice du dernier \u00e9l\u00e9ment):</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>s = \"abcdefgh\"bksl-nlbksl-nlfor i in range(len(s)):bksl-nl    print(s[i])bksl-nl</p> <p>Une autre op\u00e9ration bien utile sur les cha\u00eenes de caract\u00e8res est l'op\u00e9ration de concat\u00e9nation. Cela permet de cr\u00e9er une nouvelle cha\u00eene en combinant deux cha\u00eenes de caract\u00e8res \u00e0 l'aide du symbole <code>+</code>, par exemple (ex\u00e9cutez le script suivant pour observer le r\u00e9sultat de la concat\u00e9nation de <code>a</code> et <code>b</code>):</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>a = \"abc\"bksl-nlb = \"def\"bksl-nlbksl-nlprint(a + b)bksl-nl</p> <p>On peut \u00e9galement chercher un caract\u00e8re ou m\u00eame un mot dans une cha\u00eene de caract\u00e8res avec le mot-cl\u00e9 <code>in</code> :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>s = \"Bonjour tout le monde\"bksl-nlbksl-nlprint(\"tout\" in s)  # affichera Truebksl-nlprint(\"la\" in s)  # affichera Falsebksl-nl</p>"},{"location":"premiere/bases_python/dm1/","title":"Correction du DM 1","text":""},{"location":"premiere/bases_python/dm1/#correction-du-dm-1","title":"Correction du DM 1","text":"<p>T\u00e9l\u00e9charger le DM</p> <ul> <li>DM1.pdf - \u00c9nonc\u00e9 du DM 1.</li> </ul>"},{"location":"premiere/bases_python/dm1/#correction-partie-papier","title":"Correction partie papier","text":"<p>Exercice 1 - Vrai ou Faux ?</p> <ol> <li>Apr\u00e8s les instructions <code>x = 3</code>, <code>y = 5</code>, <code>x = y</code>, <code>y = x</code>, la valeur de x est 5 et la valeur de y est 3. C'est faux. Pour inverser les valeurs de <code>x</code> et de <code>y</code>, on a besoin d'une troisi\u00e8me variable temporaire pour y stocker l'une des deux valeurs. Sinon, la valeur de <code>x</code> est perdue car la variable prend la valeur de <code>y</code>. Une solution : <pre><code>x = 3\ny = 5\ntemp = x\nx = y\ny = temp\n</code></pre> </li> <li> <p>Apr\u00e8s les instructions <code>x = 3</code>, <code>y = 5</code>, <code>y == x</code>, <code>x = y</code>, la valeur de <code>x</code> est <code>5</code> et la valeur de <code>y</code> est <code>5</code>. C'est vrai. Ici, la troisi\u00e8me instruction effectue une comparaison (il y a deux <code>=</code> et pas un), et non pas une affectation. Cette expression bool\u00e9enne renvoie <code>True</code> ou <code>False</code>, mais la valeur n'est stock\u00e9e nul part. La variable <code>x</code> prend ensuite la valeur de <code>y</code>, donc <code>5</code>.</p> </li> <li> <p>L\u2019instruction <code>print(bonjour)</code> va afficher <code>\"bonjour\"</code>. C'est faux. La fonction <code>print</code> permet d'afficher une cha\u00eene de caract\u00e8res. Ici, <code>bonjour</code> n'est pas entour\u00e9 de guillemets, et est donc consid\u00e9r\u00e9 comme une variable. Une erreur indiquant que la variable <code>bonjour</code> n'existe pas sera donc lev\u00e9e.</p> </li> <li> <p>La fonction <code>input</code> renvoie une cha\u00eene de caract\u00e8res. C'est vrai. La fonction <code>input</code> renvoie une cha\u00eene de caract\u00e8res. Ainsi, si l'on a besoin de transformer la valeur renvoy\u00e9e par un <code>input</code> en un nombre entier par exemple, notamment pour utiliser la valeur dans un <code>range</code> (qui ne prend que des entiers), on peut convertir cette valeur avec la fonction <code>int</code>. Par exemple : <pre><code>nb = int(input(\"Saisissez un nombre : \"))\n</code></pre> Ici, la valeur retour de l'<code>input</code> sera convertie en nombre entier. ```</p> </li> <li> <p>L\u2019instruction <code>if ...</code> est une instruction conditionnelle. C'est vrai. Les instructions conditionnelles permettent d'ex\u00e9cuter des blocs de code seulement lorsqu'une condition est remplie. Voir cette partie du cours.</p> </li> <li> <p>Avec <code>for i in range(10)</code>, la variable <code>i</code> prend 9 valeurs, puisque la derni\u00e8re est <code>9</code>. C'est faux. Une boucle <code>for ... in range(...)</code>, lorsque le <code>range</code> ne prend qu'une seule valeur, commence \u00e0 l'indice <code>0</code> et se termine \u00e0 l'indice indiqu\u00e9 dans le <code>range</code> moins 1. Ici, il y a donc 10 valeurs, de 0 \u00e0 9.</p> </li> <li> <p>Avec <code>for i in range(9, 0, -3)</code>, les valeurs successives prises par la variable <code>i</code> sont <code>9</code>, <code>6</code>, <code>3</code>, <code>0</code>. C'est faux. Ici, le <code>range</code> contient trois valeurs, ce qui signifie que l'on commence \u00e0 la valeur <code>9</code>, jusqu'\u00e0 la valeur <code>0</code> EXCLUE, avec un pas de <code>-3</code>. Le <code>0</code> n'est pas pris, car on s'arr\u00eate toujours un cran avant. Ici, <code>i</code> ne prendra que les valeurs <code>9</code>, <code>6</code> et <code>3</code>.</p> </li> <li> <p>Si l\u2019on ex\u00e9cut\u00e9 l\u2019instruction \u00e2ge = int(input(\"Veuillez entrer votre \u00e2ge ! \")), la variable \u00e2ge cr\u00e9\u00e9e est de type str (cha\u00eene de caract\u00e8res). C'est vrai. <code>input</code> renvoie une valeur de type <code>str</code>, c'est-\u00e0-dire une cha\u00eene de caract\u00e8res.</p> </li> <li> <p>Une variable bool\u00e9enne ne peut prendre que deux valeurs. C'est vrai. Une variable bool\u00e9enne peut prendre soit la valeur <code>True</code>, soit la valeur <code>False</code>.</p> </li> <li> <p>Si a = True et b = False, alors le test <code>b or a and b</code> renvoie True. C'est faux. Lorsque l'on effectue le test <code>b or a and b</code>, on teste d'abord <code>b or a</code>, qui ici vaut <code>True</code>, puisque <code>True or False = True</code>, puis on teste enfin <code>True and b</code>, qui vaut <code>False</code>, puise <code>True and False = False</code> (avec l'op\u00e9rateur <code>and</code>, les deux variables doivent \u00eatre \u00e0 <code>True</code> pour obtenir <code>True</code>).</p> </li> </ol> <p>Exercice 2</p> <ol> <li> <p>En quelle ann\u00e9e le langage Python a t-il \u00e9t\u00e9 cr\u00e9\u00e9 ? Le langage Python a \u00e9t\u00e9 cr\u00e9\u00e9 en 1991 par Guido Van Rossum, un informaticien n\u00e9erlandais.</p> </li> <li> <p>Voici 4 propositions, entourez celles qui sont des expressions (ici en bleu) et soulignez celles qui sont des affectations (ici en vert) :</p> <ol> <li>a &lt; b</li> <li>a != b</li> <li>a = b</li> <li>a &gt;= b</li> </ol> </li> <li> <p>On consid\u00e8re les instructions suivantes ex\u00e9cut\u00e9es dans l\u2019ordre : <code>a=8</code>, <code>b=5</code>, <code>a==b+1</code>, <code>b=b +1</code>, <code>a==b+1</code>, <code>b=b+1</code>, <code>print(a==b+1)</code>. Quel est le r\u00e9sultat affich\u00e9 \u00e0 l\u2019issue de la derni\u00e8re instruction ? Le r\u00e9sultat obtenu \u00e0 l'issue de la derni\u00e8re instruction est <code>True</code>. <code>a</code> prend la valeur <code>8</code>, <code>b</code> prend la valeur <code>5</code>, ensuite, on fait une comparaison <code>a == b+1</code> qui est \u00e9valu\u00e9e \u00e0 <code>False</code> (car <code>8 != 6</code>), mais cette valeur <code>False</code> n'est stock\u00e9e nulle part. Ensuite, on affecte \u00e0 <code>b</code> la valeur <code>b + 1</code>, c'est-\u00e0-dire <code>6</code>. Donc <code>a = 8</code> et <code>b = 6</code>. On fait de nouveau une comparaison <code>a == b+1</code>, qui est \u00e9value \u00e0 <code>False</code> (car <code>8 != 7</code>). Cette valeur <code>False</code> n'est encore une fois pas stock\u00e9e. On continue en affectant de nouveau \u00e0 <code>b</code> la valeur <code>b + 1</code>, c'est-\u00e0-dire <code>7</code>. Finalement, on affiche (avec la fonction <code>print</code>) la valeur obtenue suite \u00e0 l'\u00e9valuation de la comparaison <code>a == b + 1</code>, qui vaut <code>True</code> car <code>a = 8</code> et <code>b + 1 = 7 + 1 = 8</code>.</p> </li> <li> <p>Voici une s\u00e9quence d\u2019instructions : </p><pre><code>n = 7\nfor i in range (2 , n):\n    print (i)\n</code></pre> Combien de fois la fonction <code>print</code> \u00e0 l'int\u00e9rieur du <code>for</code> est-elle ex\u00e9cut\u00e9e ? La fonction <code>print</code> est ici ex\u00e9cut\u00e9e 5 fois. En effet, lorsque le <code>range</code> contient 2 valeurs, on commence \u00e0 la premi\u00e8re valeur indiqu\u00e9e, et on s'arr\u00eate un cran avant la deuxi\u00e8me valeur. Ici, <code>i</code> prend donc les valeurs <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code> et <code>6.</code> </li> <li> <p>Voici une s\u00e9quence d\u2019instructions : </p><pre><code>x = 4\nwhile x &gt; 0:\n    y = 0\n    while y &lt; x:\n        y = y + 1\n        x = x - 1\n</code></pre> Quelles seront les valeurs finales de <code>x</code> et de <code>y</code> ? Apr\u00e8s ex\u00e9cution, <code>x = 0</code> et <code>y = 1</code>. Pour voir le d\u00e9roulement complet de ce programme, vous pouvez d\u00e9rouler le bloc suivant. </li> </ol> D\u00e9roulement du programme - Question 5 <pre><code>D\u00e9but du programme :\nx = 4\nComparaison du premier while : x &gt; 0\n4 &gt; 0 ? OUI, donc on rentre dans la premi\u00e8re boucle.\n    y = 0\n    Comparaison du deuxi\u00e8me while : y &lt; x\n    0 &lt; 4 ? OUI, donc on rentre dans la deuxi\u00e8me boucle.\n        y = y + 1 = 0 + 1 = 1\n        x = x - 1 = 4 - 1 = 3\n        Comparaison du deuxi\u00e8me while : y &lt; x\n        1 &lt; 3 ? OUI, donc on reste dans la deuxi\u00e8me boucle.\n        y = y + 1 = 1 + 1 = 2\n        x = x - 1 = 3 - 1 = 2\n        Comparaison du deuxi\u00e8me while : y &lt; x\n        2 &lt; 2 ? NON, donc on ne reste pas dans la deuxi\u00e8me boucle.\n    Comparaison du premier while : x &gt; 0\n    2 &gt; 0 ? OUI, donc on reste dans la premi\u00e8re boucle.\n    y = 0\n    Comparaison du deuxi\u00e8me while : y &lt; x\n    0 &lt; 2 ? OUI, donc on rentre dans la deuxi\u00e8me boucle.\n        y = y + 1 = 0 + 1 = 1\n        x = x - 1 = 2 - 1 = 1\n        Comparaison du deuxi\u00e8me while : y &lt; x\n        1 &lt; 1 ? NON, donc on ne reste pas dans la deuxi\u00e8me boucle.\n    Comparaison du premier while : x &gt; 0\n    1 &gt; 0 ? OUI, donc on reste dans la premi\u00e8re boucle.\n    y = 0\n    Comparaison du deuxi\u00e8me while : y &lt; x\n    0 &lt; 1 ? OUI, donc on rentre dans la deuxi\u00e8me boucle.\n        y = y + 1 = 0 + 1 = 1\n        x = x - 1 = 1 - 1 = 0\n        Comparaison du deuxi\u00e8me while : y &lt; x\n        1 &lt; 0 ? NON, donc on ne reste pas dans la deuxi\u00e8me boucle.\n    Comparaison du premier while : x &gt; 0\n    0 &gt; 0 ? NON, donc on ne reste pas dans la premi\u00e8re boucle.\nFin du programme.\n</code></pre> <p>Exercice 3</p> <p>\u00c9crire une fonction <code>plus_grand</code> qui prend en param\u00e8tres trois nombres entiers et renvoie le plus grand des trois nombres.</p> <pre><code>def plus_grand(a, b, c):\n    ''' Renvoie le plus grand des trois entiers.\n    :param a: (int) Un entier.\n    :param b: (int) Un autre entier.\n    :param c: (int) Encore un autre entier.\n    :return (int): La plus grande valeur entre a, b et c. '''\n\n    if a &gt; b and a &gt; c:\n        return a\n    elif b &gt; a and b &gt; c:\n        return b\n    else:\n        return c\n</code></pre> <p>Exercice 4</p> <p>\u00c9crire une fonction <code>temps</code> qui prend en param\u00e8tres un nombre entier de secondes et affiche le nombre d'heures, de minutes et de secondes qui correspond.</p> <pre><code>def temps(nbs):\n''' Renvoie le temps en heures, minutes et secondes.\n:param nbs: (int) Le temps en secondes.\n:return (None): On ne renvoie rien, on affiche avec print. '''\n\nheures = nbs // 3600  # 3600 secondes dans 1 heure\nnbs = nbs % 3600  # On r\u00e9cup\u00e8re le nombre de secondes restantes et on le restocke dans nbs\nminutes = nbs // 60  # 60 secondes dans 1 minutes\nsecondes = nbs % 60  # On r\u00e9cup\u00e8re le nombre de secodes restantes\nprint(f'{heures}h {minutes}min {secondes}s')\n</code></pre> <p>Exercice 5</p> <p>\u00c9crire une fonction qui prend en arguments deux mots (type <code>str</code>) et renvoie <code>True</code> si les deux mots commencent par la m\u00eame lettre et se terminent par la m\u00eame lettre et <code>False</code> sinon.</p> <pre><code>def jeu(mot1, mot2):\n''' Renvoie True si les deux mots commencent et finissent par la m\u00eame lettre.\nRenvoie False sinon.\n:param mot1: (str) Un mot.\n:param mot2: (str) Un autre mot.\n:return (bool): Un bool\u00e9en, c'est-\u00e0-dire soit True, soit False. '''\n\nreturn mot1[0] == mot2[0] and mot1[len(mot1) - 1] == mot2[len(mot2) - 1]\n</code></pre> <p>L'indice de la premi\u00e8re lettre est <code>0</code>. La fonction <code>len</code> permet de r\u00e9cup\u00e9rer le nombre de caract\u00e8res dans une cha\u00eene de caract\u00e8res. On trouve donc l'indice de la derni\u00e8re lettre du mot en retirant 1 \u00e0 sa longueur.</p> <p>Plut\u00f4t que d'\u00e9crire <code>mot1[len(mot1) - 1]</code> et <code>mot2[len(mot2) - 1]</code>, on peut \u00e9galement plus simplement \u00e9crire <code>mot1[-1]</code> et <code>mot2[-1]</code>. Attention toutefois, cela fonctionne en Python, mais pas dans tous les langages. Retenez donc aussi la premi\u00e8re m\u00e9thode.</p> <p>Exercice 6</p> <p>\u00c9crire une fonction <code>jeu</code> qui prend en param\u00e8tre un nombre entier <code>n</code> strictement positif, simule n fois le tirage d\u2019un nombre choisi au hasard parmi les nombres <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, et renvoie le pourcentage de 6 obtenus. On utilisera la fonction <code>randint</code> du module <code>random</code>.</p> <pre><code>def jeu(n):\n    ''' Renvoie le pourcentage du nombre de 6 obtenus sur n tirages al\u00e9atoires.\n    :param n: (int) Un nombre entier de tirages.\n    :return (float): Le pourcentage de 6 obtenus. '''\n\n    compteur = 0  # Compteur pour le nombre de 6 obtenus\n    for _ in range(n):\n        tirage = randint(1, 6)  # R\u00e9cup\u00e9rer une valeur al\u00e9atoire entre 1 et 6\n        if tirage == 6:\n            compteur = compteur + 1  # On peut aussi \u00e9crire compteur += 1\n    return compteur * 100 / n  # On calcule et on renvoie le pourcentage\n</code></pre> <p>Le pourcentage se calcule avec un simple produit en croix : les <code>n</code> tirages correspondent \u00e0 100% des tirages, et on cherche le pourcentage pour le nombre <code>compteur</code> de tirages (<code>compteur</code> contient le nombre de fois o\u00f9 l'on a tir\u00e9 la valeur <code>6</code>).</p>"},{"location":"premiere/bases_python/dm1/#correction-partie-ordinateur","title":"Correction partie ordinateur","text":"<p>Exercice 1</p> <p>\u00c9crire un programme qui trace la figure ci-dessous en utilisant deux boucles imbriqu\u00e9es. Vous utiliserez le module Python Turtle. Vous pouvez importer toutes les fonctions du module en pla\u00e7ant cette ligne au d\u00e9but de votre programme : <code>from turtle import *</code>.</p> <pre><code>from turtle import *\n\npenup()\ngoto(-240,0)\npendown()\nfor i in range(9):\n    c\u00f4t\u00e9 = 10 * (i + 1)\n    for j in range(4):\n        forward(c\u00f4t\u00e9)\n        left(90)\n    penup()\n    forward(c\u00f4t\u00e9 + 10)\n    pendown()\ndone()\n</code></pre> <p>Exercice 2</p> <p>\u00c9crire un programme qui demande \u00e0 l\u2019utilisateur de saisir un entier naturel <code>n</code> et qui calcule la somme des carr\u00e9s des entiers de 1 \u00e0 <code>n</code>. Afin de v\u00e9rifier votre programme, voici un exemple : 1\u00b2 + 2\u00b2 + 3\u00b2 + ... + 10\u00b2 = 385</p> <pre><code>n = int(input(\"Veuillez saisir un entier naturel : \"))\nsomme = 0\nfor i in range(1,n+1):\n    somme = somme + i * i   # ou somme += i*i\nprint(somme)\n</code></pre> <p>Exercice 3</p> <p>Au jeu de M\u00f6lkky, chaque joueur marque \u00e0 son tour de jeu entre 0 et 12 points, qui viennent s\u2019ajouter \u00e0 son score pr\u00e9c\u00e9dent. Mais gare ! Quiconque d\u00e9passe le score cible de 51 points revient imm\u00e9diatement \u00e0 25 points. \u00c9crire un programme qui demande un score et un nombre de points marqu\u00e9s, et qui affiche le nouveau score ou signale une \u00e9ventuelle victoire. Sources : Num\u00e9rique et Sciences Informatiques 1\u00e8re, Balabonski et al., Ed. Ellipses.</p> <pre><code>score = int(input(\"Quel est votre score ? \"))\nnbPoints = int(input(\"Combien de points avez-vous marqu\u00e9 (entre 0 et 12) ? \"))\nscore = score + nbPoints\nif score &gt; 51:\n    score = 25\nprint(\"Votre nouveau score est\",score)\nif score == 51:\n    print(\"Bravo, vous avez gagn\u00e9!\")\n</code></pre> <p>Exercice 4</p> <p>\u00c9crire un programme qui demande \u00e0 l\u2019utilisateur de saisir un entier naturel <code>n</code> et qui affiche tous ses diviseurs les uns apr\u00e8s les autres. Les diviseurs devront \u00eatre tous \u00e9crits sur une m\u00eame ligne et s\u00e9par\u00e9s par un tiret. Exemple avec les diviseurs de 15 : 1-3-5-15.</p> <pre><code>n = int(input(\"Veuillez saisir un entier naturel : \"))\nfor i in range(1,n):\n    if n % i == 0:\n        print(i,end=\"-\")\nprint(n)\n</code></pre>"},{"location":"premiere/bases_python/exercices_fonctions/","title":"Exercices sur les fonctions","text":""},{"location":"premiere/bases_python/exercices_fonctions/#exercices-sur-les-fonctions","title":"Exercices sur les fonctions","text":"<p>Voici quelques exercices portant sur les fonctions en Python.</p> <p>Exercice 1</p> <p>T\u00e9l\u00e9chargez le fichier suivant et ouvrez-le dans Thonny :</p> <p></p> T\u00e9l\u00e9charger <code>exo1_fonctions.py</code> <p>Compl\u00e9tez les fonctions <code>est_pair</code>, <code>plus_grand</code> et <code>produit</code> en respectant la documentation (voir explications sur les docstrings plus bas).</p> <p>Voici quelques exemples d'appels \u00e0 ces fonctions dans la console :</p> <pre><code>&gt;&gt;&gt; est_pair(12)\nTrue\n&gt;&gt;&gt; est_pair(15)\nFalse\n&gt;&gt;&gt; plus_grand(5, 8, 3)\n8\n&gt;&gt;&gt; plus_grand(7, 7, 7)\n7\n&gt;&gt;&gt; produit(4, 8)\n32\n</code></pre> <p>Les docstrings</p> <p>Pour comprendre ce que doivent renvoyer ces fonctions, et quels sont leurs param\u00e8tres, lisez leurs documentations. Les documentations des fonctions sont \u00e9crites sous la forme de commentaires multilignes, que l'on appelle des docstrings. Par exemple, voici la docstring de la fonction <code>est_pair</code> :</p> <pre><code>''' Renvoie True si l'entier positif n est pair, False sinon.\n:param n: (int) un entier positif\n:return: (bool) True ou False '''\n</code></pre> <p>Cette docstring indique que la fonction doit renvoyer un bool\u00e9en, <code>True</code> ou <code>False</code>, selon si la param\u00e8tre <code>n</code> (un entier) est pair ou non. \u00c0 noter qu'il n'y a pas vraiment de convention sur la mani\u00e8re d'\u00e9crire une docstring. Toutefois, il doit au minimum y figurer :</p> <ul> <li>ce que fait la fonction,</li> <li>les param\u00e8tres d'entr\u00e9e et leur type,</li> <li>la valeur de retour et son type.</li> </ul> <p>Exercice 2</p> <p>Dans un nouveau script Python, \u00e9crire une fonction <code>compter_voyelles</code> qui re\u00e7oit une cha\u00eene de caract\u00e8res <code>mot</code> en entr\u00e9e et renvoie le nombre de voyelles (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\") pr\u00e9sentes dans ce mot.</p> <p>Exemple :</p> <pre><code>print(compter_voyelles(\"python\"))  # 2\nprint(compter_voyelles(\"ananas\"))  # 3\n</code></pre> <p>Ensuite, en-dessous de la fonction, \u00e9crire un programme qui demande \u00e0 l'utilisateur de saisir un mot, puis afficher le nombre de voyelles de ce mot en faisant appel \u00e0 <code>compter_voyelles</code>.</p> <p>Exercice 3</p> <p>\u00c9crire une fonction <code>factorielle</code> qui re\u00e7oit un nombre entier <code>nombre</code> en entr\u00e9e et renvoie la factorielle de ce nombre.</p> <p>Exemple :</p> <pre><code>print(calculer_prix_ttc(100, 20))  # Affiche 120\nprint(calculer_prix_ttc(50, 5.5))  # Affiche 52.75\n</code></pre> <p>Ensuite, en-dessous de la fonction, \u00e9crire un programme qui demande \u00e0 l'utilisateur de saisir un nombre entier, puis qui affiche la factorielle de ce nombre en appelant <code>factorielle</code>.</p>"},{"location":"premiere/bases_python/notebooks/","title":"Notebooks","text":""},{"location":"premiere/bases_python/notebooks/#les-bases-du-langage-python","title":"Les bases du langage Python","text":"<p>Pour approfondir votre apprentissage du langage Python, vous allez travailler avec des notebooks Jupyter. Un notebook est constitu\u00e9 de cellules en Markdown (en gros, du texte stylis\u00e9), et de cellules d'instructions Python pouvant \u00eatre directement ex\u00e9cut\u00e9es.</p> <p>\u00c0 faire</p> <p>Vous trouverez ci-dessous 7 notebooks \u00e0 compl\u00e9ter, directement sur l'application Capytale. Lisez attentivement et compl\u00e9tez chaque notebook dans l'ordre.</p> <p>Pensez \u00e0 enregistrer votre travail manuellement, il n'y a pas d'enregistrement automatique !</p> Notebooks Contenu Chapitre 1 - Bases du langage Python Expressions, variables, types de donn\u00e9es... Chapitre 2 - Boucle for Les boucles born\u00e9es (for) Chapitre 3 - Conditions, tests et bool\u00e9ens Conditions, tests et bool\u00e9ens. Chapitre 4 - Fonctions Cr\u00e9ation et appel de fonctions. Chapitre 5 - Boucle while Les boucles non born\u00e9es (while). Chapitre 6 - Listes Utilisation des listes Python. Chapitre 7 - Cha\u00eenes de caract\u00e8res Les cha\u00eenes de caract\u00e8res."},{"location":"premiere/bases_python/thonny/","title":"D\u00e9couverte de l'IDE Thonny","text":"<p>Sources</p> <p>Serge Bays - Sp\u00e9cialit\u00e9 Num\u00e9rique et sciences informatiques - Premi\u00e8re Zonensi - Programmation en Python et utilisation de Thonny</p>"},{"location":"premiere/bases_python/thonny/#decouverte-de-lide-thonny","title":"D\u00e9couverte de l'IDE Thonny","text":"<p>Tout au long de l'ann\u00e9e, nous utiliserons un IDE (pour integrated development environment) ou EDI en fran\u00e7ais (pour environnement de d\u00e9veloppement) gratuit et open source con\u00e7u sp\u00e9cialement pour les d\u00e9butants : Thonny.</p> <p>\u00c0 faire</p> <p>Cliquez sur \"D\u00e9marrer\", puis cherchez et ex\u00e9cutez Thonny pour lancer le programme.</p> <p>Installer Thonny \u00e0 la maison</p> <p>Thonny est un programme multiplateforme, vous pouvez donc l'installer sur Windows, mais aussi sur Linux ou MacOS. De plus, Thonny est livr\u00e9 avec Python version 3.10, vous n'avez donc pas \u00e0 installer Python s\u00e9par\u00e9ment. Vous pouvez t\u00e9l\u00e9charger Thonny depuis le site officiel.</p>"},{"location":"premiere/bases_python/thonny/#presentation-de-thonny","title":"Pr\u00e9sentation de Thonny","text":"Source : zonensi Ouvrir l'image en plein \u00e9cran <p>Info</p> <p>L'interface se d\u00e9compose de la mani\u00e8re suivante :</p> <ul> <li>La zone d'ex\u00e9cution, ou Shell, ou console, est une zone interactive dans laquelle vous pouvez saisir une instruction Python. La console peut \u00eatre utilis\u00e9e pour tester une instruction ou s\u00e9rie d'instructions, mais elle est \u00e9galement utilis\u00e9e pour l'ex\u00e9cution des scripts. Pour utiliser la console, il vous suffit de saisir votre instruction \u00e0 droite des trois chevrons puis d'appuyer sur la touche \"Entr\u00e9e\" du clavier.</li> <li>La zone d'\u00e9dition ou zone de scripts, est la zone dans laquelle vous pouvez saisir une s\u00e9rie d'instructions Python, de mani\u00e8re \u00e0 la sauvegarder sous la forme d'un script Python. Un script Python porte d'extension <code>.py</code>.</li> <li>Pour ex\u00e9cuter un script, il faut appuyer soit sur la fl\u00e8che verte de la barre de menu, soit sur la touche F5 du clavier, ou encore par l'interm\u00e9diaire du menu \"Run &gt; Run current script\" (ou \"Ex\u00e9cuter &gt; Ex\u00e9cuter le script courant\" en fran\u00e7ais). Le r\u00e9sultat de l'ex\u00e9cution du script sera affich\u00e9 dans la console.</li> <li>La fen\u00eatre des variables est bien utile pour d\u00e9buter, elle permet de voir la liste des variables cr\u00e9\u00e9es et les valeurs associ\u00e9es suite \u00e0 l'ex\u00e9cution d'instructions ou d'un script.</li> <li>L'assistant d'\u00e9dition contient des informations qui peuvent \u00eatre utiles pour analyser un programme qui ne fonctionne pas.</li> </ul>"},{"location":"premiere/bases_python/thonny/#exercices-dentrainement","title":"Exercices d'entra\u00eenement","text":"<p>Exercice 1</p> <p>Dans la zone d'ex\u00e9cution, saisissez l'expression suivante :</p> <pre><code>&gt;&gt;&gt; 12 + 6\n</code></pre> <p>Quel r\u00e9sultat obtenez-vous ?</p> <p>Exercice 2</p> <p>Ex\u00e9cutez d'autres expressions arithm\u00e9tiques en utilisant les op\u00e9rateurs <code>+</code>, <code>-</code>, <code>*</code> et <code>/</code>.</p> <p>Exercice 3</p> <p>Voici un algorithme \u00e9crit en pseudo-code :</p> <p>\\(A \\leftarrow 14\\) \\(B \\leftarrow 2\\) \\(C \\leftarrow \\frac{A}{B}\\) \\(D \\leftarrow \\frac{A + 6}{B + 3}\\) \\(E \\leftarrow C - D\\)</p> <p>Transcrivez cet algorithme sous la forme d'instructions Python, en utilisant des variables nomm\u00e9es <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code> et <code>e</code>, et saisissez-les dans la zone de scripts de Thonny. Enregistrez le script sous le nom <code>calcul.py</code>, puis ex\u00e9cutez le script.</p> <p>Observez la fen\u00eatre des variables, quelle est valeur associ\u00e9e \u00e0 la variable <code>e</code> ? Vous pouvez \u00e9galement voir le contenu de la variable en saisissant simplement <code>e</code> dans la console de Thonny. En effet, lorsque vous ex\u00e9cutez un script, vous pouvez ex\u00e9cuter des instructions dans la console en utilisant les variables d\u00e9finies suite \u00e0 l'ex\u00e9cution du script.</p>"},{"location":"premiere/representation_donnees/","title":"Repr\u00e9sentation des donn\u00e9es en machine","text":""},{"location":"premiere/representation_donnees/#representation-des-donnees-en-machine","title":"Repr\u00e9sentation des donn\u00e9es en machine","text":"Liste des contenus Description Cours - Repr\u00e9sentation des donn\u00e9es Cours portant sur la repr\u00e9sentation des donn\u00e9es en machine. Notebooks et exercices Des exercices suppl\u00e9mentaires sur la repr\u00e9sentation des donn\u00e9es."},{"location":"premiere/representation_donnees/cours/","title":"Cours","text":""},{"location":"premiere/representation_donnees/cours/#representation-des-donnees-en-machine","title":"Repr\u00e9sentation des donn\u00e9es en machine","text":"Extrait du programme <p>Voici un extrait du programme indiquant les notions \u00e0 ma\u00eetriser sur ce th\u00e8me.</p> <p></p> <p>Dans un ordinateur, toutes les informations (donn\u00e9es ou programmes) sont repr\u00e9sent\u00e9es \u00e0 l\u2019aide de deux chiffres : le 0 et 1, appel\u00e9s chiffres binaires ou Binary Digits (bits) en anglais.</p> <p>Dans la m\u00e9moire d\u2019un ordinateur (RAM, ROM, registres des microprocesseurs, etc.), ces chiffres binaires sont regroup\u00e9s par paquets de 8, que l'on appelle octets (ou bytes en anglais), puis organis\u00e9s en mots machine (ou words en anglais) de 2, 4 ou 8 octets en g\u00e9n\u00e9ral. Un ordinateur de 32 bits par exemple manipule directement des mots de 4 octets (4 octets \u00d7 8 bits = 32 bits) lorsqu\u2019il effectue des op\u00e9rations en m\u00e9moire ou dans ses calculateurs.</p> <p>Le regroupement des bits en octets ou mots machine permet de repr\u00e9senter des donn\u00e9es telles que des nombres entiers, des nombres r\u00e9els (on verra que l'on ne peut repr\u00e9senter que des approximations des nombres r\u00e9els), ou encore des caract\u00e8res et des textes (on introduira la notion d'encodage).</p>"},{"location":"premiere/representation_donnees/cours/#representation-des-entiers-naturels","title":"Repr\u00e9sentation des entiers naturels","text":"<p>L'encodage le plus simple est celui des nombres entiers naturels (nombres entiers positifs).</p> <p>Pour repr\u00e9senter des nombres, les ordinateurs utilisent le syst\u00e8me binaire : Le codage binaire d\u2019un nombre positif \\(n\\) est la suite de \\(k\\) bits \\(b_{k - 1} ... b_0\\) telle que \\(n = b_{k \u2212 1} \u00d7 2^{k \u2212 1} + b_{k \u2212 2} \u00d7 2^{k \u2212 2} + ... + b_1 \u00d7 2^1 + b_0 \u00d7 2^0\\) . Ainsi le nombre \\(42\\) en d\u00e9cimal est repr\u00e9sent\u00e9 par \\(101010\\) en binaire : \\(42 = \\textbf{1} \u00d7 2\u2075 + \\textbf{0} \u00d7 2\u2074 + \\textbf{1} \u00d7 2\u00b3 + \\textbf{0} \u00d7 2\u00b2 + \\textbf{1} \u00d7 2\u00b9 + \\textbf{0} \u00d7 2\u2070\\) \\(42 = \\textbf{1} \u00d7 2\u2075 + \\textbf{1} \u00d7 2\u00b3 + \\textbf{1} \u00d7 2^1\\) \\(42 = 32 + 8 + 2\\)</p> <p>\u00c0 vous de jouer</p> <p>Voici des nombres entiers en base binaire, donner l'\u00e9criture en base d\u00e9cimale de ces nombres :</p> <ul> <li>\\(0100 1010_2\\)</li> <li>\\(1111 0101_2\\)</li> </ul> Correction <ul> <li>\\(0100 1010_2 = 2^1 + 2^3 + 2^6 = 2 + 8 + 64 = 74_{10}\\)</li> <li>\\(1111 0101_2 = 2^0 + 2^2 + 2^4 + 2^5 + 2^6 + 2^7 = 1 + 2 + 16 + 32 + 64 + 128 = 243_{10}\\)</li> </ul> <p>Le codage binaire d'un nombre d\u00e9cimal consiste \u00e0 passer de la base 10 (base d\u00e9cimale) \u00e0 la base 2, mais il existe d'autres bases comme la base 8 (base octale), ou la base 16 (base hexad\u00e9cimale).</p> <p>Chiffres autoris\u00e9s selon la base X de repr\u00e9sentation</p> <p>Base 2 : chiffre \\(0\\) et \\(1\\). Base 8 : chiffre \\(0, 1, 2, 3, 4, 5, 6, 7\\). Base 10 : chiffre \\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\) Base 16 : chiffre \\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\\) avec \\(A = 10_{10}, B = 11_{10}, C = 12_{10}, D = 13_{10}, E = 14_{10}, F = 15_{10}\\).</p> Rappels - \u00c9criture en base 10 <p>Un nombre entier en base 10 est une s\u00e9quence de chiffres compris entre \\(0\\) et \\(9\\). Pour calculer la valeur d\u2019une s\u00e9quence \\(c_{k\u22121} , c_{k\u22122} , . . . , c_{1} , c_{0}\\) de \\(k\\) chiffres, on affecte \u00e0 chaque chiffre \\(c_n\\) un poids \\(10^n\\), ce poids \u00e9tant une puissance de 10 qui d\u00e9pend de sa position \\(n\\) dans la s\u00e9quence, et on calcule la somme des termes \\(c_n \u00d7 10^n\\). </p> <p>Si l'on prend l\u2019exemple de la s\u00e9quence \\(61027\\), et qu'on la repr\u00e9sente en diff\u00e9rentes colonnes, en indiquant la position de chaque chiffre, en commen\u00e7ant \u00e0 compter les indices et les poids correspondants \u00e0 partir de \\(0\\) de la droite vers la gauche, on obtient : </p> s\u00e9quence 6 1 0 2 7 position 4 3 2 1 0 poids 10\u2074 10\u00b3 10\u00b2 10\u00b9 10\u2070 <p>La valeur de la s\u00e9quence est un entier, que l'on notera \\(N\\), calcul\u00e9 de la mani\u00e8re suivante :</p> <p>\\(N = 6 \u00d7 10^4 + 1 \u00d7 10^3 + 0 \u00d7 10^2 + 2 \u00d7 10^1 + 7 \u00d7 10^0\\)</p> <p>Plus g\u00e9n\u00e9ralement, une s\u00e9quence \\(d_{k\u22121} , d_{k\u22122} , . . . , d_1 , d_0\\) de \\(k\\) chiffres d\u00e9cimaux \\(d_i\\) correspond au nombre \\(N\\) suivant :</p> <p>\\(N = d_{k\u22121} \u00d7 10^{k\u22121} + d_{k\u22122} \u00d7 10^{k\u22122} + \u00b7 \u00b7 \u00b7 + d_1 \u00d7 10^1 + d_0 \u00d7 10^0\\)</p> Rappels - \u00c9criture en base 2 <p>Tout comme l\u2019encodage en base 10, une s\u00e9quence de chiffres binaires peut s\u2019interpr\u00e9ter comme un nombre \u00e9crit en base 2. Dans cette base, chaque chiffre (0 ou 1), appel\u00e9 bit, de la s\u00e9quence est associ\u00e9e \u00e0 un poids \\(2^i\\) et \u00e0 une puissance de 2 qui d\u00e9pend de sa position \\(i\\).</p> <p>Par exemple, l\u2019octet (suite de 8 bits) \\(0100 1101\\) peut \u00eatre repr\u00e9sent\u00e9 de la mani\u00e8re suivante.</p> s\u00e9quence 0 1 0 0 1 1 0 1 position 7 6 5 4 3 2 1 0 poids 2\u2077 2\u2076 2\u2075 2\u2074 2\u00b3 2\u00b2 2\u00b9 2\u2070 <p>La valeur de cette s\u00e9quence, que l'on notera \\(N\\), est calcul\u00e9e comme suit :</p> <p>\\(N = 0 \u00d7 2^7 + 1 \u00d7 2^6 + 0 \u00d7 2^5 + 0 \u00d7 2^4 + 1 \u00d7 2^3 + 1 \u00d7 2^2 + 0 \u00d7 2^1 + 1 \u00d7 2^0\\) \\(N = 77_{10}\\)</p> <p>Plus g\u00e9n\u00e9ralement, une s\u00e9quence \\(b_{k\u22121} , b_{k\u22122} , . . . , b_1, b_0\\) de \\(k\\) bits \\(b_i\\) correspond au nombre \\(N\\) suivant :</p> <p>\\(N = b_{k\u22121} \u00d7 2^{k\u22121} + b_{k\u22122} \u00d7 2^{k\u22122} + \u00b7 \u00b7 \u00b7 + b_1 \u00d7 2^1 + d_0 \u00d7 b^0\\)</p> <p>Cette mani\u00e8re d'encoder les entiers naturels \u00e0 l'aide de s\u00e9quences de \\(k\\) bits permet de repr\u00e9senter les entiers de \\(0\\) \u00e0 \\(2^k \u2212 1\\). Sur 1 octet (= 8 bits) par exemple, on peut donc repr\u00e9senter les entiers naturels de \\(0\\) \u00e0 \\(255\\).</p> Rappels - Base 16 (hexad\u00e9cimale) <p>...</p>"},{"location":"premiere/representation_donnees/cours/#methode-des-divisions-euclidiennes-successives","title":"M\u00e9thode des divisions euclidiennes successives","text":"<p>Si l'on souhaite par exemple repr\u00e9senter \\(235_{10}\\) en base 2 :</p> <p> </p> M\u00e9thode des divisions successives <p>L'\u00e9criture binaire de \\(235_{10}\\) sur 8 bits est donc \\(1110 1011_2\\).</p> <p>Si l'on souhaite convertir un nombre vers la base 16 (en hexad\u00e9cimal), le principe est le m\u00eame, mais on divisera par 16 au lieu de diviser par 2. On rappelle qu'en hexad\u00e9cimal, les valeurs vont de \\(0\\) \u00e0 \\(F\\) : \\(1, 2, ..., 8, 9, A, B, ... E, F\\), les restes sup\u00e9rieurs \u00e0 \\(9\\) devront donc \u00eatre remplac\u00e9s par une lettre.</p>"},{"location":"premiere/representation_donnees/cours/#methode-des-soustractions","title":"M\u00e9thode des soustractions","text":"<p>Pour convertir un entier not\u00e9 \\(N\\) en base \\(X\\), on proc\u00e8de comme suit :</p> <p>La plus grande puissance de \\(X\\) qui est inf\u00e9rieure ou \u00e9gale \u00e0 \\(N\\) est soustraite \u00e0 \\(N\\). Ce processus de soustraction est r\u00e9p\u00e9t\u00e9 sur le reste de la diff\u00e9rence, jusqu\u2019\u00e0 obtenir un r\u00e9sultat \u00e9gal \u00e0 0. Le nombre \\(N\\) exprim\u00e9 en base \\(X\\) est alors obtenu en notant le nombre de fois o\u00f9 une m\u00eame puissance de \\(X\\) a \u00e9t\u00e9 retir\u00e9e, et cela pour chaque puissance depuis la plus grande apparaissant, dans l\u2019ordre d\u00e9croissant des puissances.</p> <p>Dans le cas d'une conversion vers la base 2, chaque puissance de \\(X\\) ne peut \u00eatre retir\u00e9e qu'une seule fois (car les seules valeurs possibles en binaire sont 0 et 1.)</p> <p>Exemples :</p> <p>Si l'on souhaite convertir \\(125_{10}\\) en base 2 : On sait que \\(2\u2070 = 1; 2\u00b9 = 2; 2\u00b2 = 4; 2\u00b3 = 8; 2\u2074 = 16; 2\u2075 = 32; 2\u2076 = 64; 2\u2077 = 128\\). \\(125 - \\textbf{64} = 61; 61 - \\textbf{32} = 29; 29 - \\textbf{16} = 13; 13 - \\textbf{8} = 5; 5 - \\textbf{4} = 1; 1 - \\textbf{1} = 0;\\)</p> <p>Donc \\(125_{10} = 0111~1101\\).</p> <p>Si l'on souhaite convertir \\(235_{10}\\) en base 8 : On sait que \\(8^0 = 1; 8\u00b9 = 1; 8^2 = 64; 8^3 = 512\\).   \\(235 \u2013 64 = 171; 171 \u2013 64 = 107; 107 \u2013 64 = 43; 43 \u2013 8 = 35; 35 \u2013 8 = 27; 27 \u2013 8 = 19;\\) \\(19 \u2013 8 = 11; 11 \u2013 8 = 3; 3 \u2013 1 = 2; 2 \u2013 1 = 1; 1 \u2013 1 = 0\\)</p> <p>Donc \\(235_{10} = 3 \u00d7 64 + 5 \u00d7 8 + 3 \u00d7 1 = 353_8\\).</p>"},{"location":"premiere/representation_donnees/cours/#convertir-un-nombre-de-la-base-2-vers-la-base-16","title":"Convertir un nombre de la base 2 vers la base 16","text":"<p>Pour convertir un nombre de la base 2 vers la base 16, c'est simple : il suffit de faire des paquets de 4 bits, et de coder chaque paquet avec une valeur hexad\u00e9cimale. Par exemple, si l'on reprend l'\u00e9criture binaire pr\u00e9c\u00e9dente : \\(1110~1011_2\\), le premier groupe \\(1110\\) se code par \\(14\\) en d\u00e9cimal, et donc par \\(E\\) en hexad\u00e9cimal. Le deuxi\u00e8me groupe \\(1011\\) se code par \\(11\\) en d\u00e9cimal, et donc par \\(B\\) en hexad\u00e9cimal. Ainsi, \\(235_{10} = 1110~1011_2 = EB_{16}\\).</p> <p>\u00c0 l'inverse, convertir un nombre exprim\u00e9 en base 16 vers la base 2 s\u2019effectue en rempla\u00e7ant simplement chacun des chiffres du nombre en base 16 par leur \u00e9quivalent binaire sur 4 bits.</p> <p>Par exemple : \\(45 A_{16} = 0100~0101~1010_2\\) et \\(1100~1111_2 = CF_{16}\\)</p>"},{"location":"premiere/representation_donnees/cours/#quelques-exercices","title":"Quelques exercices","text":"<p>Exercice 1</p> <p>En utilisant la m\u00e9thode des divisions euclidiennes successives, donner l'\u00e9criture binaire du nombre 147 sur 8 bits. \u00c0 partir de l'\u00e9criture binaire obtenue, donner son \u00e9criture hexad\u00e9cimale.</p> <p>Exercice 2</p> <p>En utilisant la m\u00e9thode des soustractions successives, donner l'\u00e9criture binaire du nombre 169 sur 8 bits. \u00c0 partir de l'\u00e9criture binaire obtenue, donner son \u00e9criture hexad\u00e9cimale.</p> <p>Exercice 3</p> <p>Donner la repr\u00e9sentation en base 2 et sur 8 bits des entiers 14, 218, 42 et 57.</p> <p>Vous pourrez v\u00e9rifier vos r\u00e9ponses avec la fonction <code>bin</code> de Python. La fonction <code>bin</code> prend un nombre entier en entr\u00e9e, et renvoie la repr\u00e9sentation binaire de ce nombre.</p> <p>Par exemple :</p> <pre><code>&gt;&gt;&gt; bin(42)\n'0b101010'\n</code></pre> <p>Ici, on voit que l'\u00e9criture binaire de 42 est \\(101010\\). Le <code>0b</code> indique la base (<code>b</code> pour binaire, <code>o</code> pour octal, <code>x</code> pour hexad\u00e9cimal).</p> <p>Exercice 4</p> <p>Donner la repr\u00e9sentation en base 16 des entiers binaires suivants.</p> <ul> <li>1001010</li> <li>100010001</li> <li>1010010011110010</li> </ul> <p>Vous pourrez v\u00e9rifier vos r\u00e9ponses avec la fonction <code>hex</code> de Python. La fonction <code>hex</code> prend un nombre entier en entr\u00e9e, et renvoie la repr\u00e9sentation hexad\u00e9cimale de ce nombre.</p> <p>Par exemple :</p> <pre><code>&gt;&gt;&gt; hex(42)\n'0x2A'\n</code></pre> <p>Ici, on voit que l'\u00e9criture hexad\u00e9cimale de 42 est \\(2A\\). Le <code>0x</code> indique la base (<code>b</code> pour binaire, <code>o</code> pour octal, <code>x</code> pour hexad\u00e9cimal).</p> <p>Exercice 5</p> <p>Quelle est la valeur en base 10 de l\u2019entier qui s\u2019\u00e9crit \\(BEEF\\) en base 16 ? </p>"},{"location":"premiere/representation_donnees/cours/#representation-des-entiers-relatifs","title":"Repr\u00e9sentation des entiers relatifs","text":"<p>La repr\u00e9sentation d\u2019un nombre sign\u00e9 s\u2019effectue selon une s\u00e9quence binaire d\u2019une longueur fix\u00e9e \u00e0 \\(n\\) bits. Cette longueur peut \u00eatre de 8 bits, de 16 bits ou de 32 bits.</p> <p>Plusieurs conventions de repr\u00e9sentation existent. Le choix de la convention est effectu\u00e9 par le constructeur de la machine, et \u00e9ventuellement par le programmeur en fonction du type affect\u00e9 aux variables d\u00e9clar\u00e9es. Dans le langage C par exemple, d\u00e9clarer une variable avec un type <code>int</code>, d\u00e9termine une repr\u00e9sentation sur 2 octets selon la convention du compl\u00e9ment \u00e0 2. Par ailleurs, une d\u00e9claration avec un type <code>unsigned short</code> d\u00e9termine une repr\u00e9sentation d\u2019un nombre sur 8 bits, non sign\u00e9.</p>"},{"location":"premiere/representation_donnees/cours/#convention-de-la-valeur-signee","title":"Convention de la valeur sign\u00e9e","text":"<p>Dans cette convention, le bit de poids fort (c'est-\u00e0-dire celui qui est tout \u00e0 gauche de l'\u00e9criture) correspond au signe (\\(0\\) pour un entier positif, \\(1\\) pour un entier n\u00e9gatif). Tous les autres bits codent la valeur absolue du nombre.</p> <p>Exemple :</p> <ul> <li>Repr\u00e9sentation de \\(+ 77_{10}\\) sur 8 bits : \\(01001101_2\\).</li> <li>Repr\u00e9sentation de \\(\u2013 77_{10}\\) sur 8 bits : \\(11001101_2\\).</li> </ul> <p>On peut faire les remarques suivantes sur cette repr\u00e9sentation :</p> <ul> <li>deux repr\u00e9sentations de la valeur \\(0\\) sont possibles, l'une correspondant \u00e0 un z\u00e9ro positif (\\(00000000_2\\) = \\((+ 0)_{10}\\) sur 8 bits), l'autre \u00e0 un z\u00e9ro n\u00e9gatif (\\(10000000_2\\) = \\((\u2013 0)_{10}\\) sur \\(8\\) bits);</li> <li>l\u2019intervalle des nombres sign\u00e9s repr\u00e9sentables est born\u00e9 en fonction de la longueur de la cha\u00eene binaire utilis\u00e9e pour la repr\u00e9sentation. Sur \\(8\\) bits par exemple, l\u2019intervalle des nombres repr\u00e9sentables est \\([11111111_2, 01111111_2]\\), soit l\u2019intervalle \\([-127_{10}, + 127_{10}]\\). L\u2019arithm\u00e9tique des machines est donc diff\u00e9rente de celle de l\u2019\u00eatre humain puisque l\u2019intervalle des nombres n\u2019est pas infini, mais d\u00e9pend de la longueur des cha\u00eenes de bits manipul\u00e9es par la machine;</li> <li>pour effectuer une soustraction, il est n\u00e9cessaire d'utiliser un circuit particulier diff\u00e9rent de celui permettant d'effectuer des additions.</li> </ul> <p>Voici les valeurs repr\u00e9sentables avec cette convention selon la longueur de la chaine de bits fix\u00e9e :</p> Longueur de la chaine de bits Intervalle de base 10 \\(8\\) bits \\([- 127, + 127]\\) \\(16\\) bits \\([- 32 767, + 32 767]\\) \\(32\\) bits \\([\u2013 2 147 483 647, + 2 147 483 647]\\) \\(p\\) bits \\([\u2013 2^{p \u2013 1} \u2013 1, + 2^{p \u2013 1} \u2013 1]\\)"},{"location":"premiere/representation_donnees/cours/#convention-du-complement-a-2","title":"Convention du compl\u00e9ment \u00e0 2","text":"<p>Le compl\u00e9ment \u00e0 2 ou compl\u00e9ment vrai d\u2019un nombre binaire \\(N = b_{n\u20131} ... b_0\\) s\u2019obtient en ajoutant la valeur \\(1\\) au compl\u00e9ment restreint ou compl\u00e9ment \u00e0 1 de ce nombre.</p> <p>Le compl\u00e9ment \u00e0 1 ou compl\u00e9ment restreint d\u2019un nombre binaire \\(N = b_{n-1} ... b_0\\) s\u2019obtient en inversant la valeur de chacun des bits de ce nombre.</p> <p>Exemple :</p> \\(10001001_2\\) compl\u00e9ment \u00e0 1 \\(01110110_2\\) + \\(1_2\\) compl\u00e9ment \u00e0 2 \\(01110111_2\\) <p>Dans la convention du compl\u00e9ment \u00e0 2, un nombre n\u00e9gatif \\(\u2013 N\\) exprim\u00e9 sur \\(n\\) bits est repr\u00e9sent\u00e9 en prenant le compl\u00e9ment \u00e0 2 de son \u00e9quivalent positif \\(+ N\\). Un nombre positif \\(+ N\\) est quant \u00e0 lui repr\u00e9sent\u00e9 par sa valeur binaire sur \\(n\\) bits.</p> <p>Exemple :</p> Repr\u00e9sentation de \\(+ 77_{10}\\) sur 8 bits : \\(01001101_2\\) Repr\u00e9sentation de \\(\u2013 77_{10}\\) sur 8 bits : \\(+ 77_{10}\\) \\(01001101_2\\) compl\u00e9ment restreint : \\(10110010_2\\) \\(+\\) \\(1_2\\) compl\u00e9ment vrai : \\(10110011_2\\) <p>On peut faire les remarques suivantes sur cette repr\u00e9sentation :</p> <ul> <li>une seule repr\u00e9sentation du z\u00e9ro est admise : \\(00000000_2\\) = \\((+ 0)_{10}\\) sur \\(8\\) bits.</li> <li>l\u2019intervalle des nombres sign\u00e9s repr\u00e9sentables est born\u00e9 en fonction de la longueur de la cha\u00eene binaire utilis\u00e9e pour la repr\u00e9sentation. Sur \\(8\\) bits par exemple, l\u2019intervalle des nombres repr\u00e9sentables est \\([10000000_2, 01111111_2]\\), soit l\u2019intervalle \\([\u2013 128_{10}, + 127_{10}]\\). La cha\u00eene \\(10000000_2\\) apr\u00e8s le compl\u00e9ment \u00e0 2 donne de nouveau la cha\u00eene \\(10000000_2\\). Par convention, elle repr\u00e9sente la valeur \\(- 128_{10}\\) ;</li> <li>pour effectuer une soustraction, il n'est pas n\u00e9cessaire d'utiliser un circuit particulier, puisque soustraire un nombre A \u00e0 un autre nombre B \u00e9quivaut \u00e0 additionner au nombre B le compl\u00e9ment \u00e0 2 du nombre A.</li> </ul> <p>Voici les valeurs repr\u00e9sentables avec cette convention selon la longueur de la chaine de bits fix\u00e9e :</p> Longueur de la chaine de bits Intervalle de base 10 \\(8\\) bits \\([- 128, + 127]\\) \\(16\\) bits \\([- 32 768, + 32 767]\\) \\(32\\) bits \\([\u2013 2 147 483 648, + 2 147 483 647]\\) \\(p\\) bits \\([\u2013 2^{p \u2013 1}, + 2^{p \u2013 1} \u2013 1]\\)"},{"location":"premiere/representation_donnees/cours/#binaire-vers-decimal","title":"Binaire vers d\u00e9cimal","text":"<p>L'op\u00e9ration inverse, permettant de retrouver un entier cod\u00e9 avec la convention du compl\u00e9ment \u00e0 2, est assez simple \u00e0 effectuer.</p> <p>Le bit de poids fort (celui qui est tout \u00e0 gauche) de la cha\u00eene binaire peut \u00eatre \u00e9galement inter-pr\u00e9t\u00e9 comme bit de signe. Ainsi :</p> <ul> <li>s'il vaut \\(\\textbf{0}\\), alors la cha\u00eene binaire repr\u00e9sente un nombre positif \\(+ N\\) dont la valeur d\u00e9cimale est donn\u00e9e directement par la conversion de la cha\u00eene depuis la base 2 vers la base 10;</li> <li>s'il vaut \\(\\textbf{1}\\), alors la cha\u00eene binaire repr\u00e9sente un nombre n\u00e9gatif \\(\u2013 N\\) dont la valeur d\u00e9cimale est celle du nombre positif associ\u00e9 \\(+ N\\) obtenu en compl\u00e9mentant de nouveau \u00e0 2 la cha\u00eene, ou plus simplement en inversant tous les bits situ\u00e9s \u00e0 gauche de premier bit \u00e0 1 (en partant de la droite).</li> </ul> <p>Conversion binaire (compl\u00e9ment \u00e0 2) vers d\u00e9cimal</p> <p>\\(0011~0011_2\\) : Le bit de poids fort est \u00e0 0 (nombre positif), donc on convertit simplement vers la base 10 :</p> <p></p> \\(0011~0011_2 = 2^0 + 2^1 + 2^4 + 2^5 = 1 + 2 + 16 + 32 = + 51_{10}\\) <p>\\(1011~1100_2\\) : Le bit de poids fort est \u00e0 1 (nombre n\u00e9gatif), donc :</p> <ul> <li>soit on refait le compl\u00e9ment \u00e0 2,</li> <li>soit on inverse tous les bits situ\u00e9s \u00e0 gauche du premier bit \u00e0 1 en partant de la droite, ce qui donne ici : \\(\\textbf{1011 1}100_2 \u2192 \\textbf{0100 0}100_2\\). \\(0100~0100_2 = 68_{10}\\), donc il ne reste qu'\u00e0 ajouter le signe \\(-\\) </li> </ul> <p></p> \\(1011~1100_2 = - 68_{10}\\)"},{"location":"premiere/representation_donnees/cours/#bit-de-carry","title":"Bit de carry","text":"<p>Lors d\u2019une op\u00e9ration arithm\u00e9tique effectu\u00e9e sur des nombres de \\(p\\) bits, un \\(p + 1er\\) bit peut \u00eatre g\u00e9n\u00e9r\u00e9. Ce bit suppl\u00e9mentaire de poids fort est m\u00e9moris\u00e9 comme \u00e9tant le bit de carry par un indicateur de 1 bit not\u00e9 \\(C\\) dans un registre du processeur appel\u00e9 registre d'\u00e9tat (PSW).</p> <p>Par exemple, l'addition de \\(0111~1111_2\\) (\\(+ 127\\)) et \\(1111~1110\\) (\\(- 2\\)) :</p> \\(0111\\) \\(1111_2\\) + \\(1111\\) \\(1110_2\\) 1 \\(0111\\) \\(1101_2\\) <p>Ici, le 9\u00e8me bit est le bit de carry.</p>"},{"location":"premiere/representation_donnees/cours/#overflow","title":"Overflow","text":"<p>Lorsque l'on effectue une op\u00e9ration math\u00e9matique impliquant des nombres de m\u00eame signe et ayant chacun \\(p\\) bits, il est possible que le r\u00e9sultat d\u00e9passe la capacit\u00e9 de repr\u00e9sentation de la machine. En d'autres termes, ce r\u00e9sultat peut \u00eatre en dehors de la plage des nombres que la machine peut repr\u00e9senter en utilisant la convention choisie pour ces nombres sign\u00e9s.</p> <p>Dans de tels cas, le r\u00e9sultat obtenu est incorrect par rapport \u00e0 son interpr\u00e9tation pr\u00e9vue : on appelle cela un overflow ou un d\u00e9passement de capacit\u00e9. Tout comme le carry, la survenue d'un overflow est enregistr\u00e9e dans le registre d'\u00e9tat (PSW) du processeur \u00e0 l'aide d'un indicateur d'un bit, g\u00e9n\u00e9ralement not\u00e9 \\(O\\).</p> <p>Par exemple, si l'on effectue l'addition des nombres \\(+ 127_{10}\\) et \\(+ 2_{10}\\) repr\u00e9sent\u00e9s selon la convention du compl\u00e9ment \u00e0 2 :</p> \\(0111\\) \\(1111_2\\) + \\(0000\\) \\(0010_2\\) \\(1000\\) \\(0001_2\\) <p>Le r\u00e9sultat obtenu est le nombre \\(\u2013 127_{10}\\) et non pas la valeur attendue \\(+ 129_{10}\\). Il y a ici un d\u00e9passement de capacit\u00e9. En effet, l\u2019intervalle des nombres repr\u00e9sentables sur \\(8\\) bits selon la convention du compl\u00e9ment \u00e0 2 est \\([\u2013 127_{10}, + 127_{10}]\\).</p> <p>Pourquoi pr\u00e9f\u00e8re t-on cette convention ?</p> <p>La convention du compl\u00e9ment \u00e0 2 est g\u00e9n\u00e9ralement pr\u00e9f\u00e9r\u00e9e \u00e0 celle de la valeur sign\u00e9e pour les raisons suivantes :</p> <ol> <li> <p>Simplicit\u00e9 des op\u00e9rations arithm\u00e9tiques : Avec le compl\u00e9ment \u00e0 2, les op\u00e9rations arithm\u00e9tiques telles que l'addition et la soustraction fonctionnent de la m\u00eame mani\u00e8re que pour les nombres non sign\u00e9s, en utilisant le m\u00eame mat\u00e9riel de calcul. Cela simplifie consid\u00e9rablement la conception des circuits \u00e9lectroniques et les op\u00e9rations de base, car il n'est pas n\u00e9cessaire de traiter les cas sp\u00e9ciaux pour les nombres sign\u00e9s.</p> </li> <li> <p>Unicit\u00e9 de la repr\u00e9sentation : En utilisant le compl\u00e9ment \u00e0 2, chaque nombre a une repr\u00e9sentation unique. Cela signifie qu'il n'y a pas de valeur positive et n\u00e9gative qui se chevauchent, ce qui \u00e9vite les ambigu\u00eft\u00e9s.</p> </li> <li> <p>Facilit\u00e9 de conversion : La conversion entre nombres sign\u00e9s et non sign\u00e9s (et vice versa) est plus simple avec le compl\u00e9ment \u00e0 2 que avec d'autres m\u00e9thodes de repr\u00e9sentation sign\u00e9e. Il suffit d'appliquer le compl\u00e9ment \u00e0 2 sur un nombre n\u00e9gatif pour obtenir sa repr\u00e9sentation positive, et vice versa.</p> </li> <li> <p>Prise en charge native des op\u00e9rations binaires : Le compl\u00e9ment \u00e0 2 est id\u00e9al pour les ordinateurs, qui traitent naturellement les op\u00e9rations binaires. La repr\u00e9sentation en compl\u00e9ment \u00e0 2 facilite les op\u00e9rations bit \u00e0 bit, ce qui est essentiel pour la conception des processeurs.</p> </li> <li> <p>Gestion de l'overflow : Lorsque des op\u00e9rations arithm\u00e9tiques d\u00e9passent la capacit\u00e9 de stockage d'un registre, le compl\u00e9ment \u00e0 2 permet de g\u00e9rer naturellement les d\u00e9passements (overflow) sans n\u00e9cessiter de mat\u00e9riel ou de logiciel suppl\u00e9mentaire compliqu\u00e9.</p> </li> </ol> <p>Exercice 6</p> <p>Donner la repr\u00e9sentation en compl\u00e9ment \u00e0 2 et sur 8 bits des entiers -10, -128, -42 et 97.</p> <p>Exercice 7</p> <p>Donner en base 10 la valeur des octets sign\u00e9s \\(11100111\\) et \\(11000001\\).</p> <p>Plus d'exercices</p> <p>Vous pouvez \u00e9galement vous entra\u00eener sur les exercices propos\u00e9s \u00e0 la fin de cette page (IUT de Reims).</p>"},{"location":"premiere/representation_donnees/cours/#addition-et-soustraction-de-nombres-entiers","title":"Addition et soustraction de nombres entiers","text":"<p>Pour additionner deux nombres entiers en \u00e9criture binaire, on utilise le m\u00eame principe que dans le syst\u00e8me d\u00e9cimal, en additionnant les chiffres un \u00e0 un, de droite \u00e0 gauche. La table d\u2019addition des nombres binaires est la suivante :</p> <ul> <li>0 + 0 = 0</li> <li>0 + 1 = 1</li> <li>1 + 0 = 1</li> <li>1 + 1 = 10, c\u2019est-\u00e0-dire 0 avec une retenue de 1</li> <li>1 + 1 + 1 = 11, c\u2019est-\u00e0-dire 1 avec une retenue de 1</li> </ul> <p>On souhaite par exemple additionner les entiers \\(42_{10} = 00101010_2\\) et \\(14_{10} = 00001110_2\\) :</p> (1) (1) (1) 0 0 1 0 1 0 1 0 (42) + 0 0 0 0 1 1 1 0 (14) = 0 0 1 1 1 0 0 0 (56) <p>Si l'on souhaite faire une soustraction, par exemple si l'on souhaite soustraire \\(14\\) \u00e0 \\(42\\), le plus simple est de faire une addition entre \\(42\\) et le compl\u00e9ment \u00e0 2 de \\(14\\). Le compl\u00e9ment \u00e0 2 de \\(14_{10} = 00001110_2\\) est \\(11110010_2\\), donc :</p> (1) (1) (1) (1) 0 0 1 0 1 0 1 0 (42) + 1 1 1 1 0 0 1 0 (-14) = 0 0 0 1 1 1 0 0 (28) <p>D\u00e9passement de capacit\u00e9 :</p> <p>L\u2019addition de deux nombres entiers peut d\u00e9passer la capacit\u00e9 de repr\u00e9sentation des mots binaires: en effet, pour repr\u00e9senter un nombre \\(n\\) en binaire, il faut \\(\\lceil log_2(n) \\rceil\\) bits. La somme de deux nombres \\(n\\) et \\(m\\) est inf\u00e9rieure ou \u00e9gale \u00e0 \\(2 \u00d7 max(n, m)\\), donc le nombre de bits n\u00e9cessaires pour repr\u00e9senter cette somme est, au plus : \\(\\lceil log_2(2 \u00d7 max (n,m)) \\rceil = \\lceil log_2(max(n,m) + 1) \\rceil\\), soit 1 bit de plus que le nombre de bits significatifs du plus grand des deux nombres.</p> <p>Il existe des solutions pour tester l'existence d'un d\u00e9passement, par exemple en utilisant un OU EXCLUSIF (xor) pour comparer la retenue entrante et la retenue sortante de l'addition des deux bits de poids fort. Il y a d\u00e9passement si ces deux bits sont oppos\u00e9s.</p>"},{"location":"premiere/representation_donnees/cours/#representation-des-nombres-reels","title":"Repr\u00e9sentation des nombres r\u00e9els","text":"<p>Nous avons vu que le langage Python \u00e9tait capable de calculer des nombres d\u00e9cimaux particuliers appel\u00e9s nombres flottants (type <code>float</code>). Nous allons voir que ces nombres ont un encodage tr\u00e8s compact, ce codage pouvant \u00eatre sur 32 ou sur 64 bits, ce qui permet de repr\u00e9senter des nombres tr\u00e8s grands ou de tr\u00e8s petits nombres, bien au-del\u00e0 de ce qu\u2019il est possible de repr\u00e9senter avec un codage des entiers sur le m\u00eame nombre de bits.</p> <p>Pour repr\u00e9senter en binaire des nombres r\u00e9els (nombres avec une partie fractionnaire), il faut d\u00e9composer celle-ci en une somme de puissances inverses de 2 : \\(b_1 ... b_k\\) est la repr\u00e9sentation binaire de \\(d(0 \\lt d \\lt 1)\\) si : \\(d = b_1 \u00d7 2^{-1} + b_2 \u00d7 2^{-2} + b_3 \u00d7 2^{-3} + ... + b_k \u00d7 2^{-k}\\) \\(d = b_1 \u00d7 \\frac{1}{2} + b_2 \u00d7 \\frac{1}{2^2} + b_3 \u00d7 \\frac{1}{2\u00b3} + ... + b_k \u00d7 \\frac{1}{2^k}\\).</p> <p>Codage inexact</p> <p>Contrairement au codage de la partie enti\u00e8re, le codage de la partie d\u00e9cimale peut \u00eatre infini, de la m\u00eame fa\u00e7on que des nombres fractionnaires peuvent avoir une partie d\u00e9cimales infinie, comme par exemple \\(\\frac{1}{3} = 0,3333...\\).</p> <p>Il y a donc des nombres d\u00e9cimaux que l'on ne peut pas repr\u00e9senter de mani\u00e8re exacte en machine. Si l'on prend le nombre <code>0.3</code> par exemple, le nombre de bits n\u00e9cessaire pour le repr\u00e9senter est infini. Si on le repr\u00e9sente sur un octet par exemple, son \u00e9criture binaire serait <code>01001100</code>, soit : \\(0 \u00d7 \\frac{1}{2} + 1 \u00d7 \\frac{1}{4} + 0 \u00d7 \\frac{1}{8}+ 0 \u00d7 \\frac{1}{16} + 1 \u00d7 \\frac{1}{32} + 1 \u00d7 \\frac{1}{64} + 0 \u00d7 \\frac{1}{2} + 0 \u00d7 \\frac{1}{256}\\), ce qui vaut \\(0,296875\\).</p> <p>Les nombres r\u00e9els repr\u00e9sentables avec une partie d\u00e9cimale finie en binaire sont ceux dont le d\u00e9nominateur est une puissance de 2, comme \\(\\frac{1}{2}\\), \\(\\frac{1}{4}\\), \\(\\frac{1}{8}\\)...</p> <p>\u00c0 vous de jouer 1</p> <p>Essayez de saisir dans l'interpr\u00e9teur Python l'expression <code>0.1 + 0.2</code>. Que devriez-vous obtenir ? Qu'obtenez-vous, et pourquoi ?</p> <p>\u00c0 vous de jouer 2</p> <p>Quelle est la repr\u00e9sentation binaire du nombre r\u00e9el dont l'\u00e9criture d\u00e9cimale est \\(1.25\\) ? \\(12.125\\) ? \\(0.3\\) (sur 8 bits) ?</p> <p>\u00c0 vous de jouer 3</p> <p>Quelle est la repr\u00e9sentation d\u00e9cimale du nombre r\u00e9el dont l'\u00e9criture binaire est : \\(0.0101\\) ? \\(1011.00001\\) ?</p>"},{"location":"premiere/representation_donnees/cours/#codage-en-virgule-fixe","title":"Codage en virgule fixe","text":"<p>Une approche initiale pour la repr\u00e9sentation des nombres r\u00e9els avec une partie fractionnaire est le codage en virgule fixe, o\u00f9 la partie enti\u00e8re et la partie d\u00e9cimale sont toutes deux repr\u00e9sent\u00e9es sur un nombre pr\u00e9alablement d\u00e9fini de bits, par exemple 8 bits chacune.</p> <p>Avec cette approche, pour encoder les nombres r\u00e9els n\u00e9gatifs, on utilise simplement le compl\u00e9ment \u00e0 2 apr\u00e8s avoir effectu\u00e9 le codage en virgule fixe du nombre positif \u00e9quivalent.</p> <p>Cependant, cette m\u00e9thode pr\u00e9sente des limitations importantes. Tout d'abord, l'intervalle de nombres que l'on peut repr\u00e9senter reste restreint, correspondant \u00e0 la plage d'entiers sur 8 bits, c'est-\u00e0-dire \\([-128, +127]\\). De plus, la repr\u00e9sentation de la partie d\u00e9cimale est \u00e9galement limit\u00e9e, avec la possibilit\u00e9 de repr\u00e9senter seulement \\(256\\) valeurs distinctes. En cons\u00e9quence il devient impossible de repr\u00e9senter tous les nombres r\u00e9els, tous les nombres d\u00e9cimaux, et m\u00eame des nombres \"simples\" tels que \\(0,1\\) de mani\u00e8re exacte. Seules quelques valeurs d\u00e9cimales sp\u00e9cifiques peuvent \u00eatre repr\u00e9sent\u00e9es pr\u00e9cis\u00e9ment, tandis que d'autres doivent \u00eatre approxim\u00e9es. Ces approximations sont la principale source d'erreurs de calcul.</p> <p></p> Voir des exemples d'encodage en virgule fixe"},{"location":"premiere/representation_donnees/cours/#codage-en-virgule-flottante-norme-ieee-754","title":"Codage en virgule flottante - Norme IEEE 754","text":"<p>La norme IEEE 754 d\u00e9finit un format standardis\u00e9 qui vise \u00e0 unifier la repr\u00e9sentation des nombres flottants, qui est tr\u00e8s diverse selon les constructeurs.</p> <p>Formats de repr\u00e9sentation</p> <p>Cette norme propose deux formats de repr\u00e9sentation : un format simple pr\u00e9cision sur 32 bits et un format double pr\u00e9cision sur 64 bits.</p> <p></p> <p>En simple pr\u00e9cision, la cha\u00eene de 32 bits repr\u00e9sentant le nombre est d\u00e9compos\u00e9e en :</p> <ul> <li>1 bit de signe indiquant le signe de la mantisse, </li> <li>8 bits pour l\u2019exposant,</li> <li>23 bits pour le codage de la mantisse.</li> </ul> <p>En double pr\u00e9cision, la cha\u00eene de 64 bits repr\u00e9sentant le nombre est d\u00e9compos\u00e9e en :</p> <ul> <li>1 bit de signe indiquant le signe de la mantisse, </li> <li>11 bits pour l\u2019exposant,</li> <li>52 bits pour le codage de la mantisse.</li> </ul> <p>Repr\u00e9sentation d'un nombre flottant</p> <p>La repr\u00e9sentation d\u2019un nombre flottant selon la norme IEEE 754 est similaire \u00e0 l\u2019\u00e9criture scientifique d\u2019un nombre d\u00e9cimal, \u00e0 savoir une d\u00e9composition en trois parties : un signe \\(s\\), une mantisse \\(m\\) et un exposant \\(n\\). De mani\u00e8re g\u00e9n\u00e9rale, un nombre flottant a la forme suivante :</p> <p></p> \\((\u22121)^sm \u00d7 2^{(n\u2212d)}\\) <p>La norme IEEE 754 pr\u00e9sente quelques diff\u00e9rences avec l\u2019\u00e9criture scientifique :</p> <ul> <li>la base choisie est maintenant la base 2,</li> <li>la mantisse est maintenant dans l\u2019intervalle \\([1, 2[\\),</li> <li>l\u2019exposant \\(n\\) est d\u00e9cal\u00e9 (ou biais\u00e9) d\u2019une valeur \\(d\\) qui d\u00e9pend du format choisi (32 ou 64 bits).</li> </ul>"},{"location":"premiere/representation_donnees/cours/#bit-de-signe","title":"Bit de signe","text":"<p>Le signe \\(s\\) est cod\u00e9 sur un bit (le bit de poids fort de l\u2019entier de 32 bits ou de 64 bits) : ce bit vaut \\(0\\) si le nombre repr\u00e9sent\u00e9 est positif, et \\(1\\) s'il est n\u00e9gatif.</p>"},{"location":"premiere/representation_donnees/cours/#exposant","title":"Exposant","text":"<p>Pour pouvoir repr\u00e9senter \u00e0 la fois des exposants positifs et n\u00e9gatifs dans la norme IEEE 754, une m\u00e9thode diff\u00e9rente du compl\u00e9ment \u00e0 2 est employ\u00e9e. Cette m\u00e9thode consiste \u00e0 stocker l'exposant sous une forme d\u00e9cal\u00e9e, en tant qu'entier non sign\u00e9. Plus pr\u00e9cis\u00e9ment, l'exposant d\u00e9cal\u00e9, not\u00e9 \\(n\\), est repr\u00e9sent\u00e9 par un entier de 8 bits pouvant prendre des valeurs entre \\(0\\) et \\(255\\) :</p> <ul> <li>dans le format 32 bits, ce d\u00e9calage est de \\(d = +127_{10}\\), ce qui permet de repr\u00e9senter des exposants sign\u00e9s dans l'intervalle \\([-127_{10}, + 128_{10}]\\). Toutefois, les valeurs \\(0_{10}\\) et \\(255_{10}\\) sont r\u00e9serv\u00e9es pour repr\u00e9senter des cas sp\u00e9ciaux, donc les exposants sign\u00e9s r\u00e9ellement utilisables se situent dans l'intervalle \\([-126_{10}, + 127_{10}]\\),</li> <li>dans le format 64 bits, ce d\u00e9calage est de \\(d = +1023_{10}\\), ce qui permet de repr\u00e9senter des exposants sign\u00e9s dans l'intervalle \\([-1023_{10}, + 1024_{10}]\\). Toutefois, les valeurs \\(0_{10}\\) et \\(2047_{10}\\) sont r\u00e9serv\u00e9es pour repr\u00e9senter des cas sp\u00e9ciaux, donc les exposants sign\u00e9s r\u00e9ellement utilisables se situent dans l'intervalle \\([-1022_{10}, + 1023_{10}]\\),</li> <li>de mani\u00e8re g\u00e9n\u00e9rale, pour un exposant stock\u00e9 sur un nombre \\(n\\) de bits, le d\u00e9calage sera de \\(2^{n - 1} - 1\\).</li> </ul>"},{"location":"premiere/representation_donnees/cours/#mantisse","title":"Mantisse","text":"<p>La mantisse \\(m\\) est toujours comprise dans l\u2019intervalle \\([1, 2[\\), et repr\u00e9sente un nombre de la forme \\(1, xx . . . xx\\), c\u2019est-\u00e0-dire un nombre commen\u00e7ant n\u00e9cessairement par le chiffre 1. Par cons\u00e9quent, pour gagner 1 bit de pr\u00e9cision, les 23 bits (en simple pr\u00e9cision) ou 52 bits (en double pr\u00e9cision) d\u00e9di\u00e9s \u00e0 la mantisse sont uniquement utilis\u00e9s pour repr\u00e9senter les chiffres apr\u00e8s la virgule, qu\u2019on appelle la fraction de la mantisse.</p> <p>Ainsi, si les 23 bits d\u00e9di\u00e9s \u00e0 la mantisse sont \\(b_1 b_2 . . . b_{23}\\) , alors la mantisse repr\u00e9sente le nombre \\(1 + b_1 \u00d7 2^{\u22121} + b_2 \u00d7 2^{\u22122} + \u00b7 \u00b7 \u00b7 + b_{23} \u00d7 2^{\u221223}\\).</p> <p>Repr\u00e9sentation normalis\u00e9e d'un nombre flottant</p> <p>Ainsi, avec la mantisse sous sa forme normalis\u00e9e, les nombres flottants seront repr\u00e9sent\u00e9s comme suit.</p> <p>Sur 32 bits :</p> <p></p> \\((\u22121)^s \\times 1, f \\times 2^{(e\u2212127)}\\) <p>Sur 64 bits :</p> <p></p> \\((\u22121)^s \\times 1, f \\times 2^{(e\u22121023)}\\) <p>o\u00f9 \\(s\\) est le bit de signe, \\(f\\) est la fraction de la mantisse et \\(e\\) est l'exposant.</p> <p>Conversion binaire (virgule flottante) \u2192 d\u00e9cimal (extrait du Balabonski Premi\u00e8re)</p> <p>Voici un mot de 32 bits et le nombre d\u00e9cimal qu'il repr\u00e9sente.</p> <p></p> <p>Pour voir des exemples suppl\u00e9mentaires : </p> IUT de Reims - Virgule flottante \u2192 d\u00e9cimal"},{"location":"premiere/representation_donnees/cours/#recapitulatif-des-encodages","title":"R\u00e9capitulatif des encodages","text":"exposant (\\(e\\)) fraction (\\(f\\)) valeur \\(32\\) bits 8 bits 23 bits \\((\u22121)^s \u00d7 1, f \u00d7 2^{(e\u2212127)}\\) \\(64\\) bits 11 bits 52 bits \\((\u22121)^s \u00d7 1, f \u00d7 2^{(e\u22121023)}\\) <p>En simple pr\u00e9cision (32 bits), les nombres flottants positifs peuvent repr\u00e9senter les nombres d\u00e9cimaux compris (approximativement) dans l\u2019intervalle \\([10^{\u221238}, 10^{38}]\\).</p> <p>En double pr\u00e9cision (64 bits), cet intervalle est (approximativement) de \\([10^{\u2212308}, 10^{308}]\\).</p> <p>Conversion d\u00e9cimal \u2192 binaire (virgule flottante)</p> <p>On cherche \u00e0 repr\u00e9senter le nombre \\(\u2013 10,125_{10}\\) selon le format IEEE 754 simple pr\u00e9cision.</p> <p>\\(10,125_{10} = 1010,001_{2} = 1,010001_{2} \u00d7 2^3\\).</p> <p>L\u2019exposant \\(e = 3\\) est translat\u00e9 de la valeur \\(+127_{10}\\). \\(e' = e + 127_{10} = 130_{10} = 10000010_2\\).</p> <p>Le signe de la mantisse est n\u00e9gatif et vaut donc 1.</p> <p>Finalement, le codage du nombre \\(- 10,125_{10}\\) donne la cha\u00eene binaire suivante : \\(1~10000010~01000100000000000000000_2 = C1220000_{16}\\)</p> <p>Pour plus de d\u00e9tails sur ce codage et des exemples suppl\u00e9mentaires : </p> IUT de Reims - Codage en virgule flottante"},{"location":"premiere/representation_donnees/cours/#valeurs-speciales","title":"Valeurs sp\u00e9ciales","text":"signe exposant fraction valeur sp\u00e9ciale 0 0 0 \\(+0\\) 1 0 0 \\(-0\\) 0 255 0 \\(+\\infty\\) 1 255 0 \\(-\\infty\\) 0 255 \\(\\ne 0\\) \\(NaN\\)"},{"location":"premiere/representation_donnees/cours/#nombres-denormalises","title":"Nombres d\u00e9normalis\u00e9s","text":"<p>Comme vu pr\u00e9c\u00e9demment, si l\u2019exposant \\(e\\) d\u2019un nombre flottant (sur 32 bits) est compris entre \\(1\\) et \\(254\\), la valeur repr\u00e9sent\u00e9e par l\u2019encodage est :</p> <p></p> \\((\u22121)^s \\times 1, f \\times 2^{(e\u2212127)}\\) <p>Les nombres repr\u00e9sent\u00e9s ainsi sont dits normalis\u00e9s. Avec cet encodage, le plus petit nombre d\u00e9cimal positif repr\u00e9sentable est donc \\(2^{\u2212126}\\) (soit \\(\u223c 10^{\u221238}\\)).</p> <p>\u00c9tant donn\u00e9 que la mantisse est implicitement de la forme \\(1, f\\) , il n\u2019y a pas de nombres repr\u00e9sentables dans l\u2019intervalle \\([0, 2^{\u2212126} [\\), l\u00e0 o\u00f9 il y en a \\(2^{23}\\) dans l\u2019intervalle \\([1 \u00d7 2^{\u2212126} , 2 \\times 2^{\u2212126}]\\) = \\([2^{\u2212126} , 2^{\u2212125}]\\).</p> <p>Afin de pouvoir repr\u00e9senter des tr\u00e8s petits nombres, la norme IEEE 754 permet d\u2019encoder des nombres de la forme suivante, avec une mantisse commen\u00e7ant implicitement par un \\(0\\) au lieu d'un \\(1\\) :</p> <p></p> \\((\u22121)^s \\times 0, f \\times 2^{\u2212126}\\) <p>On appelle ces nombres flottants des nombres d\u00e9normalis\u00e9s, dont :</p> <ul> <li>l'exposant \\(e\\) est \u00e0 \\(0\\),</li> <li>la fraction de la mantisse est diff\u00e9rente de \\(0\\). </li> </ul> <p>La plus petite valeur repr\u00e9sentable avec des nombres d\u00e9normalis\u00e9s est ainsi : \\(2^{\u221223} \u00d7 2^{\u2212126} = 2^{\u2212149}\\) repr\u00e9sent\u00e9e par la cha\u00eene binaire \\(0~00000000~00000000000000000000001_2\\).</p>"},{"location":"premiere/representation_donnees/cours/#exercices","title":"Exercices","text":"<p>Exercice 8</p> <p>Donner la repr\u00e9sentation flottante en simple pr\u00e9cision de \\(128\\) et \\(\u221232,75\\).</p> <p>Exercice 9</p> <p>Donner la valeur d\u00e9cimale des nombres flottants suivants cod\u00e9s en simple pr\u00e9cision :</p> <ul> <li>\\(1~01111110~11110000000000000000000\\),</li> <li>\\(0~10000011~11100000000000000000000\\).</li> </ul> <p>Plus d'exercices</p> <p>Vous pouvez \u00e9galement vous entra\u00eener sur les exercices propos\u00e9s par l'IUT de Reims :</p> <ul> <li>D\u00e9cimal \u2192 virgule flottante : exercices \u00e0 la fin de cette page</li> <li>Virgule flottante \u2192 d\u00e9cimal : exercices \u00e0 la fin de cette page</li> </ul>"},{"location":"premiere/representation_donnees/cours/#representation-des-textes","title":"Repr\u00e9sentation des textes","text":"<p>La repr\u00e9sentation des caract\u00e8res dans un ordinateur permet de stocker ou d'\u00e9changer des textes. </p> <p>Th\u00e9oriquement, cela consiste simplement \u00e0 associer un num\u00e9ro unique \u00e0 chaque caract\u00e8re. Toutefois, le choix de la norme d'encodage utilis\u00e9e n\u00e9cessite de respecter certaines contraintes. Tout d\u2019abord, il faut que tous les ordinateurs utilisent le m\u00eame encodage. Ensuite, on doit pouvoir repr\u00e9senter le plus de caract\u00e8res possible, des caract\u00e8res \u00e9ditables comme des lettres majuscules et minuscules, des signes de ponctuation et signes math\u00e9matiques, mais aussi des caract\u00e8res dits \u00ab non imprimables \u00bb, qui peuvent correspondre \u00e0 des actions comme celle permettant de passer \u00e0 la ligne ou d'\u00e9mettre un beep, mais aussi \u00e0 des commandes de protocoles de communication comme accuser r\u00e9ception, d\u00e9but de texte, etc. Par ailleurs, le but est \u00e9galement d'\u00eatre le plus compact possible pour \u00e9conomiser la m\u00e9moire ou le volume des \u00e9changes r\u00e9seaux.</p>"},{"location":"premiere/representation_donnees/cours/#norme-ascii","title":"Norme ASCII","text":"Table ASCII standard <p>Le codage ASCII (American Standard Code for Information Interchange) est un codage \u00e0 7 bits qui permet donc de repr\u00e9senter 128 caract\u00e8res. Chacun des codes associ\u00e9s \u00e0 un caract\u00e8re est donn\u00e9 dans une table \u00e0 deux entr\u00e9es, la premi\u00e8re entr\u00e9e codant la valeur du quartet de poids faible et la seconde entr\u00e9e codant la valeur des 3 bits de poids fort du code associ\u00e9 au caract\u00e8re.</p> <p>Le caract\u00e8re <code>A</code> est cod\u00e9 par la cha\u00eene \\(100~0001_2\\) soit le code hexad\u00e9cimal \\(41_{16}\\).</p> <p>Le code ASCII est notamment tr\u00e8s utilis\u00e9 sur les processeurs de la famille Intel.</p> <p>La table ASCII contient plusieurs cat\u00e9gories de caract\u00e8res :</p> <ul> <li>les lettres de l\u2019alphabet latin en majuscule (entre \\(41\\) et \\(5A\\)) et en minuscule (entre \\(61\\) et \\(7A\\)) ;</li> <li>les chiffres de \\(0\\) \u00e0 \\(9\\) (entre \\(30\\) et \\(39\\)) ;</li> <li>des signes de ponctuations (comme la virgule <code>,</code> qui vaut \\(2C\\)), des parenth\u00e8ses ou des crochets (comme le symbole <code>(</code> qui vaut \\(28\\) ou le crochet ouvrant <code>[</code> qui vaut \\(5B\\)) ;</li> <li>des op\u00e9rateurs arithm\u00e9tiques (comme le signe <code>+</code> qui vaut \\(2B\\)).</li> </ul> <p>La table ASCII contient \u00e9galement des caract\u00e8res sp\u00e9ciaux :</p> <p>Quelques caract\u00e8res sp\u00e9ciaux</p> caract\u00e8re num\u00e9ro signification HT 09 Tabulation horizontale LF 0A Nouvelle ligne VT 0B Tabulation verticale FF 0C Nouvelle page CR 0D Retour chariot SP 20 Espace BS 08 Suppression DEL 7F Effacement <p>Elle contient \u00e9galement des caract\u00e8res de contr\u00f4le non imprimables, par exemple :</p> <p>Quelques caract\u00e8res de contr\u00f4le</p> caract\u00e8re num\u00e9ro signification SOH 01 D\u00e9but d\u2019ent\u00eate STX 02 D\u00e9but de texte ETX 03 Fin de texte EOT 04 Fin de transmission ENQ 05 Demande ACK 06 Accus\u00e9 de r\u00e9ception DC1 11 Contr\u00f4le de p\u00e9riph\u00e9rique 1 BEL 07 Son sur le haut-parleur <p>Bit de parit\u00e9</p> <p>M\u00eame si 7 bits suffisent pour repr\u00e9senter 128 caract\u00e8res (de <code>000 0000</code> \u00e0 <code>111 1111</code>), en pratique chaque caract\u00e8re occupe 1 octet (8 bits) en m\u00e9moire. Le bit de poids fort est utilis\u00e9 pour effectuer une somme de contr\u00f4le afin de d\u00e9tecter d\u2019\u00e9ventuelles erreurs de transmission. L'id\u00e9e est de fixer la valeur de ce bit de mani\u00e8re \u00e0 ce que le nombre de bits \u00e0 <code>1</code> dans l\u2019octet soit toujours pair. C\u2019est la raison pour laquelle on appelle ce bit le bit de parit\u00e9.</p> <p>ASCII et Python</p> <p>La fonction ord de Python renvoie le code ASCII correspondant \u00e0 un caract\u00e8re. L\u2019entier renvoy\u00e9 est en base 10, mais on peut le convertir en hexad\u00e9cimal avec la fonction <code>hex</code>.</p> <pre><code>&gt;&gt;&gt; ord(\u2019A\u2019)\n65\n&gt;&gt;&gt; hex(ord(\u2019A\u2019))\n'0x41'\n</code></pre> <p>Inversement, la fonction chr renvoient le caract\u00e8re correspondant \u00e0 un entier.</p> <pre><code>&gt;&gt;&gt; chr(0x26)\n\u2019&amp;\u2019\n</code></pre> <p>Les caract\u00e8res peuvent \u00e9galement \u00eatre saisis directement par leur code ASCII en utilisant la notation \\xhh, o\u00f9 hh est le code hexad\u00e9cimal du caract\u00e8re.</p> <pre><code>&gt;&gt;&gt; print(\u2019\\x43e\\x63i es\\x74...\u2019)\nCeci est...\n</code></pre> <p>Exercice 10</p> <p>Donner le codage ASCII (en hexad\u00e9cimal et binaire) des deux cha\u00eenes de caract\u00e8res Python ci-dessous :</p> <ul> <li><code>\u2019bonjour tout le monde!\u2019</code></li> <li><code>\u2019\u2019\u2019programmer en Python\u2019\u2019\u2019</code></li> </ul> <p>Exercice 11</p> <p>\u00c9crire une fonction <code>printASCII(s)</code> qui affiche \u00e0 l\u2019\u00e9cran les codes ASCII au format hexad\u00e9cimal d\u2019une cha\u00eene de caract\u00e8res. Utiliser cette fonction pour v\u00e9rifier les r\u00e9ponses \u00e0 l\u2019exercice pr\u00e9c\u00e9dent.</p>"},{"location":"premiere/representation_donnees/cours/#normes-iso-8859","title":"Normes ISO 8859","text":"<p>Les caract\u00e8res imprimables de la table ASCII se sont r\u00e9v\u00e9l\u00e9s rapidement insuffisants pour repr\u00e9senter efficacement des textes dans des langues autres que l'anglais. Cela est particuli\u00e8rement \u00e9vident pour les langues utilisant l'alphabet latin, car la table ASCII ne prend pas en compte de nombreux \u00e9l\u00e9ments tels que les lettres accentu\u00e9es et les symboles de monnaie. Pour r\u00e9soudre cette limitation, l'ISO (Organisation Internationale de Normalisation) a introduit la norme ISO 8859, une extension de l'ASCII qui utilise huit bits par octet pour repr\u00e9senter les caract\u00e8res, permettant ainsi un total de 256 caract\u00e8res encod\u00e9s. Malgr\u00e9 cette expansion, cela reste encore insuffisant pour englober tous les caract\u00e8res utilis\u00e9s dans les langues latines.</p> <p>Afin de maximiser la repr\u00e9sentation des caract\u00e8res, la norme ISO 8859 propose plusieurs tables de correspondance, \u00e9galement appel\u00e9es pages et not\u00e9es ISO-8859-n, o\u00f9 n repr\u00e9sente le num\u00e9ro de la table. Bien que ces tables soient ind\u00e9pendantes les unes des autres, elles ont \u00e9t\u00e9 con\u00e7ues pour \u00eatre compatibles entre elles. Les premiers 128 caract\u00e8res correspondent \u00e0 la norme ASCII, tandis que les 128 suivants sont sp\u00e9cifiques \u00e0 la table n. De plus, les caract\u00e8res identiques ont le m\u00eame code.</p> <p>La norme 8859 inclut un total de seize tables, dont dix sont d\u00e9di\u00e9es aux langues latines. Plut\u00f4t que de les r\u00e9f\u00e9rencer par leur nomenclature ISO, elles sont parfois appel\u00e9es latin-1, latin-2, etc.</p> <p> </p> Tables de la norme 8859"},{"location":"premiere/representation_donnees/cours/#norme-unicode","title":"Norme Unicode","text":"<p>Les pages ISO-8859-n, bien qu'elles permettent un encodage \u00e9tendu, ne conviennent pas pour les textes avec un m\u00e9lange de caract\u00e8res provenant de diff\u00e9rentes pages. Pour rem\u00e9dier \u00e0 cela, l'ISO a introduit l'Universal Character Set (UCS) sous la norme ISO-10646. Cette norme attribue \u00e0 chaque caract\u00e8re un nom unique et un num\u00e9ro appel\u00e9 point de code. Elle recense plus de 110 000 caract\u00e8res et peut contenir ceux de n'importe quelle langue, avec une capacit\u00e9 maximale de 4 294 967 295 caract\u00e8res.</p> <p>Les 256 premiers points de code de l'ISO-8859-1 sont inclus par souci de compatibilit\u00e9. La notation \\(U+xxxx\\) repr\u00e9sente les points de code du jeu universel de caract\u00e8res, o\u00f9 chaque \\(x\\) est un chiffre hexad\u00e9cimal. Par exemple, \\(U+006F\\) d\u00e9signe le point de code de la lettre \"o\".</p> <p>UNICODE reprend le codage ASCII concernant les principaux caract\u00e8res, en \u00e9tendant le code \u00e0 16 bits. Ainsi, le caract\u00e8re <code>A</code> a pour point de code \\(0041_{16}\\).</p> <p>Unicode, cr\u00e9\u00e9 en 1991 et encore en d\u00e9veloppement, comporte d\u00e9j\u00e0 137 374 caract\u00e8res d\u2019une centaine d\u2019\u00e9critures dont les id\u00e9ogrammes, l\u2019alphabet grec etc.</p> <p>La norme Unicode d\u00e9finit plusieurs techniques d'encodage pour repr\u00e9senter les points de code de mani\u00e8re plus ou moins \u00e9conomique, selon la technique choisie. Ces encodages, appel\u00e9s formats de transformation universelle ou Universal Transformation Format (UTF) en anglais, portent les noms UTF-n, o\u00f9 n indique le nombre minimal de bits utilis\u00e9s pour repr\u00e9senter un point de code.</p>"},{"location":"premiere/representation_donnees/cours/#utf-8","title":"UTF-8","text":"<p>C\u2019est le format le plus utilis\u00e9 sous Linux, dans les protocoles r\u00e9seaux et les sites Web. Comme son nom l\u2019indique, il faut seulement 8 bits pour coder les principaux caract\u00e8res. L\u2019UTF-8 est enti\u00e8rement compatible avec le standard ASCII, c\u2019est-\u00e0-dire que les 127 premiers caract\u00e8res sont repr\u00e9sent\u00e9s sur 1 octet, exactement comme en ASCII. Les programmes fonctionnant sur des textes encod\u00e9s en ASCII devraient \u00e9galement fonctionner si ces textes sont encod\u00e9s en UTF-8.</p> <p>L\u2019unicode et en particulier UTF-8 vise \u00e0 :</p> <ul> <li>minimiser l\u2019espace occup\u00e9 par un caract\u00e8re</li> <li>proposer un encodage adaptable \u00e0 tous les caract\u00e8res employ\u00e9s sur terre</li> <li>conserver l\u2019ordre de la table ascii de d\u00e9part</li> </ul> <p>UTF-8 est utilis\u00e9 par 90,5% des sites web en 2017 et dans la majorit\u00e9 des syst\u00e8mes UNIX.</p> <p>Principe de l'encodage UTF-8</p> <p>Le principe de l\u2019encodage UTF-8 est le suivant :</p> <ul> <li>Si le bit de poids fort d\u2019un octet est \u00e0 0, alors il s\u2019agit d\u2019un caract\u00e8re ASCII cod\u00e9 sur les 7 bits restant.</li> <li>Sinon, les premiers bits de poids fort de l\u2019octet indiquent le nombre d\u2019octets utilis\u00e9s pour encoder le caract\u00e8re \u00e0 l\u2019aide d\u2019une s\u00e9quence de bits \u00e0 1 et se terminant par un bit \u00e0 0. Par exemple, si le premier octet commence par \\(110xxxxx\\), cela signifie que le caract\u00e8re est cod\u00e9 par 2 octets puisqu\u2019il commence par une s\u00e9quence de deux bits de poids fort \u00e0 1 suivie d\u2019un 0. De m\u00eame, si le premier octet commence par \\(1110xxxx\\), cela signifie que le caract\u00e8re est cod\u00e9 par 3 octets.</li> <li>Enfin, dans le cas d\u2019un encodage sur \\(k\\) octets, les \\(k \u2212 1\\) octets qui suivent l\u2019octet de poids fort doivent tous \u00eatre de la forme \\(10xxxxxx\\), c\u2019est-\u00e0-dire commencer par deux bits de poids fort valant \\(10\\).</li> </ul> <p>Voici un tableau r\u00e9sumant le principe de l\u2019encodage UTF-8, avec la plage des caract\u00e8res repr\u00e9sentables selon le nombre d\u2019octets utilis\u00e9s.</p> <p> </p> Principe de l'encodage UTF-8 <p>Et voici quelques exemples de repr\u00e9sentations de points de code selon le format UTF-8 :</p> <p> </p> Exemples de repr\u00e9sentations selon UTF-8 <p>Exercice 12</p> <p>Sachant que le point de code du symbole <code>\u00e9</code> est \\(233\\), donner la s\u00e9quence de points de code du mot <code>\u00e9l\u00e9gance</code>, puis les octets en binaire correspondant \u00e0 l\u2019encodage UTF-8 de ce mot.</p> <p>Voici comment proc\u00e9der :</p> <ul> <li>Chercher le point de code de chaque lettre en hexad\u00e9cimal et en binaire.</li> <li>En vous aidant de la table Principe de l'encodage UTF-8 ci-dessus, retrouver l'encodage en UTG-8 de chaque symbole en choisissant le bon nombre d'octets. On rappelle que les symboles pr\u00e9sents dans la table ASCII (comme les lettres de <code>a</code> \u00e0 <code>z</code>) sont cod\u00e9s sur un seul octet, donc avec 7 bits codants.</li> <li>Enfin, \u00e9crire les octets en binaire correspondant \u00e0 l'encodage du mot complet.</li> </ul> <p>Exercice 13</p> <p>Pour chacun des caract\u00e8res suivants, dont le point de code est donn\u00e9 en d\u00e9cimal, donner l\u2019encodage UTF-8 du caract\u00e8re, en donnant les octets en d\u00e9cimal et en hexad\u00e9cimal.</p> <ol> <li>caract\u00e8re <code>A</code> (point de code \\(65\\))</li> <li>caract\u00e8re <code>\u00e8</code> (point de code \\(232\\))</li> <li>caract\u00e8re (\u00e9toile) (point de code \\(8902\\))</li> </ol>"},{"location":"premiere/representation_donnees/cours_corr/","title":"Repr\u00e9sentation des donn\u00e9es en machine","text":""},{"location":"premiere/representation_donnees/cours_corr/#representation-des-donnees-en-machine","title":"Repr\u00e9sentation des donn\u00e9es en machine","text":"Extrait du programme <p>Voici un extrait du programme indiquant les notions \u00e0 ma\u00eetriser sur ce th\u00e8me.</p> <p></p> <p>Dans un ordinateur, toutes les informations (donn\u00e9es ou programmes) sont repr\u00e9sent\u00e9es \u00e0 l\u2019aide de deux chiffres : le 0 et 1, appel\u00e9s chiffres binaires ou Binary Digits (bits) en anglais.</p> <p>Dans la m\u00e9moire d\u2019un ordinateur (RAM, ROM, registres des microprocesseurs, etc.), ces chiffres binaires sont regroup\u00e9s par paquets de 8, que l'on appelle octets (ou bytes en anglais), puis organis\u00e9s en mots machine (ou words en anglais) de 2, 4 ou 8 octets en g\u00e9n\u00e9ral. Un ordinateur de 32 bits par exemple manipule directement des mots de 4 octets (4 octets \u00d7 8 bits = 32 bits) lorsqu\u2019il effectue des op\u00e9rations en m\u00e9moire ou dans ses calculateurs.</p> <p>Le regroupement des bits en octets ou mots machine permet de repr\u00e9senter des donn\u00e9es telles que des nombres entiers, des nombres r\u00e9els (on verra que l'on ne peut repr\u00e9senter que des approximations des nombres r\u00e9els), ou encore des caract\u00e8res et des textes (on introduira la notion d'encodage).</p>"},{"location":"premiere/representation_donnees/cours_corr/#representation-des-entiers-naturels","title":"Repr\u00e9sentation des entiers naturels","text":"<p>L'encodage le plus simple est celui des nombres entiers naturels (nombres entiers positifs).</p> <p>Pour repr\u00e9senter des nombres, les ordinateurs utilisent le syst\u00e8me binaire : Le codage binaire d\u2019un nombre positif \\(n\\) est la suite de \\(k\\) bits \\(b_{k - 1} ... b_0\\) telle que \\(n = b_{k \u2212 1} \u00d7 2^{k \u2212 1} + b_{k \u2212 2} \u00d7 2^{k \u2212 2} + ... + b_1 \u00d7 2^1 + b_0 \u00d7 2^0\\) . Ainsi le nombre \\(42\\) en d\u00e9cimal est repr\u00e9sent\u00e9 par \\(101010\\) en binaire : \\(42 = \\textbf{1} \u00d7 2\u2075 + \\textbf{0} \u00d7 2\u2074 + \\textbf{1} \u00d7 2\u00b3 + \\textbf{0} \u00d7 2\u00b2 + \\textbf{1} \u00d7 2\u00b9 + \\textbf{0} \u00d7 2\u2070\\) \\(42 = \\textbf{1} \u00d7 2\u2075 + \\textbf{1} \u00d7 2\u00b3 + \\textbf{1} \u00d7 2^1\\) \\(42 = 32 + 8 + 2\\)</p> <p>\u00c0 vous de jouer</p> <p>Voici des nombres entiers en base binaire, donner l'\u00e9criture en base d\u00e9cimale de ces nombres :</p> <ul> <li>\\(0100 1010_2\\)</li> <li>\\(1111 0101_2\\)</li> </ul> <p>Le codage binaire d'un nombre d\u00e9cimal consiste \u00e0 passer de la base 10 (base d\u00e9cimale) \u00e0 la base 2, mais il existe d'autres bases comme la base 8 (base octale), ou la base 16 (base hexad\u00e9cimale).</p> <p>Chiffres autoris\u00e9s selon la base X de repr\u00e9sentation</p> <p>Base 2 : chiffre \\(0\\) et \\(1\\). Base 8 : chiffre \\(0, 1, 2, 3, 4, 5, 6, 7\\). Base 10 : chiffre \\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\) Base 16 : chiffre \\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\\) avec \\(A = 10_{10}, B = 11_{10}, C = 12_{10}, D = 13_{10}, E = 14_{10}, F = 15_{10}\\).</p> Rappels - \u00c9criture en base 10 <p>Un nombre entier en base 10 est une s\u00e9quence de chiffres compris entre \\(0\\) et \\(9\\). Pour calculer la valeur d\u2019une s\u00e9quence \\(c_{k\u22121} , c_{k\u22122} , . . . , c_{1} , c_{0}\\) de \\(k\\) chiffres, on affecte \u00e0 chaque chiffre \\(c_n\\) un poids \\(10^n\\), ce poids \u00e9tant une puissance de 10 qui d\u00e9pend de sa position \\(n\\) dans la s\u00e9quence, et on calcule la somme des termes \\(c_n \u00d7 10^n\\). </p> <p>Si l'on prend l\u2019exemple de la s\u00e9quence \\(61027\\), et qu'on la repr\u00e9sente en diff\u00e9rentes colonnes, en indiquant la position de chaque chiffre, en commen\u00e7ant \u00e0 compter les indices et les poids correspondants \u00e0 partir de \\(0\\) de la droite vers la gauche, on obtient : </p> s\u00e9quence 6 1 0 2 7 position 4 3 2 1 0 poids 10\u2074 10\u00b3 10\u00b2 10\u00b9 10\u2070 <p>La valeur de la s\u00e9quence est un entier, que l'on notera \\(N\\), calcul\u00e9 de la mani\u00e8re suivante :</p> <p>\\(N = 6 \u00d7 10^4 + 1 \u00d7 10^3 + 0 \u00d7 10^2 + 2 \u00d7 10^1 + 7 \u00d7 10^0\\)</p> <p>Plus g\u00e9n\u00e9ralement, une s\u00e9quence \\(d_{k\u22121} , d_{k\u22122} , . . . , d_1 , d_0\\) de \\(k\\) chiffres d\u00e9cimaux \\(d_i\\) correspond au nombre \\(N\\) suivant :</p> <p>\\(N = d_{k\u22121} \u00d7 10^{k\u22121} + d_{k\u22122} \u00d7 10^{k\u22122} + \u00b7 \u00b7 \u00b7 + d_1 \u00d7 10^1 + d_0 \u00d7 10^0\\)</p> Rappels - \u00c9criture en base 2 <p>Tout comme l\u2019encodage en base 10, une s\u00e9quence de chiffres binaires peut s\u2019interpr\u00e9ter comme un nombre \u00e9crit en base 2. Dans cette base, chaque chiffre (0 ou 1), appel\u00e9 bit, de la s\u00e9quence est associ\u00e9e \u00e0 un poids \\(2^i\\) et \u00e0 une puissance de 2 qui d\u00e9pend de sa position \\(i\\).</p> <p>Par exemple, l\u2019octet (suite de 8 bits) \\(0100 1101\\) peut \u00eatre repr\u00e9sent\u00e9 de la mani\u00e8re suivante.</p> s\u00e9quence 0 1 0 0 1 1 0 1 position 7 6 5 4 3 2 1 0 poids 2\u2077 2\u2076 2\u2075 2\u2074 2\u00b3 2\u00b2 2\u00b9 2\u2070 <p>La valeur de cette s\u00e9quence, que l'on notera \\(N\\), est calcul\u00e9e comme suit :</p> <p>\\(N = 0 \u00d7 2^7 + 1 \u00d7 2^6 + 0 \u00d7 2^5 + 0 \u00d7 2^4 + 1 \u00d7 2^3 + 1 \u00d7 2^2 + 0 \u00d7 2^1 + 1 \u00d7 2^0\\) \\(N = 77_{10}\\)</p> <p>Plus g\u00e9n\u00e9ralement, une s\u00e9quence \\(b_{k\u22121} , b_{k\u22122} , . . . , b_1, b_0\\) de \\(k\\) bits \\(b_i\\) correspond au nombre \\(N\\) suivant :</p> <p>\\(N = b_{k\u22121} \u00d7 2^{k\u22121} + b_{k\u22122} \u00d7 2^{k\u22122} + \u00b7 \u00b7 \u00b7 + b_1 \u00d7 2^1 + d_0 \u00d7 b^0\\)</p> <p>Cette mani\u00e8re d'encoder les entiers naturels \u00e0 l'aide de s\u00e9quences de \\(k\\) bits permet de repr\u00e9senter les entiers de \\(0\\) \u00e0 \\(2^k \u2212 1\\). Sur 1 octet (= 8 bits) par exemple, on peut donc repr\u00e9senter les entiers naturels de \\(0\\) \u00e0 \\(255\\).</p> Rappels - Base 16 (hexad\u00e9cimale) <p>...</p>"},{"location":"premiere/representation_donnees/cours_corr/#methode-des-divisions-euclidiennes-successives","title":"M\u00e9thode des divisions euclidiennes successives","text":"<p>Si l'on souhaite par exemple repr\u00e9senter \\(235_{10}\\) en base 2 :</p> <p> </p> M\u00e9thode des divisions successives <p>L'\u00e9criture binaire de \\(235_{10}\\) sur 8 bits est donc \\(1110 1011_2\\).</p> <p>Si l'on souhaite convertir un nombre vers la base 16 (en hexad\u00e9cimal), le principe est le m\u00eame, mais on divisera par 16 au lieu de diviser par 2. On rappelle qu'en hexad\u00e9cimal, les valeurs vont de \\(0\\) \u00e0 \\(F\\) : \\(1, 2, ..., 8, 9, A, B, ... E, F\\), les restes sup\u00e9rieurs \u00e0 \\(9\\) devront donc \u00eatre remplac\u00e9s par une lettre.</p>"},{"location":"premiere/representation_donnees/cours_corr/#methode-des-soustractions","title":"M\u00e9thode des soustractions","text":"<p>Pour convertir un entier not\u00e9 \\(N\\) en base \\(X\\), on proc\u00e8de comme suit :</p> <p>La plus grande puissance de \\(X\\) qui est inf\u00e9rieure ou \u00e9gale \u00e0 \\(N\\) est soustraite \u00e0 \\(N\\). Ce processus de soustraction est r\u00e9p\u00e9t\u00e9 sur le reste de la diff\u00e9rence, jusqu\u2019\u00e0 obtenir un r\u00e9sultat \u00e9gal \u00e0 0. Le nombre \\(N\\) exprim\u00e9 en base \\(X\\) est alors obtenu en notant le nombre de fois o\u00f9 une m\u00eame puissance de \\(X\\) a \u00e9t\u00e9 retir\u00e9e, et cela pour chaque puissance depuis la plus grande apparaissant, dans l\u2019ordre d\u00e9croissant des puissances.</p> <p>Dans le cas d'une conversion vers la base 2, chaque puissance de \\(X\\) ne peut \u00eatre retir\u00e9e qu'une seule fois (car les seules valeurs possibles en binaire sont 0 et 1.)</p> <p>Exemples :</p> <p>Si l'on souhaite convertir \\(125_{10}\\) en base 2 : On sait que \\(2\u2070 = 1; 2\u00b9 = 2; 2\u00b2 = 4; 2\u00b3 = 8; 2\u2074 = 16; 2\u2075 = 32; 2\u2076 = 64; 2\u2077 = 128\\). \\(125 - \\textbf{64} = 61; 61 - \\textbf{32} = 29; 29 - \\textbf{16} = 13; 13 - \\textbf{8} = 5; 5 - \\textbf{4} = 1; 1 - \\textbf{1} = 0;\\)</p> <p>Donc \\(125_{10} = 0111~1101\\).</p> <p>Si l'on souhaite convertir \\(235_{10}\\) en base 8 : On sait que \\(8^0 = 1; 8\u00b9 = 1; 8^2 = 64; 8^3 = 512\\).   \\(235 \u2013 64 = 171; 171 \u2013 64 = 107; 107 \u2013 64 = 43; 43 \u2013 8 = 35; 35 \u2013 8 = 27; 27 \u2013 8 = 19;\\) \\(19 \u2013 8 = 11; 11 \u2013 8 = 3; 3 \u2013 1 = 2; 2 \u2013 1 = 1; 1 \u2013 1 = 0\\)</p> <p>Donc \\(235_{10} = 3 \u00d7 64 + 5 \u00d7 8 + 3 \u00d7 1 = 353_8\\).</p>"},{"location":"premiere/representation_donnees/cours_corr/#convertir-un-nombre-de-la-base-2-vers-la-base-16","title":"Convertir un nombre de la base 2 vers la base 16","text":"<p>Pour convertir un nombre de la base 2 vers la base 16, c'est simple : il suffit de faire des paquets de 4 bits, et de coder chaque paquet avec une valeur hexad\u00e9cimale. Par exemple, si l'on reprend l'\u00e9criture binaire pr\u00e9c\u00e9dente : \\(1110~1011_2\\), le premier groupe \\(1110\\) se code par \\(14\\) en d\u00e9cimal, et donc par \\(E\\) en hexad\u00e9cimal. Le deuxi\u00e8me groupe \\(1011\\) se code par \\(11\\) en d\u00e9cimal, et donc par \\(B\\) en hexad\u00e9cimal. Ainsi, \\(235_{10} = 1110~1011_2 = EB_{16}\\).</p> <p>\u00c0 l'inverse, convertir un nombre exprim\u00e9 en base 16 vers la base 2 s\u2019effectue en rempla\u00e7ant simplement chacun des chiffres du nombre en base 16 par leur \u00e9quivalent binaire sur 4 bits.</p> <p>Par exemple : \\(45 A_{16} = 0100~0101~1010_2\\) et \\(1100~1111_2 = CF_{16}\\)</p>"},{"location":"premiere/representation_donnees/cours_corr/#quelques-exercices","title":"Quelques exercices","text":"<p>Exercice 1</p> <p>En utilisant la m\u00e9thode des divisions euclidiennes successives, donner l'\u00e9criture binaire du nombre 147 sur 8 bits. \u00c0 partir de l'\u00e9criture binaire obtenue, donner son \u00e9criture hexad\u00e9cimale.</p> <p>Exercice 2</p> <p>En utilisant la m\u00e9thode des soustractions successives, donner l'\u00e9criture binaire du nombre 169 sur 8 bits. \u00c0 partir de l'\u00e9criture binaire obtenue, donner son \u00e9criture hexad\u00e9cimale.</p> <p>Exercice 3</p> <p>Donner la repr\u00e9sentation en base 2 et sur 8 bits des entiers 14, 218, 42 et 57.</p> <p>Vous pourrez v\u00e9rifier vos r\u00e9ponses avec la fonction <code>bin</code> de Python. La fonction <code>bin</code> prend un nombre entier en entr\u00e9e, et renvoie la repr\u00e9sentation binaire de ce nombre.</p> <p>Par exemple :</p> <pre><code>&gt;&gt;&gt; bin(42)\n'0b101010'\n</code></pre> <p>Ici, on voit que l'\u00e9criture binaire de 42 est \\(101010\\). Le <code>0b</code> indique la base (<code>b</code> pour binaire, <code>o</code> pour octal, <code>x</code> pour hexad\u00e9cimal).</p> <p>Exercice 4</p> <p>Donner la repr\u00e9sentation en base 16 des entiers binaires suivants.</p> <ul> <li>1001010</li> <li>100010001</li> <li>1010010011110010</li> </ul> <p>Vous pourrez v\u00e9rifier vos r\u00e9ponses avec la fonction <code>hex</code> de Python. La fonction <code>hex</code> prend un nombre entier en entr\u00e9e, et renvoie la repr\u00e9sentation hexad\u00e9cimale de ce nombre.</p> <p>Par exemple :</p> <pre><code>&gt;&gt;&gt; hex(42)\n'0x2A'\n</code></pre> <p>Ici, on voit que l'\u00e9criture hexad\u00e9cimale de 42 est \\(2A\\). Le <code>0x</code> indique la base (<code>b</code> pour binaire, <code>o</code> pour octal, <code>x</code> pour hexad\u00e9cimal).</p> <p>Exercice 5</p> <p>Quelle est la valeur en base 10 de l\u2019entier qui s\u2019\u00e9crit \\(BEEF\\) en base 16 ? </p>"},{"location":"premiere/representation_donnees/cours_corr/#representation-des-entiers-relatifs","title":"Repr\u00e9sentation des entiers relatifs","text":"<p>La repr\u00e9sentation d\u2019un nombre sign\u00e9 s\u2019effectue selon une s\u00e9quence binaire d\u2019une longueur fix\u00e9e \u00e0 \\(n\\) bits. Cette longueur peut \u00eatre de 8 bits, de 16 bits ou de 32 bits.</p> <p>Plusieurs conventions de repr\u00e9sentation existent. Le choix de la convention est effectu\u00e9 par le constructeur de la machine, et \u00e9ventuellement par le programmeur en fonction du type affect\u00e9 aux variables d\u00e9clar\u00e9es. Dans le langage C par exemple, d\u00e9clarer une variable avec un type <code>int</code>, d\u00e9termine une repr\u00e9sentation sur 2 octets selon la convention du compl\u00e9ment \u00e0 2. Par ailleurs, une d\u00e9claration avec un type <code>unsigned short</code> d\u00e9termine une repr\u00e9sentation d\u2019un nombre sur 8 bits, non sign\u00e9.</p>"},{"location":"premiere/representation_donnees/cours_corr/#convention-de-la-valeur-signee","title":"Convention de la valeur sign\u00e9e","text":"<p>Dans cette convention, le bit de poids fort (c'est-\u00e0-dire celui qui est tout \u00e0 gauche de l'\u00e9criture) correspond au signe (\\(0\\) pour un entier positif, \\(1\\) pour un entier n\u00e9gatif). Tous les autres bits codent la valeur absolue du nombre.</p> <p>Exemple :</p> <ul> <li>Repr\u00e9sentation de \\(+ 77_{10}\\) sur 8 bits : \\(01001101_2\\).</li> <li>Repr\u00e9sentation de \\(\u2013 77_{10}\\) sur 8 bits : \\(11001101_2\\).</li> </ul> <p>On peut faire les remarques suivantes sur cette repr\u00e9sentation :</p> <ul> <li>deux repr\u00e9sentations de la valeur \\(0\\) sont possibles, l'une correspondant \u00e0 un z\u00e9ro positif (\\(00000000_2\\) = \\((+ 0)_{10}\\) sur 8 bits), l'autre \u00e0 un z\u00e9ro n\u00e9gatif (\\(10000000_2\\) = \\((\u2013 0)_{10}\\) sur \\(8\\) bits);</li> <li>l\u2019intervalle des nombres sign\u00e9s repr\u00e9sentables est born\u00e9 en fonction de la longueur de la cha\u00eene binaire utilis\u00e9e pour la repr\u00e9sentation. Sur \\(8\\) bits par exemple, l\u2019intervalle des nombres repr\u00e9sentables est \\([11111111_2, 01111111_2]\\), soit l\u2019intervalle \\([-127_{10}, + 127_{10}]\\). L\u2019arithm\u00e9tique des machines est donc diff\u00e9rente de celle de l\u2019\u00eatre humain puisque l\u2019intervalle des nombres n\u2019est pas infini, mais d\u00e9pend de la longueur des cha\u00eenes de bits manipul\u00e9es par la machine;</li> <li>pour effectuer une soustraction, il est n\u00e9cessaire d'utiliser un circuit particulier diff\u00e9rent de celui permettant d'effectuer des additions.</li> </ul> <p>Voici les valeurs repr\u00e9sentables avec cette convention selon la longueur de la chaine de bits fix\u00e9e :</p> Longueur de la chaine de bits Intervalle de base 10 \\(8\\) bits \\([- 127, + 127]\\) \\(16\\) bits \\([- 32 767, + 32 767]\\) \\(32\\) bits \\([\u2013 2 147 483 647, + 2 147 483 647]\\) \\(p\\) bits \\([\u2013 2^{p \u2013 1} \u2013 1, + 2^{p \u2013 1} \u2013 1]\\)"},{"location":"premiere/representation_donnees/cours_corr/#convention-du-complement-a-2","title":"Convention du compl\u00e9ment \u00e0 2","text":"<p>Le compl\u00e9ment \u00e0 2 ou compl\u00e9ment vrai d\u2019un nombre binaire \\(N = b_{n\u20131} ... b_0\\) s\u2019obtient en ajoutant la valeur \\(1\\) au compl\u00e9ment restreint ou compl\u00e9ment \u00e0 1 de ce nombre.</p> <p>Le compl\u00e9ment \u00e0 1 ou compl\u00e9ment restreint d\u2019un nombre binaire \\(N = b_{n-1} ... b_0\\) s\u2019obtient en inversant la valeur de chacun des bits de ce nombre.</p> <p>Exemple :</p> \\(10001001_2\\) compl\u00e9ment \u00e0 1 \\(01110110_2\\) + \\(1_2\\) compl\u00e9ment \u00e0 2 \\(01110111_2\\) <p>Dans la convention du compl\u00e9ment \u00e0 2, un nombre n\u00e9gatif \\(\u2013 N\\) exprim\u00e9 sur \\(n\\) bits est repr\u00e9sent\u00e9 en prenant le compl\u00e9ment \u00e0 2 de son \u00e9quivalent positif \\(+ N\\). Un nombre positif \\(+ N\\) est quant \u00e0 lui repr\u00e9sent\u00e9 par sa valeur binaire sur \\(n\\) bits.</p> <p>Exemple :</p> Repr\u00e9sentation de \\(+ 77_{10}\\) sur 8 bits : \\(01001101_2\\) Repr\u00e9sentation de \\(\u2013 77_{10}\\) sur 8 bits : \\(+ 77_{10}\\) \\(01001101_2\\) compl\u00e9ment restreint : \\(10110010_2\\) \\(+\\) \\(1_2\\) compl\u00e9ment vrai : \\(10110011_2\\) <p>On peut faire les remarques suivantes sur cette repr\u00e9sentation :</p> <ul> <li>une seule repr\u00e9sentation du z\u00e9ro est admise : \\(00000000_2\\) = \\((+ 0)_{10}\\) sur \\(8\\) bits.</li> <li>l\u2019intervalle des nombres sign\u00e9s repr\u00e9sentables est born\u00e9 en fonction de la longueur de la cha\u00eene binaire utilis\u00e9e pour la repr\u00e9sentation. Sur \\(8\\) bits par exemple, l\u2019intervalle des nombres repr\u00e9sentables est \\([10000000_2, 01111111_2]\\), soit l\u2019intervalle \\([\u2013 128_{10}, + 127_{10}]\\). La cha\u00eene \\(10000000_2\\) apr\u00e8s le compl\u00e9ment \u00e0 2 donne de nouveau la cha\u00eene \\(10000000_2\\). Par convention, elle repr\u00e9sente la valeur \\(- 128_{10}\\) ;</li> <li>pour effectuer une soustraction, il n'est pas n\u00e9cessaire d'utiliser un circuit particulier, puisque soustraire un nombre A \u00e0 un autre nombre B \u00e9quivaut \u00e0 additionner au nombre B le compl\u00e9ment \u00e0 2 du nombre A.</li> </ul> <p>Voici les valeurs repr\u00e9sentables avec cette convention selon la longueur de la chaine de bits fix\u00e9e :</p> Longueur de la chaine de bits Intervalle de base 10 \\(8\\) bits \\([- 128, + 127]\\) \\(16\\) bits \\([- 32 768, + 32 767]\\) \\(32\\) bits \\([\u2013 2 147 483 648, + 2 147 483 647]\\) \\(p\\) bits \\([\u2013 2^{p \u2013 1}, + 2^{p \u2013 1} \u2013 1]\\)"},{"location":"premiere/representation_donnees/cours_corr/#binaire-vers-decimal","title":"Binaire vers d\u00e9cimal","text":"<p>L'op\u00e9ration inverse, permettant de retrouver un entier cod\u00e9 avec la convention du compl\u00e9ment \u00e0 2, est assez simple \u00e0 effectuer.</p> <p>Le bit de poids fort (celui qui est tout \u00e0 gauche) de la cha\u00eene binaire peut \u00eatre \u00e9galement inter-pr\u00e9t\u00e9 comme bit de signe. Ainsi :</p> <ul> <li>s'il vaut \\(\\textbf{0}\\), alors la cha\u00eene binaire repr\u00e9sente un nombre positif \\(+ N\\) dont la valeur d\u00e9cimale est donn\u00e9e directement par la conversion de la cha\u00eene depuis la base 2 vers la base 10;</li> <li>s'il vaut \\(\\textbf{1}\\), alors la cha\u00eene binaire repr\u00e9sente un nombre n\u00e9gatif \\(\u2013 N\\) dont la valeur d\u00e9cimale est celle du nombre positif associ\u00e9 \\(+ N\\) obtenu en compl\u00e9mentant de nouveau \u00e0 2 la cha\u00eene, ou plus simplement en inversant tous les bits situ\u00e9s \u00e0 gauche de premier bit \u00e0 1 (en partant de la droite).</li> </ul> <p>Conversion binaire (compl\u00e9ment \u00e0 2) vers d\u00e9cimal</p> <p>\\(0011~0011_2\\) : Le bit de poids fort est \u00e0 0 (nombre positif), donc on convertit simplement vers la base 10 :</p> <p></p> \\(0011~0011_2 = 2^0 + 2^1 + 2^4 + 2^5 = 1 + 2 + 16 + 32 = + 51_{10}\\) <p>\\(1011~1100_2\\) : Le bit de poids fort est \u00e0 1 (nombre n\u00e9gatif), donc :</p> <ul> <li>soit on refait le compl\u00e9ment \u00e0 2,</li> <li>soit on inverse tous les bits situ\u00e9s \u00e0 gauche du premier bit \u00e0 1 en partant de la droite, ce qui donne ici : \\(\\textbf{1011 1}100_2 \u2192 \\textbf{0100 0}100_2\\). \\(0100~0100_2 = 68_{10}\\), donc il ne reste qu'\u00e0 ajouter le signe \\(-\\) </li> </ul> <p></p> \\(1011~1100_2 = - 68_{10}\\)"},{"location":"premiere/representation_donnees/cours_corr/#bit-de-carry","title":"Bit de carry","text":"<p>Lors d\u2019une op\u00e9ration arithm\u00e9tique effectu\u00e9e sur des nombres de \\(p\\) bits, un \\(p + 1er\\) bit peut \u00eatre g\u00e9n\u00e9r\u00e9. Ce bit suppl\u00e9mentaire de poids fort est m\u00e9moris\u00e9 comme \u00e9tant le bit de carry par un indicateur de 1 bit not\u00e9 \\(C\\) dans un registre du processeur appel\u00e9 registre d'\u00e9tat (PSW).</p> <p>Par exemple, l'addition de \\(0111~1111_2\\) (\\(+ 127\\)) et \\(1111~1110\\) (\\(- 2\\)) :</p> \\(0111\\) \\(1111_2\\) + \\(1111\\) \\(1110_2\\) 1 \\(0111\\) \\(1101_2\\) <p>Ici, le 9\u00e8me bit est le bit de carry.</p>"},{"location":"premiere/representation_donnees/cours_corr/#overflow","title":"Overflow","text":"<p>Lorsque l'on effectue une op\u00e9ration math\u00e9matique impliquant des nombres de m\u00eame signe et ayant chacun \\(p\\) bits, il est possible que le r\u00e9sultat d\u00e9passe la capacit\u00e9 de repr\u00e9sentation de la machine. En d'autres termes, ce r\u00e9sultat peut \u00eatre en dehors de la plage des nombres que la machine peut repr\u00e9senter en utilisant la convention choisie pour ces nombres sign\u00e9s.</p> <p>Dans de tels cas, le r\u00e9sultat obtenu est incorrect par rapport \u00e0 son interpr\u00e9tation pr\u00e9vue : on appelle cela un overflow ou un d\u00e9passement de capacit\u00e9. Tout comme le carry, la survenue d'un overflow est enregistr\u00e9e dans le registre d'\u00e9tat (PSW) du processeur \u00e0 l'aide d'un indicateur d'un bit, g\u00e9n\u00e9ralement not\u00e9 \\(O\\).</p> <p>Par exemple, si l'on effectue l'addition des nombres \\(+ 127_{10}\\) et \\(+ 2_{10}\\) repr\u00e9sent\u00e9s selon la convention du compl\u00e9ment \u00e0 2 :</p> \\(0111\\) \\(1111_2\\) + \\(0000\\) \\(0010_2\\) \\(1000\\) \\(0001_2\\) <p>Le r\u00e9sultat obtenu est le nombre \\(\u2013 127_{10}\\) et non pas la valeur attendue \\(+ 129_{10}\\). Il y a ici un d\u00e9passement de capacit\u00e9. En effet, l\u2019intervalle des nombres repr\u00e9sentables sur \\(8\\) bits selon la convention du compl\u00e9ment \u00e0 2 est \\([\u2013 127_{10}, + 127_{10}]\\).</p> <p>Pourquoi pr\u00e9f\u00e8re t-on cette convention ?</p> <p>La convention du compl\u00e9ment \u00e0 2 est g\u00e9n\u00e9ralement pr\u00e9f\u00e9r\u00e9e \u00e0 celle de la valeur sign\u00e9e pour les raisons suivantes :</p> <ol> <li> <p>Simplicit\u00e9 des op\u00e9rations arithm\u00e9tiques : Avec le compl\u00e9ment \u00e0 2, les op\u00e9rations arithm\u00e9tiques telles que l'addition et la soustraction fonctionnent de la m\u00eame mani\u00e8re que pour les nombres non sign\u00e9s, en utilisant le m\u00eame mat\u00e9riel de calcul. Cela simplifie consid\u00e9rablement la conception des circuits \u00e9lectroniques et les op\u00e9rations de base, car il n'est pas n\u00e9cessaire de traiter les cas sp\u00e9ciaux pour les nombres sign\u00e9s.</p> </li> <li> <p>Unicit\u00e9 de la repr\u00e9sentation : En utilisant le compl\u00e9ment \u00e0 2, chaque nombre a une repr\u00e9sentation unique. Cela signifie qu'il n'y a pas de valeur positive et n\u00e9gative qui se chevauchent, ce qui \u00e9vite les ambigu\u00eft\u00e9s.</p> </li> <li> <p>Facilit\u00e9 de conversion : La conversion entre nombres sign\u00e9s et non sign\u00e9s (et vice versa) est plus simple avec le compl\u00e9ment \u00e0 2 que avec d'autres m\u00e9thodes de repr\u00e9sentation sign\u00e9e. Il suffit d'appliquer le compl\u00e9ment \u00e0 2 sur un nombre n\u00e9gatif pour obtenir sa repr\u00e9sentation positive, et vice versa.</p> </li> <li> <p>Prise en charge native des op\u00e9rations binaires : Le compl\u00e9ment \u00e0 2 est id\u00e9al pour les ordinateurs, qui traitent naturellement les op\u00e9rations binaires. La repr\u00e9sentation en compl\u00e9ment \u00e0 2 facilite les op\u00e9rations bit \u00e0 bit, ce qui est essentiel pour la conception des processeurs.</p> </li> <li> <p>Gestion de l'overflow : Lorsque des op\u00e9rations arithm\u00e9tiques d\u00e9passent la capacit\u00e9 de stockage d'un registre, le compl\u00e9ment \u00e0 2 permet de g\u00e9rer naturellement les d\u00e9passements (overflow) sans n\u00e9cessiter de mat\u00e9riel ou de logiciel suppl\u00e9mentaire compliqu\u00e9.</p> </li> </ol> <p>Exercice 6</p> <p>Donner la repr\u00e9sentation en compl\u00e9ment \u00e0 2 et sur 8 bits des entiers -10, -128, -42 et 97.</p> <p>Exercice 7</p> <p>Donner en base 10 la valeur des octets sign\u00e9s \\(11100111\\) et \\(11000001\\).</p> <p>Plus d'exercices</p> <p>Vous pouvez \u00e9galement vous entra\u00eener sur les exercices propos\u00e9s \u00e0 la fin de cette page (IUT de Reims).</p>"},{"location":"premiere/representation_donnees/cours_corr/#addition-et-soustraction-de-nombres-entiers","title":"Addition et soustraction de nombres entiers","text":"<p>Pour additionner deux nombres entiers en \u00e9criture binaire, on utilise le m\u00eame principe que dans le syst\u00e8me d\u00e9cimal, en additionnant les chiffres un \u00e0 un, de droite \u00e0 gauche. La table d\u2019addition des nombres binaires est la suivante :</p> <ul> <li>0 + 0 = 0</li> <li>0 + 1 = 1</li> <li>1 + 0 = 1</li> <li>1 + 1 = 10, c\u2019est-\u00e0-dire 0 avec une retenue de 1</li> <li>1 + 1 + 1 = 11, c\u2019est-\u00e0-dire 1 avec une retenue de 1</li> </ul> <p>On souhaite par exemple additionner les entiers \\(42_{10} = 00101010_2\\) et \\(14_{10} = 00001110_2\\) :</p> (1) (1) (1) 0 0 1 0 1 0 1 0 (42) + 0 0 0 0 1 1 1 0 (14) = 0 0 1 1 1 0 0 0 (56) <p>Si l'on souhaite faire une soustraction, par exemple si l'on souhaite soustraire \\(14\\) \u00e0 \\(42\\), le plus simple est de faire une addition entre \\(42\\) et le compl\u00e9ment \u00e0 2 de \\(14\\). Le compl\u00e9ment \u00e0 2 de \\(14_{10} = 00001110_2\\) est \\(11110010_2\\), donc :</p> (1) (1) (1) (1) 0 0 1 0 1 0 1 0 (42) + 1 1 1 1 0 0 1 0 (-14) = 0 0 0 1 1 1 0 0 (28) <p>D\u00e9passement de capacit\u00e9 :</p> <p>L\u2019addition de deux nombres entiers peut d\u00e9passer la capacit\u00e9 de repr\u00e9sentation des mots binaires: en effet, pour repr\u00e9senter un nombre \\(n\\) en binaire, il faut \\(\\lceil log_2(n) \\rceil\\) bits. La somme de deux nombres \\(n\\) et \\(m\\) est inf\u00e9rieure ou \u00e9gale \u00e0 \\(2 \u00d7 max(n, m)\\), donc le nombre de bits n\u00e9cessaires pour repr\u00e9senter cette somme est, au plus : \\(\\lceil log_2(2 \u00d7 max (n,m)) \\rceil = \\lceil log_2(max(n,m) + 1) \\rceil\\), soit 1 bit de plus que le nombre de bits significatifs du plus grand des deux nombres.</p> <p>Il existe des solutions pour tester l'existence d'un d\u00e9passement, par exemple en utilisant un OU EXCLUSIF (xor) pour comparer la retenue entrante et la retenue sortante de l'addition des deux bits de poids fort. Il y a d\u00e9passement si ces deux bits sont oppos\u00e9s.</p>"},{"location":"premiere/representation_donnees/cours_corr/#representation-des-nombres-reels","title":"Repr\u00e9sentation des nombres r\u00e9els","text":"<p>Nous avons vu que le langage Python \u00e9tait capable de calculer des nombres d\u00e9cimaux particuliers appel\u00e9s nombres flottants (type <code>float</code>). Nous allons voir que ces nombres ont un encodage tr\u00e8s compact, ce codage pouvant \u00eatre sur 32 ou sur 64 bits, ce qui permet de repr\u00e9senter des nombres tr\u00e8s grands ou de tr\u00e8s petits nombres, bien au-del\u00e0 de ce qu\u2019il est possible de repr\u00e9senter avec un codage des entiers sur le m\u00eame nombre de bits.</p> <p>Pour repr\u00e9senter en binaire des nombres r\u00e9els (nombres avec une partie fractionnaire), il faut d\u00e9composer celle-ci en une somme de puissances inverses de 2 : \\(b_1 ... b_k\\) est la repr\u00e9sentation binaire de \\(d(0 \\lt d \\lt 1)\\) si : \\(d = b_1 \u00d7 2^{-1} + b_2 \u00d7 2^{-2} + b_3 \u00d7 2^{-3} + ... + b_k \u00d7 2^{-k}\\) \\(d = b_1 \u00d7 \\frac{1}{2} + b_2 \u00d7 \\frac{1}{2^2} + b_3 \u00d7 \\frac{1}{2\u00b3} + ... + b_k \u00d7 \\frac{1}{2^k}\\).</p> <p>Codage inexact</p> <p>Contrairement au codage de la partie enti\u00e8re, le codage de la partie d\u00e9cimale peut \u00eatre infini, de la m\u00eame fa\u00e7on que des nombres fractionnaires peuvent avoir une partie d\u00e9cimales infinie, comme par exemple \\(\\frac{1}{3} = 0,3333...\\).</p> <p>Il y a donc des nombres d\u00e9cimaux que l'on ne peut pas repr\u00e9senter de mani\u00e8re exacte en machine. Si l'on prend le nombre <code>0.3</code> par exemple, le nombre de bits n\u00e9cessaire pour le repr\u00e9senter est infini. Si on le repr\u00e9sente sur un octet par exemple, son \u00e9criture binaire serait <code>01001100</code>, soit : \\(0 \u00d7 \\frac{1}{2} + 1 \u00d7 \\frac{1}{4} + 0 \u00d7 \\frac{1}{8}+ 0 \u00d7 \\frac{1}{16} + 1 \u00d7 \\frac{1}{32} + 1 \u00d7 \\frac{1}{64} + 0 \u00d7 \\frac{1}{2} + 0 \u00d7 \\frac{1}{256}\\), ce qui vaut \\(0,296875\\).</p> <p>Les nombres r\u00e9els repr\u00e9sentables avec une partie d\u00e9cimale finie en binaire sont ceux dont le d\u00e9nominateur est une puissance de 2, comme \\(\\frac{1}{2}\\), \\(\\frac{1}{4}\\), \\(\\frac{1}{8}\\)...</p> <p>\u00c0 vous de jouer 1</p> <p>Essayez de saisir dans l'interpr\u00e9teur Python l'expression <code>0.1 + 0.2</code>. Que devriez-vous obtenir ? Qu'obtenez-vous, et pourquoi ?</p> <p>\u00c0 vous de jouer 2</p> <p>Quelle est la repr\u00e9sentation binaire du nombre r\u00e9el dont l'\u00e9criture d\u00e9cimale est \\(1.25\\) ? \\(12.125\\) ? \\(0.3\\) (sur 8 bits) ?</p> <p>\u00c0 vous de jouer 3</p> <p>Quelle est la repr\u00e9sentation d\u00e9cimale du nombre r\u00e9el dont l'\u00e9criture binaire est : \\(0.0101\\) ? \\(1011.00001\\) ?</p>"},{"location":"premiere/representation_donnees/cours_corr/#codage-en-virgule-fixe","title":"Codage en virgule fixe","text":"<p>Une approche initiale pour la repr\u00e9sentation des nombres r\u00e9els avec une partie fractionnaire est le codage en virgule fixe, o\u00f9 la partie enti\u00e8re et la partie d\u00e9cimale sont toutes deux repr\u00e9sent\u00e9es sur un nombre pr\u00e9alablement d\u00e9fini de bits, par exemple 8 bits chacune.</p> <p>Avec cette approche, pour encoder les nombres r\u00e9els n\u00e9gatifs, on utilise simplement le compl\u00e9ment \u00e0 2 apr\u00e8s avoir effectu\u00e9 le codage en virgule fixe du nombre positif \u00e9quivalent.</p> <p>Cependant, cette m\u00e9thode pr\u00e9sente des limitations importantes. Tout d'abord, l'intervalle de nombres que l'on peut repr\u00e9senter reste restreint, correspondant \u00e0 la plage d'entiers sur 8 bits, c'est-\u00e0-dire \\([-128, +127]\\). De plus, la repr\u00e9sentation de la partie d\u00e9cimale est \u00e9galement limit\u00e9e, avec la possibilit\u00e9 de repr\u00e9senter seulement \\(256\\) valeurs distinctes. En cons\u00e9quence il devient impossible de repr\u00e9senter tous les nombres r\u00e9els, tous les nombres d\u00e9cimaux, et m\u00eame des nombres \"simples\" tels que \\(0,1\\) de mani\u00e8re exacte. Seules quelques valeurs d\u00e9cimales sp\u00e9cifiques peuvent \u00eatre repr\u00e9sent\u00e9es pr\u00e9cis\u00e9ment, tandis que d'autres doivent \u00eatre approxim\u00e9es. Ces approximations sont la principale source d'erreurs de calcul.</p> <p></p> Voir des exemples d'encodage en virgule fixe"},{"location":"premiere/representation_donnees/cours_corr/#codage-en-virgule-flottante-norme-ieee-754","title":"Codage en virgule flottante - Norme IEEE 754","text":"<p>La norme IEEE 754 d\u00e9finit un format standardis\u00e9 qui vise \u00e0 unifier la repr\u00e9sentation des nombres flottants, qui est tr\u00e8s diverse selon les constructeurs.</p> <p>Formats de repr\u00e9sentation</p> <p>Cette norme propose deux formats de repr\u00e9sentation : un format simple pr\u00e9cision sur 32 bits et un format double pr\u00e9cision sur 64 bits.</p> <p></p> <p>En simple pr\u00e9cision, la cha\u00eene de 32 bits repr\u00e9sentant le nombre est d\u00e9compos\u00e9e en :</p> <ul> <li>1 bit de signe indiquant le signe de la mantisse, </li> <li>8 bits pour l\u2019exposant,</li> <li>23 bits pour le codage de la mantisse.</li> </ul> <p>En double pr\u00e9cision, la cha\u00eene de 64 bits repr\u00e9sentant le nombre est d\u00e9compos\u00e9e en :</p> <ul> <li>1 bit de signe indiquant le signe de la mantisse, </li> <li>11 bits pour l\u2019exposant,</li> <li>52 bits pour le codage de la mantisse.</li> </ul> <p>Repr\u00e9sentation d'un nombre flottant</p> <p>La repr\u00e9sentation d\u2019un nombre flottant selon la norme IEEE 754 est similaire \u00e0 l\u2019\u00e9criture scientifique d\u2019un nombre d\u00e9cimal, \u00e0 savoir une d\u00e9composition en trois parties : un signe \\(s\\), une mantisse \\(m\\) et un exposant \\(n\\). De mani\u00e8re g\u00e9n\u00e9rale, un nombre flottant a la forme suivante :</p> <p></p> \\((\u22121)^sm \u00d7 2^{(n\u2212d)}\\) <p>La norme IEEE 754 pr\u00e9sente quelques diff\u00e9rences avec l\u2019\u00e9criture scientifique :</p> <ul> <li>la base choisie est maintenant la base 2,</li> <li>la mantisse est maintenant dans l\u2019intervalle \\([1, 2[\\),</li> <li>l\u2019exposant \\(n\\) est d\u00e9cal\u00e9 (ou biais\u00e9) d\u2019une valeur \\(d\\) qui d\u00e9pend du format choisi (32 ou 64 bits).</li> </ul>"},{"location":"premiere/representation_donnees/cours_corr/#bit-de-signe","title":"Bit de signe","text":"<p>Le signe \\(s\\) est cod\u00e9 sur un bit (le bit de poids fort de l\u2019entier de 32 bits ou de 64 bits) : ce bit vaut \\(0\\) si le nombre repr\u00e9sent\u00e9 est positif, et \\(1\\) s'il est n\u00e9gatif.</p>"},{"location":"premiere/representation_donnees/cours_corr/#exposant","title":"Exposant","text":"<p>Pour pouvoir repr\u00e9senter \u00e0 la fois des exposants positifs et n\u00e9gatifs dans la norme IEEE 754, une m\u00e9thode diff\u00e9rente du compl\u00e9ment \u00e0 2 est employ\u00e9e. Cette m\u00e9thode consiste \u00e0 stocker l'exposant sous une forme d\u00e9cal\u00e9e, en tant qu'entier non sign\u00e9. Plus pr\u00e9cis\u00e9ment, l'exposant d\u00e9cal\u00e9, not\u00e9 \\(n\\), est repr\u00e9sent\u00e9 par un entier de 8 bits pouvant prendre des valeurs entre \\(0\\) et \\(255\\) :</p> <ul> <li>dans le format 32 bits, ce d\u00e9calage est de \\(d = +127_{10}\\), ce qui permet de repr\u00e9senter des exposants sign\u00e9s dans l'intervalle \\([-127_{10}, + 128_{10}]\\). Toutefois, les valeurs \\(0_{10}\\) et \\(255_{10}\\) sont r\u00e9serv\u00e9es pour repr\u00e9senter des cas sp\u00e9ciaux, donc les exposants sign\u00e9s r\u00e9ellement utilisables se situent dans l'intervalle \\([-126_{10}, + 127_{10}]\\),</li> <li>dans le format 64 bits, ce d\u00e9calage est de \\(d = +1023_{10}\\), ce qui permet de repr\u00e9senter des exposants sign\u00e9s dans l'intervalle \\([-1023_{10}, + 1024_{10}]\\). Toutefois, les valeurs \\(0_{10}\\) et \\(2047_{10}\\) sont r\u00e9serv\u00e9es pour repr\u00e9senter des cas sp\u00e9ciaux, donc les exposants sign\u00e9s r\u00e9ellement utilisables se situent dans l'intervalle \\([-1022_{10}, + 1023_{10}]\\),</li> <li>de mani\u00e8re g\u00e9n\u00e9rale, pour un exposant stock\u00e9 sur un nombre \\(n\\) de bits, le d\u00e9calage sera de \\(2^{n - 1} - 1\\).</li> </ul>"},{"location":"premiere/representation_donnees/cours_corr/#mantisse","title":"Mantisse","text":"<p>La mantisse \\(m\\) est toujours comprise dans l\u2019intervalle \\([1, 2[\\), et repr\u00e9sente un nombre de la forme \\(1, xx . . . xx\\), c\u2019est-\u00e0-dire un nombre commen\u00e7ant n\u00e9cessairement par le chiffre 1. Par cons\u00e9quent, pour gagner 1 bit de pr\u00e9cision, les 23 bits (en simple pr\u00e9cision) ou 52 bits (en double pr\u00e9cision) d\u00e9di\u00e9s \u00e0 la mantisse sont uniquement utilis\u00e9s pour repr\u00e9senter les chiffres apr\u00e8s la virgule, qu\u2019on appelle la fraction de la mantisse.</p> <p>Ainsi, si les 23 bits d\u00e9di\u00e9s \u00e0 la mantisse sont \\(b_1 b_2 . . . b_{23}\\) , alors la mantisse repr\u00e9sente le nombre \\(1 + b_1 \u00d7 2^{\u22121} + b_2 \u00d7 2^{\u22122} + \u00b7 \u00b7 \u00b7 + b_{23} \u00d7 2^{\u221223}\\).</p> <p>Repr\u00e9sentation normalis\u00e9e d'un nombre flottant</p> <p>Ainsi, avec la mantisse sous sa forme normalis\u00e9e, les nombres flottants seront repr\u00e9sent\u00e9s comme suit.</p> <p>Sur 32 bits :</p> <p></p> \\((\u22121)^s \\times 1, f \\times 2^{(e\u2212127)}\\) <p>Sur 64 bits :</p> <p></p> \\((\u22121)^s \\times 1, f \\times 2^{(e\u22121023)}\\) <p>o\u00f9 \\(s\\) est le bit de signe, \\(f\\) est la fraction de la mantisse et \\(e\\) est l'exposant.</p> <p>Conversion binaire (virgule flottante) \u2192 d\u00e9cimal (extrait du Balabonski Premi\u00e8re)</p> <p>Voici un mot de 32 bits et le nombre d\u00e9cimal qu'il repr\u00e9sente.</p> <p></p> <p>Pour voir des exemples suppl\u00e9mentaires : </p> IUT de Reims - Virgule flottante \u2192 d\u00e9cimal"},{"location":"premiere/representation_donnees/cours_corr/#recapitulatif-des-encodages","title":"R\u00e9capitulatif des encodages","text":"exposant (\\(e\\)) fraction (\\(f\\)) valeur \\(32\\) bits 8 bits 23 bits \\((\u22121)^s \u00d7 1, f \u00d7 2^{(e\u2212127)}\\) \\(64\\) bits 11 bits 52 bits \\((\u22121)^s \u00d7 1, f \u00d7 2^{(e\u22121023)}\\) <p>En simple pr\u00e9cision (32 bits), les nombres flottants positifs peuvent repr\u00e9senter les nombres d\u00e9cimaux compris (approximativement) dans l\u2019intervalle \\([10^{\u221238}, 10^{38}]\\).</p> <p>En double pr\u00e9cision (64 bits), cet intervalle est (approximativement) de \\([10^{\u2212308}, 10^{308}]\\).</p> <p>Conversion d\u00e9cimal \u2192 binaire (virgule flottante)</p> <p>On cherche \u00e0 repr\u00e9senter le nombre \\(\u2013 10,125_{10}\\) selon le format IEEE 754 simple pr\u00e9cision.</p> <p>\\(10,125_{10} = 1010,001_{2} = 1,010001_{2} \u00d7 2^3\\).</p> <p>L\u2019exposant \\(e = 3\\) est translat\u00e9 de la valeur \\(+127_{10}\\). \\(e' = e + 127_{10} = 130_{10} = 10000010_2\\).</p> <p>Le signe de la mantisse est n\u00e9gatif et vaut donc 1.</p> <p>Finalement, le codage du nombre \\(- 10,125_{10}\\) donne la cha\u00eene binaire suivante : \\(1~10000010~01000100000000000000000_2 = C1220000_{16}\\)</p> <p>Pour plus de d\u00e9tails sur ce codage et des exemples suppl\u00e9mentaires : </p> IUT de Reims - Codage en virgule flottante"},{"location":"premiere/representation_donnees/cours_corr/#valeurs-speciales","title":"Valeurs sp\u00e9ciales","text":"signe exposant fraction valeur sp\u00e9ciale 0 0 0 \\(+0\\) 1 0 0 \\(-0\\) 0 255 0 \\(+\\infty\\) 1 255 0 \\(-\\infty\\) 0 255 \\(\\ne 0\\) \\(NaN\\)"},{"location":"premiere/representation_donnees/cours_corr/#nombres-denormalises","title":"Nombres d\u00e9normalis\u00e9s","text":"<p>Comme vu pr\u00e9c\u00e9demment, si l\u2019exposant \\(e\\) d\u2019un nombre flottant (sur 32 bits) est compris entre \\(1\\) et \\(254\\), la valeur repr\u00e9sent\u00e9e par l\u2019encodage est :</p> <p></p> \\((\u22121)^s \\times 1, f \\times 2^{(e\u2212127)}\\) <p>Les nombres repr\u00e9sent\u00e9s ainsi sont dits normalis\u00e9s. Avec cet encodage, le plus petit nombre d\u00e9cimal positif repr\u00e9sentable est donc \\(2^{\u2212126}\\) (soit \\(\u223c 10^{\u221238}\\)).</p> <p>\u00c9tant donn\u00e9 que la mantisse est implicitement de la forme \\(1, f\\) , il n\u2019y a pas de nombres repr\u00e9sentables dans l\u2019intervalle \\([0, 2^{\u2212126} [\\), l\u00e0 o\u00f9 il y en a \\(2^{23}\\) dans l\u2019intervalle \\([1 \u00d7 2^{\u2212126} , 2 \\times 2^{\u2212126}]\\) = \\([2^{\u2212126} , 2^{\u2212125}]\\).</p> <p>Afin de pouvoir repr\u00e9senter des tr\u00e8s petits nombres, la norme IEEE 754 permet d\u2019encoder des nombres de la forme suivante, avec une mantisse commen\u00e7ant implicitement par un \\(0\\) au lieu d'un \\(1\\) :</p> <p></p> \\((\u22121)^s \\times 0, f \\times 2^{\u2212126}\\) <p>On appelle ces nombres flottants des nombres d\u00e9normalis\u00e9s, dont :</p> <ul> <li>l'exposant \\(e\\) est \u00e0 \\(0\\),</li> <li>la fraction de la mantisse est diff\u00e9rente de \\(0\\). </li> </ul> <p>La plus petite valeur repr\u00e9sentable avec des nombres d\u00e9normalis\u00e9s est ainsi : \\(2^{\u221223} \u00d7 2^{\u2212126} = 2^{\u2212149}\\) repr\u00e9sent\u00e9e par la cha\u00eene binaire \\(0~00000000~00000000000000000000001_2\\).</p>"},{"location":"premiere/representation_donnees/cours_corr/#exercices","title":"Exercices","text":"<p>Exercice 8</p> <p>Donner la repr\u00e9sentation flottante en simple pr\u00e9cision de \\(128\\) et \\(\u221232,75\\).</p> <p>Exercice 9</p> <p>Donner la valeur d\u00e9cimale des nombres flottants suivants cod\u00e9s en simple pr\u00e9cision :</p> <ul> <li>\\(1~01111110~11110000000000000000000\\),</li> <li>\\(0~10000011~11100000000000000000000\\).</li> </ul> <p>Plus d'exercices</p> <p>Vous pouvez \u00e9galement vous entra\u00eener sur les exercices propos\u00e9s par l'IUT de Reims :</p> <ul> <li>D\u00e9cimal \u2192 virgule flottante : exercices \u00e0 la fin de cette page</li> <li>Virgule flottante \u2192 d\u00e9cimal : exercices \u00e0 la fin de cette page</li> </ul>"},{"location":"premiere/representation_donnees/cours_corr/#representation-des-textes","title":"Repr\u00e9sentation des textes","text":"<p>La repr\u00e9sentation des caract\u00e8res dans un ordinateur permet de stocker ou d'\u00e9changer des textes. </p> <p>Th\u00e9oriquement, cela consiste simplement \u00e0 associer un num\u00e9ro unique \u00e0 chaque caract\u00e8re. Toutefois, le choix de la norme d'encodage utilis\u00e9e n\u00e9cessite de respecter certaines contraintes. Tout d\u2019abord, il faut que tous les ordinateurs utilisent le m\u00eame encodage. Ensuite, on doit pouvoir repr\u00e9senter le plus de caract\u00e8res possible, des caract\u00e8res \u00e9ditables comme des lettres majuscules et minuscules, des signes de ponctuation et signes math\u00e9matiques, mais aussi des caract\u00e8res dits \u00ab non imprimables \u00bb, qui peuvent correspondre \u00e0 des actions comme celle permettant de passer \u00e0 la ligne ou d'\u00e9mettre un beep, mais aussi \u00e0 des commandes de protocoles de communication comme accuser r\u00e9ception, d\u00e9but de texte, etc. Par ailleurs, le but est \u00e9galement d'\u00eatre le plus compact possible pour \u00e9conomiser la m\u00e9moire ou le volume des \u00e9changes r\u00e9seaux.</p>"},{"location":"premiere/representation_donnees/cours_corr/#norme-ascii","title":"Norme ASCII","text":"Table ASCII standard <p>Le codage ASCII (American Standard Code for Information Interchange) est un codage \u00e0 7 bits qui permet donc de repr\u00e9senter 128 caract\u00e8res. Chacun des codes associ\u00e9s \u00e0 un caract\u00e8re est donn\u00e9 dans une table \u00e0 deux entr\u00e9es, la premi\u00e8re entr\u00e9e codant la valeur du quartet de poids faible et la seconde entr\u00e9e codant la valeur des 3 bits de poids fort du code associ\u00e9 au caract\u00e8re.</p> <p>Le caract\u00e8re <code>A</code> est cod\u00e9 par la cha\u00eene \\(100~0001_2\\) soit le code hexad\u00e9cimal \\(41_{16}\\).</p> <p>Le code ASCII est notamment tr\u00e8s utilis\u00e9 sur les processeurs de la famille Intel.</p> <p>La table ASCII contient plusieurs cat\u00e9gories de caract\u00e8res :</p> <ul> <li>les lettres de l\u2019alphabet latin en majuscule (entre \\(41\\) et \\(5A\\)) et en minuscule (entre \\(61\\) et \\(7A\\)) ;</li> <li>les chiffres de \\(0\\) \u00e0 \\(9\\) (entre \\(30\\) et \\(39\\)) ;</li> <li>des signes de ponctuations (comme la virgule <code>,</code> qui vaut \\(2C\\)), des parenth\u00e8ses ou des crochets (comme le symbole <code>(</code> qui vaut \\(28\\) ou le crochet ouvrant <code>[</code> qui vaut \\(5B\\)) ;</li> <li>des op\u00e9rateurs arithm\u00e9tiques (comme le signe <code>+</code> qui vaut \\(2B\\)).</li> </ul> <p>La table ASCII contient \u00e9galement des caract\u00e8res sp\u00e9ciaux :</p> <p>Quelques caract\u00e8res sp\u00e9ciaux</p> caract\u00e8re num\u00e9ro signification HT 09 Tabulation horizontale LF 0A Nouvelle ligne VT 0B Tabulation verticale FF 0C Nouvelle page CR 0D Retour chariot SP 20 Espace BS 08 Suppression DEL 7F Effacement <p>Elle contient \u00e9galement des caract\u00e8res de contr\u00f4le non imprimables, par exemple :</p> <p>Quelques caract\u00e8res de contr\u00f4le</p> caract\u00e8re num\u00e9ro signification SOH 01 D\u00e9but d\u2019ent\u00eate STX 02 D\u00e9but de texte ETX 03 Fin de texte EOT 04 Fin de transmission ENQ 05 Demande ACK 06 Accus\u00e9 de r\u00e9ception DC1 11 Contr\u00f4le de p\u00e9riph\u00e9rique 1 BEL 07 Son sur le haut-parleur <p>Bit de parit\u00e9</p> <p>M\u00eame si 7 bits suffisent pour repr\u00e9senter 128 caract\u00e8res (de <code>000 0000</code> \u00e0 <code>111 1111</code>), en pratique chaque caract\u00e8re occupe 1 octet (8 bits) en m\u00e9moire. Le bit de poids fort est utilis\u00e9 pour effectuer une somme de contr\u00f4le afin de d\u00e9tecter d\u2019\u00e9ventuelles erreurs de transmission. L'id\u00e9e est de fixer la valeur de ce bit de mani\u00e8re \u00e0 ce que le nombre de bits \u00e0 <code>1</code> dans l\u2019octet soit toujours pair. C\u2019est la raison pour laquelle on appelle ce bit le bit de parit\u00e9.</p> <p>ASCII et Python</p> <p>La fonction ord de Python renvoie le code ASCII correspondant \u00e0 un caract\u00e8re. L\u2019entier renvoy\u00e9 est en base 10, mais on peut le convertir en hexad\u00e9cimal avec la fonction <code>hex</code>.</p> <pre><code>&gt;&gt;&gt; ord(\u2019A\u2019)\n65\n&gt;&gt;&gt; hex(ord(\u2019A\u2019))\n'0x41'\n</code></pre> <p>Inversement, la fonction chr renvoient le caract\u00e8re correspondant \u00e0 un entier.</p> <pre><code>&gt;&gt;&gt; chr(0x26)\n\u2019&amp;\u2019\n</code></pre> <p>Les caract\u00e8res peuvent \u00e9galement \u00eatre saisis directement par leur code ASCII en utilisant la notation \\xhh, o\u00f9 hh est le code hexad\u00e9cimal du caract\u00e8re.</p> <pre><code>&gt;&gt;&gt; print(\u2019\\x43e\\x63i es\\x74...\u2019)\nCeci est...\n</code></pre> <p>Exercice 10</p> <p>Donner le codage ASCII (en hexad\u00e9cimal et binaire) des deux cha\u00eenes de caract\u00e8res Python ci-dessous :</p> <ul> <li><code>\u2019bonjour tout le monde!\u2019</code></li> <li><code>\u2019\u2019\u2019programmer en Python\u2019\u2019\u2019</code></li> </ul> <p>Exercice 11</p> <p>\u00c9crire une fonction <code>printASCII(s)</code> qui affiche \u00e0 l\u2019\u00e9cran les codes ASCII au format hexad\u00e9cimal d\u2019une cha\u00eene de caract\u00e8res. Utiliser cette fonction pour v\u00e9rifier les r\u00e9ponses \u00e0 l\u2019exercice pr\u00e9c\u00e9dent.</p>"},{"location":"premiere/representation_donnees/cours_corr/#normes-iso-8859","title":"Normes ISO 8859","text":"<p>Les caract\u00e8res imprimables de la table ASCII se sont r\u00e9v\u00e9l\u00e9s rapidement insuffisants pour repr\u00e9senter efficacement des textes dans des langues autres que l'anglais. Cela est particuli\u00e8rement \u00e9vident pour les langues utilisant l'alphabet latin, car la table ASCII ne prend pas en compte de nombreux \u00e9l\u00e9ments tels que les lettres accentu\u00e9es et les symboles de monnaie. Pour r\u00e9soudre cette limitation, l'ISO (Organisation Internationale de Normalisation) a introduit la norme ISO 8859, une extension de l'ASCII qui utilise huit bits par octet pour repr\u00e9senter les caract\u00e8res, permettant ainsi un total de 256 caract\u00e8res encod\u00e9s. Malgr\u00e9 cette expansion, cela reste encore insuffisant pour englober tous les caract\u00e8res utilis\u00e9s dans les langues latines.</p> <p>Afin de maximiser la repr\u00e9sentation des caract\u00e8res, la norme ISO 8859 propose plusieurs tables de correspondance, \u00e9galement appel\u00e9es pages et not\u00e9es ISO-8859-n, o\u00f9 n repr\u00e9sente le num\u00e9ro de la table. Bien que ces tables soient ind\u00e9pendantes les unes des autres, elles ont \u00e9t\u00e9 con\u00e7ues pour \u00eatre compatibles entre elles. Les premiers 128 caract\u00e8res correspondent \u00e0 la norme ASCII, tandis que les 128 suivants sont sp\u00e9cifiques \u00e0 la table n. De plus, les caract\u00e8res identiques ont le m\u00eame code.</p> <p>La norme 8859 inclut un total de seize tables, dont dix sont d\u00e9di\u00e9es aux langues latines. Plut\u00f4t que de les r\u00e9f\u00e9rencer par leur nomenclature ISO, elles sont parfois appel\u00e9es latin-1, latin-2, etc.</p> <p> </p> Tables de la norme 8859"},{"location":"premiere/representation_donnees/cours_corr/#norme-unicode","title":"Norme Unicode","text":"<p>Les pages ISO-8859-n, bien qu'elles permettent un encodage \u00e9tendu, ne conviennent pas pour les textes avec un m\u00e9lange de caract\u00e8res provenant de diff\u00e9rentes pages. Pour rem\u00e9dier \u00e0 cela, l'ISO a introduit l'Universal Character Set (UCS) sous la norme ISO-10646. Cette norme attribue \u00e0 chaque caract\u00e8re un nom unique et un num\u00e9ro appel\u00e9 point de code. Elle recense plus de 110 000 caract\u00e8res et peut contenir ceux de n'importe quelle langue, avec une capacit\u00e9 maximale de 4 294 967 295 caract\u00e8res.</p> <p>Les 256 premiers points de code de l'ISO-8859-1 sont inclus par souci de compatibilit\u00e9. La notation \\(U+xxxx\\) repr\u00e9sente les points de code du jeu universel de caract\u00e8res, o\u00f9 chaque \\(x\\) est un chiffre hexad\u00e9cimal. Par exemple, \\(U+006F\\) d\u00e9signe le point de code de la lettre \"o\".</p> <p>UNICODE reprend le codage ASCII concernant les principaux caract\u00e8res, en \u00e9tendant le code \u00e0 16 bits. Ainsi, le caract\u00e8re <code>A</code> a pour point de code \\(0041_{16}\\).</p> <p>Unicode, cr\u00e9\u00e9 en 1991 et encore en d\u00e9veloppement, comporte d\u00e9j\u00e0 137 374 caract\u00e8res d\u2019une centaine d\u2019\u00e9critures dont les id\u00e9ogrammes, l\u2019alphabet grec etc.</p> <p>La norme Unicode d\u00e9finit plusieurs techniques d'encodage pour repr\u00e9senter les points de code de mani\u00e8re plus ou moins \u00e9conomique, selon la technique choisie. Ces encodages, appel\u00e9s formats de transformation universelle ou Universal Transformation Format (UTF) en anglais, portent les noms UTF-n, o\u00f9 n indique le nombre minimal de bits utilis\u00e9s pour repr\u00e9senter un point de code.</p>"},{"location":"premiere/representation_donnees/cours_corr/#utf-8","title":"UTF-8","text":"<p>C\u2019est le format le plus utilis\u00e9 sous Linux, dans les protocoles r\u00e9seaux et les sites Web. Comme son nom l\u2019indique, il faut seulement 8 bits pour coder les principaux caract\u00e8res. L\u2019UTF-8 est enti\u00e8rement compatible avec le standard ASCII, c\u2019est-\u00e0-dire que les 127 premiers caract\u00e8res sont repr\u00e9sent\u00e9s sur 1 octet, exactement comme en ASCII. Les programmes fonctionnant sur des textes encod\u00e9s en ASCII devraient \u00e9galement fonctionner si ces textes sont encod\u00e9s en UTF-8.</p> <p>L\u2019unicode et en particulier UTF-8 vise \u00e0 :</p> <ul> <li>minimiser l\u2019espace occup\u00e9 par un caract\u00e8re</li> <li>proposer un encodage adaptable \u00e0 tous les caract\u00e8res employ\u00e9s sur terre</li> <li>conserver l\u2019ordre de la table ascii de d\u00e9part</li> </ul> <p>UTF-8 est utilis\u00e9 par 90,5% des sites web en 2017 et dans la majorit\u00e9 des syst\u00e8mes UNIX.</p> <p>Principe de l'encodage UTF-8</p> <p>Le principe de l\u2019encodage UTF-8 est le suivant :</p> <ul> <li>Si le bit de poids fort d\u2019un octet est \u00e0 0, alors il s\u2019agit d\u2019un caract\u00e8re ASCII cod\u00e9 sur les 7 bits restant.</li> <li>Sinon, les premiers bits de poids fort de l\u2019octet indiquent le nombre d\u2019octets utilis\u00e9s pour encoder le caract\u00e8re \u00e0 l\u2019aide d\u2019une s\u00e9quence de bits \u00e0 1 et se terminant par un bit \u00e0 0. Par exemple, si le premier octet commence par \\(110xxxxx\\), cela signifie que le caract\u00e8re est cod\u00e9 par 2 octets puisqu\u2019il commence par une s\u00e9quence de deux bits de poids fort \u00e0 1 suivie d\u2019un 0. De m\u00eame, si le premier octet commence par \\(1110xxxx\\), cela signifie que le caract\u00e8re est cod\u00e9 par 3 octets.</li> <li>Enfin, dans le cas d\u2019un encodage sur \\(k\\) octets, les \\(k \u2212 1\\) octets qui suivent l\u2019octet de poids fort doivent tous \u00eatre de la forme \\(10xxxxxx\\), c\u2019est-\u00e0-dire commencer par deux bits de poids fort valant \\(10\\).</li> </ul> <p>Voici un tableau r\u00e9sumant le principe de l\u2019encodage UTF-8, avec la plage des caract\u00e8res repr\u00e9sentables selon le nombre d\u2019octets utilis\u00e9s.</p> <p> </p> Principe de l'encodage UTF-8 <p>Et voici quelques exemples de repr\u00e9sentations de points de code selon le format UTF-8 :</p> <p> </p> Exemples de repr\u00e9sentations selon UTF-8 <p>Exercice 12</p> <p>Sachant que le point de code du symbole <code>\u00e9</code> est \\(233\\), donner la s\u00e9quence de points de code du mot <code>\u00e9l\u00e9gance</code>, puis les octets en binaire correspondant \u00e0 l\u2019encodage UTF-8 de ce mot.</p> <p>Voici comment proc\u00e9der :</p> <ul> <li>Chercher le point de code de chaque lettre en hexad\u00e9cimal et en binaire.</li> <li>En vous aidant de la table Principe de l'encodage UTF-8 ci-dessus, retrouver l'encodage en UTG-8 de chaque symbole en choisissant le bon nombre d'octets. On rappelle que les symboles pr\u00e9sents dans la table ASCII (comme les lettres de <code>a</code> \u00e0 <code>z</code>) sont cod\u00e9s sur un seul octet, donc avec 7 bits codants.</li> <li>Enfin, \u00e9crire les octets en binaire correspondant \u00e0 l'encodage du mot complet.</li> </ul> <p>Exercice 13</p> <p>Pour chacun des caract\u00e8res suivants, dont le point de code est donn\u00e9 en d\u00e9cimal, donner l\u2019encodage UTF-8 du caract\u00e8re, en donnant les octets en d\u00e9cimal et en hexad\u00e9cimal.</p> <ol> <li>caract\u00e8re <code>A</code> (point de code \\(65\\))</li> <li>caract\u00e8re <code>\u00e8</code> (point de code \\(232\\))</li> <li>caract\u00e8re (\u00e9toile) (point de code \\(8902\\))</li> </ol>"},{"location":"premiere/representation_donnees/exercices/","title":"Exercices et notebooks","text":""},{"location":"premiere/representation_donnees/exercices/#exercices-representation-des-donnees","title":"Exercices - Repr\u00e9sentation des donn\u00e9es","text":"<p>Voici quelques notebooks contenant des exercices relatifs au cours sur la repr\u00e9sentation des donn\u00e9es en machine.</p>"},{"location":"premiere/representation_donnees/exercices/#exercices-dentrainement","title":"Exercices d'entra\u00eenement","text":"<p>Voici quelques exercices basiques sur les conversions de base, la repr\u00e9sentation des entiers naturels (non-sign\u00e9s) et des entiers relatifs (sign\u00e9s).</p> <p>Acc\u00e9der aux notebooks sur Capytale</p> <p>Cliquez sur les liens ci-dessous pour acc\u00e9der aux notebooks d'exercices sur Capytale.</p> <ul> <li>Repr\u00e9sentation binaire d'un entier positif</li> <li>Repr\u00e9sentation binaire d'un entier relatif</li> </ul> <p>D'apr\u00e8s des notebooks propos\u00e9s par Romain PLANCHAIS.</p>"},{"location":"premiere/representation_donnees/exercices/#exercices-de-programmation","title":"Exercices de programmation","text":"<p>Les exercices contenus dans les notebooks suivants consistent en la r\u00e9alisation de diff\u00e9rents programmes Python en lien avec la repr\u00e9sentation des donn\u00e9es en machine.</p> Notebook Description Propos\u00e9 par : Codage binaire - Entiers naturels Exercices Python sur la repr\u00e9sentation des entiers naturels. Jacques CHOUTEAU Codage binaire - Entiers relatifs Exercices Python sur la repr\u00e9sentation des entiers relatifs. Jacques CHOUTEAU Codage binaire - Nombres r\u00e9els Exercices Python sur la repr\u00e9sentation des nombres r\u00e9els. Jacques CHOUTEAU Codage caract\u00e8res - ASCII Exercices Python sur le codage ASCII. Erwan DEMERVILLE"},{"location":"terminale/","title":"NSI - Terminale","text":""},{"location":"terminale/#nsi-terminale","title":"NSI - Terminale","text":"Liste des contenus Description Modularit\u00e9 Cr\u00e9ation et utilisation de modules et d'API. Mise au point des programmes Types de donn\u00e9es, annotations, tests... Programmation orient\u00e9e objet D\u00e9couverte des classes en Python.  Sujet e3c de rentr\u00e9e corrig\u00e9 Le sujet d'e3c de rentr\u00e9e avec correction d\u00e9taill\u00e9e.  R\u00e9visions / Entra\u00eenement Python Quelques exercices pour vous exercer au langage Python."},{"location":"terminale/e3c/","title":"Corrig\u00e9 sujet 6 e3c","text":""},{"location":"terminale/e3c/#corrige-sujet-6-e3c","title":"Corrig\u00e9 sujet 6 e3c","text":"<p>Sujet</p> <p></p> T\u00e9l\u00e9charger le sujet <p>Source de la correction</p> <p>Ce corrig\u00e9 est propos\u00e9 par @Messieu_Rayan du Coll\u00e8ge-Lyc\u00e9e La Jonch\u00e8re. Cliquez ici pour consulter le PDF d'origine.</p>"},{"location":"terminale/e3c/#theme-a-types-de-base","title":"Th\u00e8me A : Types de Base","text":"<p>Question A1</p> <p>R\u00e9ponse D.</p> <p>Justification : La repr\u00e9sentation binaire de \\(-126\\) en compl\u00e9ment \u00e0 deux sur 8 bits est <code>10010010</code>, qui est l'inverse du nombre <code>01101101</code> (\\(65\\) en d\u00e9cimal) plus \\(1\\).</p> <p>Question A2</p> <p>R\u00e9ponse D.</p> <p>Justification : L'expression <code>True or (True and False)</code> renvoie <code>True</code>, car l'op\u00e9rateur <code>or</code> renvoie <code>True</code> si l'une des op\u00e9randes est <code>True</code>.</p> <p>Question A3</p> <p>R\u00e9ponse B.</p> <p>Justification : Le codage en compl\u00e9ment \u00e0 2 est utilis\u00e9 pour repr\u00e9senter des nombres entiers n\u00e9gatifs en binaire.</p> <p>Question A4</p> <p>R\u00e9ponse B.</p> <p>Justification : L'op\u00e9ration \\((a^b) = (2^3)\\) donne \\(8\\), et \\((8%3)\\) (le reste de la division de \\(8\\) par \\(3\\)) donne \\(2\\). Donc, la valeur de <code>d</code> est \\(2\\).</p> <p>Question A5</p> <p>R\u00e9ponse C.</p> <p>Justification : \"Arial\" est un nom de police de caract\u00e8res, pas une m\u00e9thode d'encodage des caract\u00e8res. Les autres options (UTF-16, ASCII, Unicode) sont des m\u00e9thodes d'encodage.</p> <p>Question A6</p> <p>R\u00e9ponse A.</p> <p>Justification : L'expression <code>x == 3 or y == 5</code> renvoie <code>True</code>, car <code>x</code> est \u00e9gal \u00e0 \\(3\\) m\u00eame si <code>y</code> n'est pas \u00e9gal \u00e0 \\(5\\).</p>"},{"location":"terminale/e3c/#theme-b-types-construits","title":"Th\u00e8me B : Types Construits","text":"<p>Question B1</p> <p>R\u00e9ponse A.</p> <p>Justification : La fonction renvoie le maximum de la liste <code>L</code>, car elle parcourt <code>L</code> et met \u00e0 jour <code>m</code> chaque fois qu'elle trouve un \u00e9l\u00e9ment sup\u00e9rieur \u00e0 <code>m</code>.</p> <p>Question B2</p> <p>R\u00e9ponse C.</p> <p>Justification : <code>u</code> contiendra <code>[6, 8, 21]</code> car il s'agit des \u00e9l\u00e9ments de <code>t</code> qui sont sup\u00e9rieurs \u00e0 <code>3</code>.</p> <p>Question B3</p> <p>R\u00e9ponse C.</p> <p>Justification : <code>V</code> ne prend que les multiples de <code>3</code></p> <p>Question B4</p> <p>R\u00e9ponse B.</p> <p>Justification : L'expression <code>T[2][1]</code> \u00e9value \u00e0 <code>8</code>, car elle acc\u00e8de au deuxi\u00e8me \u00e9l\u00e9ment (indice <code>1</code>) du troisi\u00e8me sous-tableau (indice <code>2</code>) de <code>T</code>.</p> <p>Question B5</p> <p>R\u00e9ponse D.</p> <p>Justification : <code>r</code> vaudra <code>6</code> car il s'agit de la diff\u00e9rence entre le quatri\u00e8me et le deuxi\u00e8me \u00e9l\u00e9ment du tuple <code>t</code>.</p> <p>Question B6</p> <p>R\u00e9ponse D.</p> <p>Justification : <code>d['z']</code> r\u00e9cup\u00e8re la valeur associ\u00e9e \u00e0 la cl\u00e9 'z' dans le dictionnaire <code>d</code>, qui est <code>26</code>.</p>"},{"location":"terminale/e3c/#theme-c-traitement-de-donnees-en-tables","title":"Th\u00e8me C : Traitement de Donn\u00e9es en Tables","text":"<p>Question C1</p> <p>R\u00e9ponse C.</p> <p>Justification : La fonction renvoie le nom de la premi\u00e8re personne dont l'\u00e2ge est sup\u00e9rieur \u00e0 18 dans le dictionnaire, qui est <code>\"charlotte\"</code>.</p> <p>Question C2</p> <p>R\u00e9ponse A.</p> <p>Justification : La r\u00e9ponse A est le format correct d'un fichier CSV, o\u00f9 les valeurs sont s\u00e9par\u00e9es par des virgules.</p> <p>Question C3</p> <p>R\u00e9ponse B.</p> <p>Justification : L'expression <code>t[1]['quantit\u00e9']</code> permet d'acc\u00e9der \u00e0 la quantit\u00e9 de scies, qui est le deuxi\u00e8me \u00e9l\u00e9ment de la liste <code>t</code>.</p> <p>Question C4</p> <p>R\u00e9ponse B.</p> <p>Justification : <code>mendeleiev[1][6] = 'F'</code> corrige le symbole du Fluor dans le tableau p\u00e9riodique.</p> <p>Question C5</p> <p>R\u00e9ponse A.</p> <p>Justification : L'instruction <code>data = data1 + data2</code> cr\u00e9e une nouvelle table en combinant les \u00e9l\u00e9ments de <code>data1</code> et <code>data2</code>.</p> <p>Question C6</p> <p>R\u00e9ponse C.</p> <p>Justification : L'expression <code>c = a + b</code> combine les deux listes <code>a</code> et <code>b</code>, donnant <code>[1, 2, 3, 4, 5, 6]</code>.</p>"},{"location":"terminale/e3c/#theme-d-interactions-entre-lhomme-et-la-machine-sur-le-web","title":"Th\u00e8me D : Interactions entre l'homme et la machine sur le Web.","text":"<p>Question D1</p> <p>R\u00e9ponse D.</p> <p>Justification : La m\u00e9thode POST du protocole HTTP est utilis\u00e9e pour envoyer des donn\u00e9es, comme celles d'un formulaire HTML, vers un serveur.</p> <p>Question D2</p> <p>R\u00e9ponse B.</p> <p>Justification : La balise <code>&lt;title&gt;</code> est utilis\u00e9e dans l'en-t\u00eate d'un document HTML pour d\u00e9finir le titre de la page.</p> <p>Question D3</p> <p>R\u00e9ponse D.</p> <p>Justification : L'attribut <code>onmouseover</code> en HTML est utilis\u00e9 pour ex\u00e9cuter un script lorsqu'un utilisateur passe la souris sur un \u00e9l\u00e9ment sp\u00e9cifique.</p> <p>Question D4</p> <p>R\u00e9ponse C.</p> <p>Justification : La balise <code>&lt;input type=\"checkbox\"&gt;</code> est utilis\u00e9e pour cr\u00e9er des cases \u00e0 cocher dans un formulaire HTML.</p> <p>Question D5</p> <p>R\u00e9ponse C.</p> <p>Justification : La propri\u00e9t\u00e9 <code>onclick</code> d'une balise <code>&lt;button /&gt;</code> en HTML est utilis\u00e9e pour d\u00e9finir un script JavaScript \u00e0 ex\u00e9cuter lors du clic sur le bouton.</p> <p>Question D6</p> <p>R\u00e9ponse C.</p> <p>Justification : Le s\u00e9lecteur CSS <code>#tab-nav</code> a cible les liens (<code>&lt;a&gt;</code>) \u00e0 l'int\u00e9rieur de l'\u00e9l\u00e9ment avec l'ID <code>tab-nav</code>, ce qui correspond \u00e0 la structure donn\u00e9e pour la barre de navigation.</p>"},{"location":"terminale/e3c/#theme-e-architectures-materielles-et-systemes-dexploitation-question-e1","title":"Th\u00e8me E : Architectures Mat\u00e9rielles et Syst\u00e8mes d'Exploitation Question E1.","text":"<p>Question E1</p> <p>R\u00e9ponse C.</p> <p>Justification : La commande <code>chmod a+x jeu</code> sous Linux donne les droits d'ex\u00e9cution \u00e0 tous les utilisateurs pour le fichier <code>jeu</code>.</p> <p>Question E2</p> <p>R\u00e9ponse C.</p> <p>Justification : La commande <code>cp /users/luc/interro.txt ./</code> sous Linux copie le fichier <code>interro.txt</code> vers le r\u00e9pertoire courant.</p> <p>Question E3</p> <p>R\u00e9ponse C.</p> <p>Justification : Apr\u00e8s les commandes, les fichiers <code>help.txt</code> et <code>tutorial.txt</code> seront dans le r\u00e9pertoire <code>Documents</code> du r\u00e9pertoire de l'utilisateur.</p> <p>Question E4</p> <p>R\u00e9ponse C.</p> <p>Justification : La commande <code>cat readme.txt</code> sous Linux est utilis\u00e9e pour afficher le contenu du fichier <code>readme.txt</code>.</p> <p>Question E5</p> <p>R\u00e9ponse C.</p> <p>Justification : Dans l'architecture de Von Neumann, l'unit\u00e9 arithm\u00e9tique et logique (UAL) a pour r\u00f4le d'effectuer les op\u00e9rations de base.</p> <p>Question E6</p> <p>R\u00e9ponse D.</p> <p>Justification : L'affirmation selon laquelle un syst\u00e8me d'exploitation propri\u00e9taire est plus s\u00e9curis\u00e9 est subjective et ne peut \u00eatre \u00e9tablie comme universellement vraie.</p>"},{"location":"terminale/e3c/#theme-f-langages-et-programmation-question-f1","title":"Th\u00e8me F : Langages et Programmation Question F1.","text":"<p>Question F1</p> <p>R\u00e9ponse D.</p> <p>Justification : L'instruction <code>(random.randint(0, 4) - 2) * 2</code> g\u00e9n\u00e8re un entier al\u00e9atoire entre <code>0</code> et <code>4</code>, soustrait <code>2</code>, puis multiplie le r\u00e9sultat par <code>2</code>, couvrant l'ensemble <code>{-4, -2, 0, 2, 4}</code>.</p> <p>Question F2</p> <p>R\u00e9ponse B </p> <p>Justification : Le test <code>ranger(3, 4, 1)</code> \u00e9choue \u00e0 trier correctement car il permute le <code>4</code> et le <code>1</code> mais laisse le <code>3</code> devant.</p> <p>Question F3</p> <p>R\u00e9ponse D.</p> <p>Justification : L'expression [1 * 7] cr\u00e9e une liste contenant 7 fois le nombre 1, donc [7, 7, 7, 7, 7, 7, 7].</p> <p>Question F4</p> <p>R\u00e9ponse C.</p> <p>Justification : Les conditions a &lt;= b &lt; longueur(T) garantissent que les indices sont dans les limites correctes du tableau sans chevauchement.</p> <p>Question F5</p> <p>R\u00e9ponse B.</p> <p>Justification : Remplacer les pointill\u00e9s par <code>L[i] &gt; m</code> garantit que <code>m</code> sera mis \u00e0 jour avec le plus grand \u00e9l\u00e9ment rencontr\u00e9 dans la liste.</p> <p>Question F6</p> <p>R\u00e9ponse C.</p> <p>Justification : Il est d\u00e9conseill\u00e9 d'utiliser des flottants avec cette fonction car la pr\u00e9cision des op\u00e9rations flottantes peut entra\u00eener des erreurs inattendues dans la comparaison.</p>"},{"location":"terminale/e3c/#theme-g-algorithmique-question-g1","title":"Th\u00e8me G : Algorithmique Question G1.","text":"<p>Question G1</p> <p>R\u00e9ponse A.</p> <p>Justification : Pour la recherche dichotomique, la liste doit \u00eatre tri\u00e9e pour permettre la division de la liste et la comparaison des \u00e9l\u00e9ments de mani\u00e8re efficace.</p> <p>Question G2</p> <p>R\u00e9ponse D.</p> <p>Justification : Dans le pire des cas, un algorithme de recherche dichotomique sur une liste de taille 2 n\u00e9cessite \\(2 + 1 = 3\\) comparaisons.</p> <p>Question G3</p> <p>R\u00e9ponse D.</p> <p>Justification : La fonction renvoie le maximum de la liste donn\u00e9e.</p> <p>Question G4</p> <p>R\u00e9ponse B.</p> <p>Justification : La fonction compte le nombre d'occurrences de la lettre <code>'e'</code> dans <code>\"Vive l\u2019informatique\"</code>, qui appara\u00eet 2 fois.</p> <p>Question G5</p> <p>R\u00e9ponse C.</p> <p>Justification : Cette fonction impl\u00e9mente la recherche dichotomique, un algorithme de recherche qui divise successivement la liste pour trouver un \u00e9l\u00e9ment.</p> <p>Question G6</p> <p>R\u00e9ponse B.</p> <p>Justification : Le script B boucle ind\u00e9finiment car <code>i</code> commence plus petit que <code>K</code> et diminue \u00e0 chaque fois, mais la condition de la boucle est que <code>i</code> soit plus petit que <code>K</code>, ce qui est toujours vrai.</p>"},{"location":"terminale/entrainement_python/","title":"R\u00e9visions et entra\u00eenement au langage Python","text":""},{"location":"terminale/entrainement_python/#revisions-et-entrainement-au-langage-python","title":"R\u00e9visions et entra\u00eenement au langage Python","text":""},{"location":"terminale/entrainement_python/#introduction","title":"Introduction","text":"<p>Cette activit\u00e9 est constitu\u00e9e de plusieurs programmes, de difficult\u00e9 croissante, \u00e0 compl\u00e9ter ou \u00e0 r\u00e9aliser.</p> <p>Pour chaque programme, des tests sont effectu\u00e9s dans chaque fonction pour v\u00e9rifier leur bon fonctionnement. Si vous n'avez pas d'erreur, rien ne doit s'afficher lorsque vous ex\u00e9cutez le programme.</p>"},{"location":"terminale/entrainement_python/#programme-1","title":"Programme 1","text":"<p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>programme1.py : programme 1 \u00e0 compl\u00e9ter</li> <li>programme1_corr.py : corrig\u00e9 du programme 1</li> </ul> <p>Ouvrez le fichier <code>programme1.py</code> dans Thonny (ou votre IDE pr\u00e9f\u00e9r\u00e9).</p> <p>Question 1</p> <p>\u00c9crivez la fonction <code>somme(a,b)</code>, qui renvoie la somme de deux entiers a et b.</p> <p>Question 2</p> <p>Compl\u00e9tez la fonction <code>produit(a,b)</code>, qui renvoie le produit de deux entiers a et b, sans utiliser l'op\u00e9rateur <code>*</code>.</p> <p>Question 3</p> <p>Compl\u00e9tez la fonction <code>prod_liste(l1, l2)</code> qui fait le produit des \u00e9l\u00e9ments de deux listes, et renvoie une nouvelle liste contenant les \u00e9l\u00e9ments r\u00e9sultant de ces produits.</p> <p>Exemple : Si <code>l1 = [1, 2, 3]</code> et <code>l2 = [4, 5, 6]</code>, la fonction renverra une liste <code>[4, 10, 18]</code>.</p>"},{"location":"terminale/entrainement_python/#programme-2","title":"Programme 2","text":"<p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>programme2.py : programme 2 \u00e0 compl\u00e9ter</li> <li>programme2_corr.py : corrig\u00e9 du programme 2</li> </ul> <p>Question 4</p> <p>Compl\u00e9tez la fonction <code>minimum(liste)</code> qui renvoie le plus petit \u00e9l\u00e9ment d'une liste.</p> <p>Question 5</p> <p>\u00c9crivez la fonction <code>maximum(liste)</code> en vous basant sur le m\u00eame principe que la fonction pr\u00e9c\u00e9dente.</p> <p>Question 6</p> <p>Compl\u00e9tez la fonction <code>indice_min(liste)</code> qui renvoie l'indice du plus petit \u00e9l\u00e9ment de la liste.</p> <p>Question 7</p> <p>Compl\u00e9tez la fonction <code>tri_selection(liste)</code> qui effectue le tri par s\u00e9lection d'une liste.</p>"},{"location":"terminale/entrainement_python/#programme-3","title":"Programme 3","text":"<p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>programme3.py : programme 3 \u00e0 compl\u00e9ter</li> <li>programme3_corr.py : corrig\u00e9 du programme 3</li> </ul> <p>Question 8</p> <p>\u00c9crivez la fonction <code>concatener(liste)</code> qui renvoie la concat\u00e9nation de deux listes.</p> <p>Question 9</p> <p>\u00c9crivez la fonction <code>inverse(liste)</code> qui renvoie l'inverse d'une liste, vous ne devez pas utiliser la m\u00e9thode <code>reverse</code> !</p> <p>Question 10</p> <p>\u00c9crivez la fonction <code>somme_li(liste)</code> qui renvoie une liste contenant la somme des \u00e9l\u00e9ments de la liste avec les \u00e9l\u00e9ments de son inverse.</p> <p>Question 11</p> <p>\u00c9crivez la fonction <code>somme_lignes(tableau)</code> et compl\u00e9tez la fonction <code>somme_colonnes(tableau)</code> qui renvoient respectivement une liste contenant la somme de chaque ligne d'un tableau 2D et la somme de chaque colonne d'un tableau 2D.</p> <p>On consid\u00e8re que les lignes du tableau font toutes la m\u00eame taille.</p> <p>Une liste <code>l = [[1, 4, 5, 3], [7, 8, 5, 4], [4, 5, 8, 3]]</code> par exemple correspondrait au tableau suivant :</p> <p></p>"},{"location":"terminale/entrainement_python/#programme-4","title":"Programme 4","text":"<p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>programme4.py : programme 4 \u00e0 compl\u00e9ter</li> <li>programme4_corr.py : corrig\u00e9 du programme 4</li> </ul> <p>Question 12</p> <p>\u00c9crivez une fonction <code>trouver(liste, element)</code> qui renvoie True si l'\u00e9l\u00e9ment <code>element</code> est dans la liste <code>liste</code>, False s'il n'y est pas.</p> <p>Question 13</p> <p>Compl\u00e9tez la fonction <code>dichotomie(liste, element)</code> qui renvoie True si <code>element</code> est dans la liste <code>liste</code>, False sinon. Le param\u00e8tre <code>liste</code> est une liste tri\u00e9e.</p>"},{"location":"terminale/entrainement_python/#programme-5","title":"Programme 5","text":"<p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>programme5.py : programme 5 \u00e0 compl\u00e9ter</li> <li>programme5_corr.py : corrig\u00e9 du programme 5</li> </ul> <p>Question 14</p> <p>\u00c9crivez une fonction <code>compter(mot, lettre)</code> qui compte le nombre de fois qu'une lettre appara\u00eet dans un mot.</p> <p>Question 15</p> <p>\u00c9crivez une fonction <code>supprimer(mot, lettre)</code> qui renvoie le mot initial sans la lettre sp\u00e9cifi\u00e9e.</p> <p>Question 16</p> <p>\u00c9crivez une fonction <code>recherche(chaine, sequence)</code> qui recherche une s\u00e9quence (une suite de caract\u00e8res) dans une cha\u00eene de caract\u00e8res et renvoie True si elle est trouv\u00e9e, False sinon.</p>"},{"location":"terminale/entrainement_python/#programme-6","title":"Programme 6","text":"<p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>programme6.py : programme 6 \u00e0 compl\u00e9ter</li> </ul> <p>On s'int\u00e9resse aux classes.</p> <p>Ce programme contient une classe <code>Carte</code> qui repr\u00e9sente une carte ayant une valeur (repr\u00e9sent\u00e9e par un entier de 1 \u00e0 4) et une couleur (repr\u00e9sent\u00e9e par un entier de 1 \u00e0 13).</p> <p>Question 17</p> <p>Le programme contient \u00e9galement une classe <code>PaquetDeCarte</code> dans laquelle vous devez \u00e9crire la m\u00e9thode <code>remplir()</code> qui remplit un paquet de cartes avec les 52 cartes (13 cartes de 4 couleurs) et la m\u00e9thode <code>getCarteAt(pos)</code> permettant de r\u00e9cup\u00e9rer la carte \u00e0 la position <code>pos</code> donn\u00e9e.</p>"},{"location":"terminale/entrainement_python/#programme-7","title":"Programme 7","text":"<p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>programme7.py : programme 7 \u00e0 compl\u00e9ter</li> </ul> <p>On souhaite repr\u00e9senter une liste chain\u00e9e \u00e0 l'aide de classes Python. Ce programme contient une classe <code>Noeud</code> et une classe <code>Liste</code>.</p> <p>On repr\u00e9sente une liste chain\u00e9e de la mani\u00e8re suivante :</p> <p></p> <p>La classe Liste a comme attribut <code>premier_noeud</code> qui pointe vers le premier noeud de la liste. Un noeud a comme attribut <code>valeur</code> qui contient la valeur du noeud, et <code>suivant</code> qui pointe vers le noeud suivant. Ainsi, le premier noeud pointe vers le second, le second vers le troisi\u00e8me, etc. Un noeud vide est repr\u00e9sent\u00e9 par l'objet <code>None</code>.</p> <p>Le sch\u00e9ma ci-dessus par exemple repr\u00e9sente la liste <code>[2, 4, 7]</code>.</p> <p>Question 18</p> <p>Compl\u00e9tez la classe <code>Noeud</code> et la classe <code>Liste</code> en respectant les instructions contenues dans les docstrings.</p>"},{"location":"terminale/entrainement_python/#programme-8","title":"Programme 8","text":"<p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>programme8.py : programme 8 \u00e0 compl\u00e9ter</li> </ul> <p>Un peu de r\u00e9cursivit\u00e9. Les fonctions suivantes doivent \u00eatre \u00e9crites de mani\u00e8re r\u00e9cursive.</p> <p>Question 19</p> <p>\u00c9crivez une fonction <code>factorielle(n)</code> qui renvoie la factorielle du nombre n sp\u00e9cifi\u00e9e.</p> <p>Question 20</p> <p>\u00c9crivez une fonction <code>fibonacci(n)</code> qui donne le n-i\u00e8me terme de la suite de Fibonacci. La suite de Fibonacci donne :</p> <ul> <li>n si n = 0 ou n = 1</li> <li>fibonacci(n - 1) + fibonacci(n - 2) si n &gt; 1</li> </ul> <p>Voir le tableau suivant :</p> n = r\u00e9sultat 0 0 1 1 2 1 + 0 = 1 3 1 + 1 = 2 4 2 + 1 = 3 <p>Question 21</p> <p>Le tri fusion est un tri bas\u00e9 sur l'algorithme \"Diviser pour r\u00e9gner\" qui effectue le tri d'une liste en s\u00e9parant r\u00e9cursivement la liste en deux, jusqu'\u00e0 effectuer des comparaisons d'\u00e9l\u00e9ments un \u00e0 un et \u00e0 reconstituer la liste finale. Plus d'informations ici : https://fr.wikipedia.org/wiki/Tri_fusion</p> <p>Voici un sch\u00e9ma du tri fusion appliqu\u00e9 \u00e0 une liste de 7 \u00e9l\u00e9ments :</p> <p></p> <p>La fonction <code>fusion</code>, qui fusionne deux listes tri\u00e9es, est donn\u00e9e. \u00c9crivez la fonction <code>tri_fusion</code> qui effectue le tri d'une liste en suivant cette m\u00e9thode.</p>"},{"location":"terminale/mise_au_point/","title":"Mise au point de programmes","text":""},{"location":"terminale/mise_au_point/#mise-au-point-de-programmes","title":"Mise au point de programmes","text":"Liste des contenus Description Activit\u00e9 pr\u00e9liminaire Une petite activit\u00e9 pr\u00e9liminaire. Cours et exercices Cours et exercices autour de la mise au point des programmes. Activit\u00e9 finale Activit\u00e9 finale autour de la mise au point de programmes. Corrig\u00e9 DS n\u00b01 Corrig\u00e9 du DS n\u00b01 sur la modularit\u00e9 et la mise au point des programmes."},{"location":"terminale/mise_au_point/activite_finale/","title":"Activit\u00e9 finale","text":""},{"location":"terminale/mise_au_point/activite_finale/#activite-finale","title":"Activit\u00e9 finale","text":"<p>Modalit\u00e9s de rendu</p> <p>Vous r\u00e9aliserez ce travail dans un fichier nomm\u00e9 <code>activite_sousmax.py</code>, que vous rendrez depuis la plateforme \u00c9l\u00e9a.</p> <p>On veut d\u00e9finir une fonction qui renvoie le deuxi\u00e8me plus grand \u00e9l\u00e9ment d\u2019un tableau de nombres entiers. Par exemple dans le tableau <code>[4, 2, 7, 5, 9, 1, 5, 3]</code>, la valeur cherch\u00e9e est <code>7</code>. On veut s\u2019assurer que la fonction est cod\u00e9e correctement en cr\u00e9ant un jeu de tests.</p> <p>Concernant les tests, vous \u00eates libre d'utiliser des assertions ou un module de votre choix parmi doctest, pytest et unittest.</p> <p>Exercice 1</p> <p>\u00c9crire l'en-t\u00eate de la fonction finale, que l'on nommera <code>sousmax</code>, incluant une sp\u00e9cification sous la forme d'une docstring. Cette sp\u00e9cification doit contenir :</p> <ul> <li>une explication de ce que fait la fonction,</li> <li>les param\u00e8tres d'entr\u00e9e et leurs types,</li> <li>les conditions d'utilisation (pr\u00e9conditions),</li> <li>le type de la valeur de retour.</li> </ul> <p>Vous devez \u00e9galement d\u00e9crire le comportement de la fonction lorsqu'il existe plusieurs \u00e9l\u00e9ments maximums dans le tableau.</p> <p>Exercice 2 - Tests \u00ab bo\u00eete noire \u00bb</p> <p>\u00c9crire un ensemble de tests unitaires de cette fonction. Ces tests ne prennent pas en compte l'impl\u00e9mentation de la fonction, et doivent uniquement \u00eatre li\u00e9s \u00e0 la sp\u00e9cification.</p> <p>Vous pouvez inclure :</p> <ul> <li>des tests avec des tableaux de moins de deux \u00e9l\u00e9ments,</li> <li>des tests avec des \u00e9l\u00e9ments tous diff\u00e9rents,</li> <li>des tests avec plusieurs \u00e9l\u00e9ments de m\u00eame valeur maximale,</li> <li>des tests avec plusieurs \u00e9l\u00e9ments sous-maximums,</li> <li>un test avec des \u00e9l\u00e9ments tous \u00e9gaux.</li> </ul> <p>Vous pouvez utiliser la fonction <code>shuffle</code> du module <code>random</code> pour effectuer des tests plus exhaustifs (des points bonus seront accord\u00e9s le cas \u00e9ch\u00e9ant).</p> <p>Exercice 3 - Impl\u00e9mentation</p> <p>On propose deux approches pour coder la fonction demand\u00e9e :</p> <p>a. \u00e9crire d\u2019abord une fonction qui calcule la valeur maximale d\u2019un tableau, puis une fonction qui calcule la plus grande valeur d\u2019un tableau inf\u00e9rieure \u00e0 une valeur donn\u00e9e, et enfin utiliser ces deux fonctions pour \u00e9crire une troisi\u00e8me fonction qui calcule la valeur demand\u00e9e ;</p> <p>b. \u00e9crire une fonction qui calcule directement la valeur demand\u00e9e.</p> <p>Impl\u00e9mentez la fonction <code>sousmax</code> en utilisant une des approches ci-dessus.</p> <p>Exercice 4</p> <p>Enfin, lancez les tests que vous avez \u00e9crits \u00e0 l'exercice 2 et corrigez les erreurs \u00e9ventuelles de votre code.</p>"},{"location":"terminale/mise_au_point/cours/","title":"Cours et exercices","text":"Sources <ul> <li>dautrylimoges.scenari-community.org </li> <li>silanus.fr </li> <li>lamadone.frama.io </li> <li>Eduscol </li> <li>Livres : Hachette Terminale NSI, Serge Bays - Terminale NSI, Balabonski Terminale</li> </ul>"},{"location":"terminale/mise_au_point/cours/#cours-mise-au-point-des-programmes","title":"Cours - Mise au point des programmes","text":"<p>Extrait du programme officiel :</p> Contenus Capacit\u00e9s attendues Commentaires Mise au point des programmes. Gestion des bugs. Dans la pratique de la programmation, savoir r\u00e9pondre aux causes typiques de bugs : probl\u00e8mes li\u00e9s au typage, effets de bord non d\u00e9sir\u00e9s, d\u00e9bordements  dans les tableaux, instruction conditionnelle non exhaustive, choix des  in\u00e9galit\u00e9s, comparaisons et calculs entre flottants, mauvais nommage des variables, etc. On prolonge le travail entrepris en classe de premi\u00e8re sur l'utilisation de la sp\u00e9cification, des assertions, de la documentation des programmes et de la construction de jeux de tests. <p>Lorsque l\u2019on ex\u00e9cute un programme, il peut ne pas fonctionner comme pr\u00e9vu. Par exemple, il peut boucler ind\u00e9finiment, ou bien ne pas produire le r\u00e9sultat escompt\u00e9. Et m\u00eame s\u2019il fonctionne comme pr\u00e9vu, rien ne garantit qu'il fournisse toujours un r\u00e9sultat correct quelles que soient les donn\u00e9es d\u2019entr\u00e9e qu\u2019on lui fournit. Un dysfonctionnement dans un programme informatique li\u00e9 \u00e0 un d\u00e9faut de conception est appel\u00e9 \"bug\" .</p> <p>Les bugs causent chaque ann\u00e9e des millions d\u2019euros de perte pour les entreprises et les \u00c9tats (on peut parler du fameux bug ayant caus\u00e9 l'explosion de la fus\u00e9e Ariane 5), voire sont parfois responsables de morts civiles ou militaires.</p> <p>Par ailleurs, un bug peut produire un r\u00e9sultat erron\u00e9, un effet de bord non souhait\u00e9, voire fournir un r\u00e9sultat inattendu mais tr\u00e8s int\u00e9ressant. On dit qu'un programme est \"correct\" s'il :</p> <ul> <li>se termine toujours,</li> <li>fait ce que l'on attend de lui (ad\u00e9quation \u00e0 la sp\u00e9cification).</li> </ul> <p>Autrement dit, pour que le programme soit correct, il ne doit pas y avoir de bug.</p>"},{"location":"terminale/mise_au_point/cours/#bugs","title":"Bugs","text":"<p>Point historique</p> <p>Le terme bug (insecte en fran\u00e7ais) est apparu sur un document de 1947, \u00e9crit par un groupe travaillant sur le calculateur Mark II \u00e0 l'universit\u00e9 d'Harvard. Ce terme \u00e9tait toutefois d\u00e9j\u00e0 employ\u00e9 en \u00e9lectricit\u00e9 depuis des dizaines d'ann\u00e9es pour \u00e9voquer un probl\u00e8me de fonctionnement ou de connexion d'un appareil \u00e9lectrique. Cela a \u00e9t\u00e9 confirm\u00e9 par Grace Hopper, informaticienne am\u00e9ricaine ayant travaill\u00e9 sur le Mark I puis sur le Mark II depuis 1943.</p> <p>Bien s\u00fbr, le but est d'\u00e9viter autant que possible l'\u00e9criture de bugs. Pour ce faire, on peut utiliser des m\u00e9thodes de d\u00e9veloppement particuli\u00e8res, ou des outils d\u2019aide au d\u00e9veloppement (certains IDE sont capables de d\u00e9tecter des erreurs avant l'ex\u00e9cution du programme). Malheureusement, on finit en g\u00e9n\u00e9ral t\u00f4t ou tard par introduire des bugs dans un programme, auquel cas il faut :</p> <ul> <li>savoir mettre en \u00e9vidence le bug et le reproduire ;</li> <li>comprendre l'origine du bug ;</li> <li>corriger le bug.</li> </ul> <p>C\u2019est ce qu\u2019on appelle la mise au point, ou le d\u00e9boguage.</p>"},{"location":"terminale/mise_au_point/cours/#un-exemple","title":"Un exemple","text":"<p>Voici un programme utilisant le module <code>Turtle</code>, un module permettant de faire du dessin vectoriel en d\u00e9pla\u00e7ant une tortue sur l'\u00e9cran :</p> <pre><code>from turtle import *\n\ndef m1(taille):\n    forward(taille)\n    left(60)\n    forward(taille)\n    right(120)\n    forward(taille)\n    left(60)\n    forward(taille)\n\ndef m2(taille):\n    forward(taille)\n    left(60)\n    forward(taille)\n    right(120)\n    forward(taille)\n    left(60)\n    forward(taille)\n    left(60)\n\ndef courbe(longueur, niveau, motif):\n    if niveau == 1:\n        motif(longueur)\n    else:\n        longueur = longueur / 3\n        niveau = niveau - 1\n        courbe(longueur, niveau, motif)\n        lt(60)\n        courbe(longueur, niveau, motif)\n        rt(120)\n        courbe(longueur, niveau, motif)\n        lt(60)\n        courbe(longueur, niveau, motif)\n\nup()\ngoto(-300, -160)\ndown()\nspeed(0)\nht()\nwidth(4)\ncolor('black')\ncourbe(200, 4, m1)\nup()\ngoto(-300, -160)\ndown()\ncolor('red')\ncourbe(200, 4, m2)\n</code></pre> <p>Les diff\u00e9rences entre la fonction <code>m1</code> et <code>m2</code> sont minimes : Il y a une seule instruction en plus \u00e0 la fin de la fonction <code>m2</code> : <code>left(60)</code>. Et pourtant, en ex\u00e9cutant le programme, voici en noir le trac\u00e9 utilisant la fonction <code>m1</code>, et en rouge le trac\u00e9 utilisant la fonction <code>m2</code> :</p> <p> </p> Capture d'\u00e9cran de Turtle <p>On voit donc qu'un tout petit \u00e9l\u00e9ment peut avoir un impact \u00e9norme sur le fonctionnement d'un programme ! D'o\u00f9 l'importance de pr\u00e9venir les erreurs, m\u00eames celles qui peuvent sembler minimes.</p>"},{"location":"terminale/mise_au_point/cours/#deceler-lorigine-dun-bug","title":"D\u00e9celer l'origine d'un bug","text":"<p>Pour comprendre la cause d\u2019un bug, il faut d'abord comprendre comment s\u2019est d\u00e9roul\u00e9e l\u2019ex\u00e9cution du programme qui a amen\u00e9 au bug. Il est important d'\u00eatre capable de simuler \u00e0 la main l'ex\u00e9cution du programme.</p> <p>Il est \u00e9galement important de conna\u00eetre, pour chaque fonction, quelles sont les pr\u00e9conditions, c'est-\u00e0-dire les conditions sur les param\u00e8tres d'entr\u00e9e. On peut pour cela d\u00e9finir des assertions \u00e0 l'int\u00e9rieur de nos fonctions pour v\u00e9rifier les pr\u00e9conditions, ou au minimum d\u00e9finir les pr\u00e9conditions \u00e0 l'int\u00e9rieur de la docstring de nos fonctions.</p> <p>Par exemple, voici une fonction <code>maximum</code> renvoyant le maximum d'une liste de nombres positifs ou nuls :</p> <pre><code>def maximum(liste):\n    '''\n    Fonction renvoyant le maximum d\u2019une liste.\n    :CU: la liste doit contenir des nombres exclusivement positifs ou nuls\n    '''\n\n    valeur_max = 0\n    for valeur in liste:\n        if valeur &gt; valeur_max:\n            valeur_max = valeur\n    return valeur_max\n</code></pre> <p>Ici, <code>CU</code> signifie \"conditions d'utilisation\" (on y indique les pr\u00e9conditions relatives aux param\u00e8tres d'entr\u00e9e). Sur la forme de votre docstring, il n'y a pas de r\u00e8gle particuli\u00e8re. On aurait pu \u00e9crire <code>assert</code> ou encore <code>pr\u00e9conditions</code> au lieu de <code>CU</code>, par exemple.</p> <p>Si l'on ajoute des assertions \u00e0 l'int\u00e9rieur de notre fonction :</p> <pre><code>def maximum(liste):\n    '''\n    Fonction renvoyant le maximum d\u2019une liste.\n    :CU: la liste doit contenir des nombres exclusivement positifs ou nuls\n    '''\n\n    assert all(el &gt;= 0 for el in liste)\n    valeur_max = 0\n    for valeur in liste:\n        if valeur &gt; valeur_max:\n            valeur_max = valeur\n    return valeur_max\n</code></pre> <p>Pour effectuer une analyse pas-\u00e0-pas de votre code, vous pouvez \u00e9galement utiliser un d\u00e9bogueur. De nombreux IDE sont dot\u00e9s d'un d\u00e9bogueur, c'est le cas notamment de Thonny. (Pour d\u00e9bugguer un script avec Thonny, il faut cliquer sur la petite ic\u00f4ne \u00e0 droite de l'ic\u00f4ne d'ex\u00e9cution du script courant.)</p> <p> </p> d\u00e9bogueur de Thonny <p>Par ailleurs, une autre technique plus primaire mais fort utile consiste \u00e0 ajouter des affichages \u00e0 l'int\u00e9rieur de vos fonctions, avec la fonction <code>print</code>, de mani\u00e8re \u00e0 observer l'\u00e9volution du contenu des variables.</p> <p>En savoir plus</p> <p>Pour en savoir plus sur la gestion des bugs, je vous recommande de lire ce document propos\u00e9 par Eduscol.</p>"},{"location":"terminale/mise_au_point/cours/#les-types-derreurs-en-python","title":"Les types d'erreurs en Python","text":""},{"location":"terminale/mise_au_point/cours/#erreurs-de-syntaxe","title":"Erreurs de syntaxe","text":"<p>Les erreurs de syntaxe sont li\u00e9es \u00e0 des instructions malform\u00e9es, qui ne respectent pas les r\u00e8gles du langage. Elles sont d\u00e9tect\u00e9es lors de l\u2019ex\u00e9cution du programme et sont assez faciles \u00e0 corriger car un message d\u2019erreur explicite indique la nature et la localisation de l'erreur.</p> <p>Quelques exemples d'erreurs de syntaxe :</p> <ul> <li>Mauvaise indentation du code, m\u00e9lange d'espaces et de tabulations</li> <li>Oubli des deux-points \u00e0 la fin d'une instruction comme <code>def</code>, <code>if</code> ou <code>while</code></li> <li>Utilisation de <code>=</code> au lieu de <code>==</code> pour les tests d'\u00e9galit\u00e9</li> <li>...</li> </ul>"},{"location":"terminale/mise_au_point/cours/#erreurs-de-typage","title":"Erreurs de typage","text":"<p>Chaque valeur manipul\u00e9e par un programme Python est associ\u00e9e \u00e0 un type. On rappelle les principaux types manipul\u00e9s en Python :</p> <p> </p> Les principaux types en Python(extrait du Balabonski terminale) <p>Voici un exemple d'instruction incorrecte :</p> <pre><code>&gt;&gt;&gt; '2' + 2\nTraceback (most recent call last):\n  File \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre> <p>En cas d'erreur de type, Python l\u00e8ve une erreur de type <code>TypeError</code>, ici Python indique qu'il n'est possible de concat\u00e9ner que deux cha\u00eenes de caract\u00e8res.</p> <p>D'autres erreurs de types :</p> <pre><code>''' L : (list) '''\n&gt;&gt;&gt; print(L[1.5])\nTypeError: list indices must be integers or slices, not float\n</code></pre> <p>Parenth\u00e8ses \u00e0 la place de crochets (pour un objet qui ne peut pas \u00eatre appel\u00e9) :</p> <pre><code>''' L : (list), i : (int) '''\n&gt;&gt;&gt; print(L(i))\nTypeError: \u2019list\u2019 object is not callable\n</code></pre> <p>Crochets \u00e0 la place des parenth\u00e8ses (pour un objet qui ne peut pas \u00eatre indic\u00e9) :</p> <pre><code>''' mystere : (function), i : (int), a : (int) '''\n&gt;&gt;&gt; print(mystere[i])\nTypeError: \u2019function\u2019 object is not subscriptable\n&gt;&gt;&gt; print(a[i])\nTypeError: \u2019int\u2019 object is not subscriptable\n</code></pre> <p>Op\u00e9rations entre deux types non compatibles (ici addition) :</p> <pre><code>''' i : (int) '''\n&gt;&gt;&gt; print(i + \u2019a\u2019)\nTypeError: unsupported operand type(s) for +: \u2019int\u2019 and \u2019str\u2019\n</code></pre> <p>Op\u00e9rations entre deux types non compatibles (ici concat\u00e9nation) :</p> <pre><code>''' i : (int) '''\n&gt;&gt;&gt; print(\u2019a\u2019 + i)\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre> <p> \u00c0 vous de jouer 1</p> <p>Pour chacune des fonctions suivantes, proposez un type pour chacun de ses arguments et un type pour les r\u00e9sultats. Il peut parfois y avoir plusieurs solutions !</p> <pre><code>def f1(t) : \n    return t[O] + 1 \ndef f2(x) : \n    return str(3.14 * x) \ndef f3(p) : \n    x, y = p \n    return 2 * x + y \ndef f4(d, s): \n    if s != \"toto\": \n        d[s] += 1 \n    return d[s] \n</code></pre>"},{"location":"terminale/mise_au_point/cours/#erreurs-liees-aux-effets-de-bord","title":"Erreurs li\u00e9es aux effets de bord","text":"<p>Un effet de bord est une modification d\u2019une variable qui affecte l\u2019\u00e9tat du programme en dehors de la fonction ou de la m\u00e9thode o\u00f9 elle a lieu. En Python, cela arrive principalement de deux mani\u00e8res : par les variables globales et par l\u2019aliassage.</p> <p>On rappelle que pour modifier une variable globale dans une fonction, il est n\u00e9cessaire d'ajouter l\u2019instruction <code>global &lt;nom de la variable&gt;</code> dans la fonction. Par cons\u00e9quent, il est rare de cr\u00e9er un effet de bord par erreur.</p> <p>L\u2019aliassage survient lorsque deux variables r\u00e9f\u00e9rencent la m\u00eame donn\u00e9e, ce qui peut arriver avec les types structur\u00e9s tableau et dictionnaire et avec les objets, notamment lorsqu\u2019on les passe en param\u00e8tre.</p> <p>Les effets de bord ind\u00e9sirables peuvent \u00eatre difficile \u00e0 d\u00e9tecter car ils ne l\u00e8vent pas d'erreurs \u00e0 l'ex\u00e9cution. Il s'agit donc de bien documenter les fonctions pour indiquer quels sont les \u00e9ventuels effets de bord attendus.</p> <p>Voici un petit exemple :</p> <pre><code>def mystere():\n  L.sort()\n  for i in L:\n    return i == 1\n\ndef autre_fonction():\n  assert L == [3,2,1]\n</code></pre> <p>Si l'on ex\u00e9cute les instructions suivantes :</p> <pre><code>&gt;&gt;&gt; L = [3,2,1]\n&gt;&gt;&gt; mystere()\n&gt;&gt;&gt; autre_fonction()\nTraceback (most recent call last):\n  File \"C:\\Users\\demer\\Desktop\\test.py\", line 12, in &lt;module&gt;\n    autre_fonction()\n  File \"C:\\Users\\demer\\Desktop\\test.py\", line 8, in autre_fonction\n    assert L == [3,2,1]\nAssertionError\n</code></pre> <p> \u00c0 vous de jouer 2</p> <p>Pourquoi la fonction <code>autre_fonction</code> a t-elle \u00e9chou\u00e9e ?</p>"},{"location":"terminale/mise_au_point/cours/#erreurs-semantiques","title":"Erreurs s\u00e9mantiques","text":"<p>L'erreur s\u00e9mantique, \u00e9galement appel\u00e9e erreur de logique, est une erreur qui n'implique pas de message d'erreur : le programme semble s'ex\u00e9cuter parfaitement, mais le r\u00e9sultat n\u2019est pas le r\u00e9sultat attendu.</p> <p>En fait, le programme fait exactement ce que vous lui avez dit de faire, mais ce que vous lui avez dit de faire ne correspond pas \u00e0 ce que vous vouliez qu\u2019il fasse : la s\u00e9quence d\u2019instructions du programme ne correspond pas \u00e0 l\u2019objectif vis\u00e9. La s\u00e9mantique (la logique) est donc incorrecte.</p> <p>Ces erreurs sont particuli\u00e8rement difficile \u00e0 identifier, et n\u00e9cessite d'\u00eatre capable de vous replonger dans la logique de votre code pour en d\u00e9celer les failles.</p>"},{"location":"terminale/mise_au_point/cours/#erreurs-a-lexecution","title":"Erreurs \u00e0 l'ex\u00e9cution","text":"<p>Il s'agit d'une erreur qui survient en cours d\u2019ex\u00e9cution (Runtime error), lorsqu'un programme fonctionne d\u00e9j\u00e0, mais que des circonstances particuli\u00e8res se pr\u00e9sentent (par exemple, le programme essaie de lire un fichier qui n\u2019existe plus).</p>"},{"location":"terminale/mise_au_point/cours/#erreurs-de-valeur","title":"Erreurs de valeur","text":"<p>Un exemple :</p> <pre><code>&gt;&gt;&gt; from random import randrange\n&gt;&gt;&gt; randrange(1, 3.5)\nTraceback (most recent call last):\n    File \"&lt;pyshell#92&gt;\", line 1, in &lt;module&gt;\n        randrange(1, 3.5)\n    File \"C:\\python3.7.4.amd64\\lib\\random.py\", line 195, in randrange\n        raise ValueError(\"nonintegerstop for randrange()\")\nValueError: nonintegerstop for randrange()\n</code></pre>"},{"location":"terminale/mise_au_point/cours/#erreurs-lies-au-nommage-des-variables","title":"Erreurs li\u00e9s au nommage des variables","text":"<p>Le bon nommage des variables est particuli\u00e8rement important car il permet d'am\u00e9liorer la lisibilit\u00e9 du programme, et \u00e9galement d'\u00e9viter le masquage de variables.</p> <p>Le masquage de variables peut survenir lorsque :</p> <ul> <li>Vous importez une biblioth\u00e8que et d\u00e9clarez une fonction dans votre programme qui a le m\u00eame nom qu'une fonction de votre biblioth\u00e8que. Cela peut survenir lorsque vous effectuez des imports de la forme <code>from ma_bibliotheque import *</code>, il faut vraiment \u00e9viter ce type d'imports. Il vaut mieux effectuer des imports de la forme <code>import ma_bibliotheque</code> ou encore <code>import ma_bibliotheque as mb</code>, cela permet de faire des appels de fonctions de la forme <code>mb.ma_fonction</code>.</li> <li>Vous utiliser une variable globale \u00e0 l'int\u00e9rieur d'une fonction qui porte le m\u00eame nom qu'un des param\u00e8tres de la fonction. Pour \u00e9viter cela, on peut par exemple ajouter <code>g_</code> devant le nom de toutes nos variables globales. Par ailleurs, en g\u00e9n\u00e9ral, les variables globales sont utilis\u00e9es comme des constantes, et on met leurs noms en majuscules par convention.</li> </ul>"},{"location":"terminale/mise_au_point/cours/#autres-types-derreurs","title":"Autres types d'erreurs...","text":"<ul> <li>Erreurs de syntaxe et d'indentation :<ul> <li><code>SyntaxError</code> : erreur de parenth\u00e8se manquante.   Exemple : <code>len([1,2,3]</code></li> <li><code>IdentationError</code> (h\u00e9rite de <code>SyntaxError</code>) : Indentation oubli\u00e9e, trop grande, blocs mal d\u00e9limit\u00e9s, etc.</li> </ul> </li> <li>Erreurs d'ex\u00e9cution d'op\u00e9rations de base :<ul> <li><code>IndexError</code> : Acc\u00e8s \u00e0 un index non pr\u00e9sent dans une liste, un tuple, un str...   Exemple : <code>[1,2,3][3]</code></li> <li><code>KeyError</code> : Erreur de cl\u00e9 avec un dictionnaire.</li> <li><code>NameError</code> Nom de fonction ou de variable mal orthographi\u00e9.   Exemple : <code>prout(\"Bonsoir\")</code></li> <li><code>ValueError</code> : Lev\u00e9e lorsqu'une op\u00e9ration ou une fonction re\u00e7oit une valeur inappropri\u00e9e.</li> <li><code>TypeError</code> : Op\u00e9ration impossible entre deux types, conversion de type impossible.   Exemple : <code>\"3\" * \"5\"</code></li> <li><code>ZeroDivisionError</code> : Lev\u00e9e en cas de division par z\u00e9ro.</li> </ul> </li> <li>Oubli du <code>return</code> dans une fonction.</li> </ul>"},{"location":"terminale/mise_au_point/cours/#exercices","title":"Exercices","text":"<p> \u00c0 vous de jouer 3</p> <p>Cliquez-ici pour acc\u00e9der aux exercices.</p>"},{"location":"terminale/mise_au_point/cours/#specification-et-tests","title":"Sp\u00e9cification et tests","text":"<p>Tester un programme (ou une fonction, un module) consiste \u00e0 v\u00e9rifier qu\u2019il fonctionne comme pr\u00e9vu dans un maximum de situations possibles. Un jeu de tests est un programme ou un ensemble de programmes qui vise \u00e0 mettre en d\u00e9faut la partie test\u00e9e. Si un test \u00e9choue, il faut mettre au point le code, c\u2019est-\u00e0-dire identifier puis corriger le probl\u00e8me, et effectuer \u00e0 nouveau le test.</p> <p>Attention !</p> <p>Les jeux de tests ne permettent pas de garantir qu'un programme est correct, \u00e0 moins que ceux-ci soient exhaustifs (c'est-\u00e0-dire que l'on teste notre programme avec toutes les entr\u00e9es possibles, ce qui n'est pas envisageable la plupart du temps.)</p> <p>Si l'on veut prouver qu'un programme est correct, il faut utiliser la notion d'invariant vue en premi\u00e8re, et pour prouver que notre programme se termine, il faut utiliser la notion de variant. Lorsque l'on parvient \u00e0 exhiber un variant et un invariant, on peut les v\u00e9rifier avec des assertions \u00e0 l'int\u00e9rieur de notre programme (voir activit\u00e9 pr\u00e9liminaire.)</p> <p>Durant la phase de conception d'un programme, on commence par :</p> <ul> <li> <p>\u00e9crire la sp\u00e9cification du programme</p> </li> <li> <p>\u00e9crire des jeux de tests pour valider le fonctionnement du programme.</p> </li> </ul> <p>La sp\u00e9cification d'une fonction :</p> <ul> <li>d\u00e9crit ce que fait la fonction.</li> <li>liste ses param\u00e8tres d'entr\u00e9e et leur type</li> <li>indique le type de la valeur de retour</li> <li>\u00e9ventuellement :<ul> <li>sp\u00e9cifie les pr\u00e9conditions (parfois appel\u00e9es conditions d'utilisation) sur les param\u00e8tres d'entr\u00e9e,</li> <li>indique les effets de bord de la fonction,</li> <li>propose des exemples d'utilisation de la fonction,</li> <li>indique les erreurs lev\u00e9es en cas de mauvaise utilisation,</li> <li>etc.</li> </ul> </li> </ul> <p>Elle peut prendre diverses formes, comme un simple titre, un long document, une sp\u00e9cification formelle \u00e9crite dans un langage d\u00e9di\u00e9, un ensemble d\u2019exemples d\u2019utilisation, un ensemble de cas de tests, etc.</p> <p>En Python, on utilise des docstrings (cha\u00eenes de caract\u00e8res sous la forme <code>\"\"\" [...] \"\"\"</code> ou <code>''' [...] '''</code>) pour sp\u00e9cifier les fonctions, programmes, classes, etc.</p> <p>Les tests doivent donc se baser sur cette sp\u00e9cification qui indique ce que le programme est cens\u00e9 faire et ne pas faire.</p>"},{"location":"terminale/mise_au_point/cours/#plusieurs-types-de-tests","title":"Plusieurs types de tests","text":"<p>Les diff\u00e9rents types de tests</p> <p>On peut classer les tests selon diff\u00e9rents crit\u00e8res :</p> <ul> <li>le niveau des tests (tests unitaires, tests d\u2019int\u00e9gration, tests de recette) ;</li> <li>le processus de conception des tests (tests bo\u00eete blanche, tests bo\u00eete noire) ;</li> <li>le sujet du test (tests fonctionnels, tests de mont\u00e9e en charge, tests d\u2019utilisabilit\u00e9, etc.).</li> </ul> <p>Voici quelques d\u00e9finitions essentielles concernant les tests.</p> <ul> <li>cas de test : triplet (descriptif, donn\u00e9es d\u2019entr\u00e9e, r\u00e9sultat attendu) pr\u00e9cisant, pour des donn\u00e9es pr\u00e9cises, le r\u00e9sultat attendu de la partie du programme que l\u2019on veut tester.</li> <li>jeu de tests : ensemble de cas de test destin\u00e9s \u00e0 valider une partie pr\u00e9cise du fonctionnement d\u2019un programme. Le terme test peut se r\u00e9f\u00e9rer suivant les circonstances \u00e0 un cas de test, \u00e0 un jeu de tests, ou au processus de test en g\u00e9n\u00e9ral.</li> </ul> <p>Niveaux des tests :</p> <ul> <li>test unitaire : test destin\u00e9 \u00e0 tester une petite partie d'un programme (comme une fonction) ind\u00e9pendamment des autres parties.</li> <li>test d\u2019int\u00e9gration : test destin\u00e9 \u00e0 v\u00e9rifier que 2 parties d\u2019un programme, d\u00e9velopp\u00e9es a priori ind\u00e9pendamment l\u2019une de l\u2019autre, fonctionnent correctement lorsqu\u2019elles sont mises ensemble.</li> <li>test de recette : test destin\u00e9 \u00e0 v\u00e9rifier une fonctionnalit\u00e9 g\u00e9n\u00e9rale d\u2019un logiciel dans son ensemble.</li> </ul> <p>Processus de conception :</p> <p>On distingue les tests \u00ab bo\u00eete noire \u00bb et les tests \u00ab bo\u00eete blanche \u00bb (\u00e0 noter que ces notions ne sont pas au programme) :</p> <ul> <li> <p>Un test \u00ab bo\u00eete noire \u00bb est un test qui est con\u00e7u \u00e0 partir des donn\u00e9es d\u2019entr\u00e9es potentielles, ind\u00e9pendamment du code \u00e9crit. Un test \u00ab bo\u00eete noire \u00bb peut donc \u00eatre \u00e9crit avant le code, ou s\u2019il est \u00e9crit apr\u00e8s, il doit \u00eatre \u00e9crit par quelqu\u2019un qui ne conna\u00eet pas le code. Exemple : une fonction doit g\u00e9n\u00e9rer l\u2019en-t\u00eate d\u2019une lettre. Pour cela, elle prend en param\u00e8tre un objet repr\u00e9sentant le destinataire de la lettre (pr\u00e9nom, nom, sexe). Sans conna\u00eetre le code de la fonction, on peut d\u00e9j\u00e0 envisager 2 cas de test, un pour un homme et un pour une femme, et v\u00e9rifier que dans le premier cas l\u2019en-t\u00eate commence par \u00ab Cher \u00bb alors qu\u2019il commence par \u00ab Ch\u00e8re \u00bb dans le second cas.</p> </li> <li> <p>Un test \u00ab bo\u00eete blanche \u00bb est un test qui est con\u00e7u \u00e0 partir du programme. Le but de ce type de test est de tester les diff\u00e9rents cas pr\u00e9vus par le programme.</p> </li> </ul> <p>Sujets du test :</p> <ul> <li>test fonctionnel : test visant \u00e0 d\u00e9terminer la correction de l\u2019\u00e9tat final par rapport \u00e0 l\u2019\u00e9tat initial d'un programme. Si l'on parle de fonctions, il s'agit de d\u00e9terminer la correction de la valeur de retour (c'est-\u00e0-dire v\u00e9rifier que la valeur de retour soit bien celle qui est attendue) de la fonction par rapport aux donn\u00e9es d'entr\u00e9e. Souvent un test \u00ab bo\u00eete noire \u00bb.</li> <li>test structurel : test v\u00e9rifiant le fonctionnement interne d'un programme. Souvent un test \u00ab bo\u00eete blanche \u00bb.</li> <li>test de mont\u00e9e en charge : test visant \u00e0 v\u00e9rifier si un serveur continue \u00e0 bien fonctionner avec un grand nombre de sollicitations simultan\u00e9es.</li> <li>test d'utilisabilit\u00e9 : test destin\u00e9 \u00e0 \u00e9valuer l\u2019ergonomie (efficacit\u00e9 et simplicit\u00e9 de l'interface utilisateur) d\u2019un programme.</li> <li>test de performance : test v\u00e9rifiant que le logiciel se comporte correctement lorsqu\u2019il est confront\u00e9 \u00e0 des donn\u00e9es de grande taille ou, pour un serveur, \u00e0 un grand nombre de connexions.</li> </ul> <p>En savoir plus</p> <p>Pour en savoir plus sur l'\u00e9criture de tests, je vous recommande ce tr\u00e8s bon document propos\u00e9 par Eduscol.</p> <p>Toutefois, gardez en t\u00eate que beaucoup de choses qui y sont pr\u00e9sent\u00e9es ne sont pas au programme. Mais cela peut \u00eatre int\u00e9ressant pour votre culture personnelle !</p>"},{"location":"terminale/mise_au_point/cours/#tests-avec-des-assertions","title":"Tests avec des assertions","text":"<p>On peut effectuer des tests \u00e0 l'aide d'assertions. Si rien ne se passe, les tests sont valid\u00e9s.</p> <pre><code>def trouver_indice(lst, n):\n    ''' Fonction qui renvoie l'indice de l'entier n dans la liste lst.\n    Si l'\u00e9l\u00e9ment n est pr\u00e9sent plusieurs fois, l'indice du premier est renvoy\u00e9.\n    :param lst: (list[int]) Liste d'entiers\n    :param n: (int) Entier \u00e0 chercher\n    :return: (int) si \u00e9l\u00e9ment trouv\u00e9, (None) sinon\n    '''\n\n    for i in range(len(lst)):\n        if lst[i] == n:\n            return i\n\nassert trouver_indice([2,1,4], 4) == 2\nassert trouver_indice([2,1,4], 5) == None\nassert trouver_indice([], 1) == None\nassert trouver_indice([2,1,8,1,5], 1) == 1\n</code></pre> <p>Dans certains cas, il peut \u00e9galement \u00eatre utile d'effectuer des boucles de tests et des tests al\u00e9atoires.</p> <p>Exemple :</p> <pre><code>def tri(lst: list[int]) -&gt; list[int]  # Prend une liste non-tri\u00e9e, renvoie la liste tri\u00e9e\ndef generer_liste(n: int) -&gt; list[int]  # G\u00e9n\u00e8re une liste al\u00e9atoire de taille n\ndef est_trie(lst: list[int]) -&gt; bool  # Renvoie True si une liste est tri\u00e9e, False sinon\n\nfor n in range(20):  # Tester pour des tailles de 0 \u00e0 19\n    for _ in range(10):  # Tester sur 10 listes al\u00e9atoires diff\u00e9rentes\n        l = generer_liste(n)\n        assert est_trie(tri(l))\n</code></pre> <p>On peut \u00e9galement ajouter un message d'erreur lorsqu'une <code>AssertionError</code> est lev\u00e9e :</p> <pre><code>assert trouver_indice([], 1) == None, \"Erreur lors d'un test avec une liste vide.\"\n</code></pre> <p> \u00c0 vous de jouer 4</p> <p>\u00c9crivez une fonction <code>est_pair</code> qui renvoie <code>True</code>si un nombre <code>n</code> donn\u00e9 est pair, <code>False</code> sinon, puis cr\u00e9ez un ensemble de tests de votre fonction \u00e0 l'aide d'assertions.</p> <p>Documentez-bien votre fonction \u00e0 l'aide d'une docstring et \u00e9ventuellement d'annotations de types.</p> <p>Quelques exercices</p> <p>Voici deux exercices pour vous entra\u00eener \u00e0 \u00e9crire des tests \u00e0 l'aide d'assertions :</p> <ul> <li>Exercice - La fonction Factorielle</li> <li>Exercice - Que fait ce programme ?</li> </ul>"},{"location":"terminale/mise_au_point/cours/#quelques-modules-de-tests","title":"Quelques modules de tests","text":"<p>Pas au programme</p> <p>Les modules de tests sont pr\u00e9sent\u00e9s ici pour votre culture g\u00e9n\u00e9rale, et parce qu'ils vous seront bien utiles si vous souhaitez continuer \u00e0 travailler dans l'informatique apr\u00e8s le bac.</p> <p>Toutefois, dans le cadre des sujets propos\u00e9s au bac, les tests sont principalement effectu\u00e9s \u00e0 l'aide d'assertions. La connaissance des modules de tests pr\u00e9sent\u00e9s ici ne sont donc pas exigibles.</p> <p>Il existe principalement 3 modules Python pour \u00e9crire et ex\u00e9cuter des tests :</p> <ul> <li><code>unittest</code> : outil de base, int\u00e9gr\u00e9 \u00e0 Python ;</li> <li><code>doctest</code> : outil externe qui permet d\u2019ex\u00e9cuter des tests inclus dans la documentation des fonctions. Les tests servent alors \u00e9galement de documentation de la fonction ;</li> <li><code>pytest</code> : outil externe qui permet d\u2019ex\u00e9cuter des tests \u00e9crits dans des fichiers d\u00e9di\u00e9s. C\u2019est l\u2019outil le plus utilis\u00e9, car le plus complet.</li> </ul> <p>Exemples d'utilisation des modules</p> fichier description exemple_doctest.py Un exemple d'utilisation du module doctest. exemple_pytest.py Un exemple d'utilisation du module pytest. exemple_unittest.py Un exemple d'utilisation du module unittest."},{"location":"terminale/mise_au_point/cours/#aller-plus-loin-la-programmation-defensive","title":"Aller plus loin : La programmation d\u00e9fensive","text":"<ul> <li>La programmation d\u00e9fensive consiste \u00e0 \u00e9crire son code de fa\u00e7on \u00e0 s'attendre au pire.</li> <li>Il s'agit d'anticiper le comportement de l'utilisateur final :<ul> <li>V\u00e9rifier que les donn\u00e9es saisies et leur type sont \"correctes\" (= respectent la sp\u00e9cification).</li> <li>Si ce n'est pas le cas, interrompre le programme, \u00e9ventuellement afficher un message d'erreur...</li> </ul> </li> </ul> <p>Dans le cadre d'une fonction, il s'agit de s'assurer du respect :</p> <ul> <li>des pr\u00e9conditions : conditions sur les arguments d'entr\u00e9e.</li> <li>des postconditions : conditions sur la valeur de sortie.</li> </ul>"},{"location":"terminale/mise_au_point/cours/#gerer-les-exceptions","title":"G\u00e9rer les exceptions","text":"<p>Un bloc d'instructions <code>try... except...</code> permet d'effectuer des actions lorsque des erreurs sp\u00e9cifiques sont lev\u00e9es.</p> <pre><code>try:\n    a = int(input('a ? '))\n    b = int(input('b ? '))\n    print(a, '/', b, '=', a / b)\nexcept ValueError:\n    print('Erreur de conversion.')\nexcept ZeroDivisionError:\n    print('Division par z\u00e9ro.')\nexcept:\n    print('Autre erreur.')\n</code></pre> <p>Toutes les exceptions (<code>valueError</code>, <code>typeError</code>, etc.) natives de Python sont en fait d\u00e9riv\u00e9es d'une classe <code>Exception</code>. Ainsi, ce sont des objets, que l'on peut r\u00e9cup\u00e9rer en pr\u00e9cisant un nom de variable apr\u00e8s <code>except</code> comme dans cet exemple :</p> <pre><code>try:\n    a = int(input('a ? '))\n    b = int(input('b ? '))\n    print(a, '/', b, '=', a / b)\nexcept Exception as e:\n    print(type(e))\n    print(e)\n</code></pre> <p>Il est \u00e9galement possible de cr\u00e9er ses propres exceptions d\u00e9riv\u00e9es de cette classe.</p> <p>Plus d'informations sur cette page</p>"},{"location":"terminale/mise_au_point/ds1/","title":"Corrig\u00e9 DS n\u00b01","text":""},{"location":"terminale/mise_au_point/ds1/#corrige-ds-n1","title":"Corrig\u00e9 DS n\u00b01","text":"<p>\u00c9nonc\u00e9 PDF</p> <p>Vous pouvez t\u00e9l\u00e9charger ici l'\u00e9nonc\u00e9 du DS n\u00b01 au format PDF :</p> <p></p> T\u00e9l\u00e9charger l'\u00e9nonc\u00e9 du DS"},{"location":"terminale/mise_au_point/ds1/#un-module-adn","title":"Un module <code>adn</code>","text":"<p>Les mol\u00e9cules d'ADN pr\u00e9sentes dans les cellules vivantes contiennent l'information g\u00e9n\u00e9tique et permettent le d\u00e9veloppement, le fonctionnement et la reproduction des \u00eatres vivants. L'ADN est form\u00e9 de deux brins qui sont une succession de nucl\u00e9otides portant chacun une base azot\u00e9e.</p> <p>Les quatre bases azot\u00e9es sont l'ad\u00e9nine (A), la thymine (T), la cytosine (C) et la guanine (G). Elles s'associent deux par deux : A avec T d'une part, C avec G d'autre part. </p> <p>Exercice 1</p> <p>Le but de l'exercice est de d\u00e9finir un module <code>adn</code> contenant la constante et les fonctions suivantes :</p> <ol> <li>La constante <code>BASES_ASSOCIEES = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}</code>.</li> <li>La fonction <code>sequence_alea</code> qui prend en param\u00e8tre d'entr\u00e9e un entier <code>n</code> positif et renvoie une s\u00e9quence d'ADN al\u00e9atoire de longueur <code>n</code> sous la forme de cha\u00eene de caract\u00e8res.</li> <li>La fonction <code>complementaire</code> qui prend en param\u00e8tre d'entr\u00e9e une cha\u00eene de caract\u00e8res <code>brin</code> et renvoie le brin compl\u00e9mentaire sous forme de cha\u00eene de caract\u00e8res.</li> <li>La fonction <code>proportionAT</code> qui prend en param\u00e8tre d'entr\u00e9e une cha\u00eene <code>brin</code> et renvoie la proportion de bases A/T pr\u00e9sentes dans le brin. Le valeur renvoy\u00e9e est donc un flottant.</li> </ol> <p>Impl\u00e9mentez ce module <code>adn</code>, en documentant chaque fonction \u00e0 l'aide d'une docstring contenant ce que fait la fonction, la liste de ses param\u00e8tres d'entr\u00e9e et leur type ainsi que le type de la valeur de retour.</p> <p>Aide - Exercice 1</p> <ul> <li>Pour la fonction <code>sequence_alea</code>, vous pourrez utiliser la fonction <code>choice</code> du module <code>random</code>, qui renvoie une valeur al\u00e9atoire dans une liste.</li> <li>Pour la fonction <code>proportionAT</code>, on calcule la proportion en divisant le nombre de bases A et T par la longueur du brin d'ADN.</li> </ul> Correction - Exercice 1 <p>Voici le module <code>adn</code> corrig\u00e9 :</p> <pre><code>from random import choice  # importer fonction choice du module random\n\n# D\u00e9finir constante BASES_ASSOCIEES :\nBASES_ASSOCIEES = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}\n\ndef sequence_alea(n: int) -&gt; str:\n    ''' Renvoie une s\u00e9quence ADN al\u00e9atoire de longueur n\n    sous la forme de cha\u00eene de caract\u00e8res.\n    :param n: (int) taille de la s\u00e9quence \u00e0 g\u00e9n\u00e9rer\n    :return: (str) une s\u00e9quence ADN al\u00e9atoire '''\n\n    res = \"\"\n    bases = [key for key in BASES_ASSOCIEES]\n    for _ in range(n):\n        res += choice(bases)\n    return res\n\ndef complementaire(brin: str) -&gt; str:\n    ''' Renvoie le brin compl\u00e9mentaire du brin donn\u00e9.\n    :param brin: (str) un brin d'ADN\n    :return: (str) le brin compl\u00e9mentaire '''\n\n    res = \"\"\n    for base in brin:\n        res += BASES_ASSOCIEES[base]\n    return res\n\ndef proportionAT(brin: str) -&gt; float:\n    ''' Renvoie la proportion de bases A/T pr\u00e9sentes dans le brin.\n    :param brin: (str) un brin d'ADN\n    :return: (float) proportion de bases A/T '''\n\n    compteur = 0\n    for base in brin:\n        if base == 'A' or base == 'T':\n            compteur += 1\n    return compteur / len(brin)\n</code></pre> <p>Exercice 2</p> <p>On souhaite maintenant utiliser ce module <code>adn</code> (\u00e9crit dans un fichier <code>adn.py</code>).\\newline</p> <p>\u00c9crivez un nouveau script Python (incluant les imports n\u00e9cessaires du module <code>adn</code>) qui r\u00e9alise le programme suivant :</p> <ul> <li>demande \u00e0 l'utilisateur de saisir un nombre <code>n</code>,</li> <li>g\u00e9n\u00e8re <code>n</code> s\u00e9quences d'ADN al\u00e9atoires de taille <code>10</code>,</li> <li>affiche enfin la plus grande proportion de bases A/T parmi toutes les s\u00e9quences g\u00e9n\u00e9r\u00e9es, ainsi que la s\u00e9quence associ\u00e9e. Exemple d'affichage : <code>\"s\u00e9quence : ATCTCGCATA - proportion : 0.6\"</code>.</li> </ul> <p>Pour rappel, la fonction <code>input</code> permet de demander \u00e0 l'utilisateur de saisir une valeur, et de la r\u00e9cup\u00e9rer sous la forme d'une cha\u00eene de caract\u00e8res (il sera donc peut-\u00eatre n\u00e9cessaire de convertir la valeur en <code>int</code> en utilisant la fonction <code>int()</code>).</p> <p>Il n'est pas n\u00e9cessaire d'\u00e9crire une docstring ici.</p> Correction - Exercice 2 <p>Dans un nouveau script Python, il faut donc importer le module <code>adn</code> que nous avons cr\u00e9\u00e9 afin d'utiliser ses fonctions dans notre programme.</p> <p>En l'occurence, j'ai fait le choix d'importer uniquement les fonctions n\u00e9cessaires, c'est-\u00e0-dire <code>sequence_alea</code> et <code>proportionAT</code>.</p> <pre><code>from adn import sequence_alea, proportionAT\n\nn = int(input(\"Saisissez un nombre n : \"))  # demander \u00e0 l'utilisateur de saisir un nombre\nsequence_max = None  # initialiser la s\u00e9quence avec le max de bases A/T \u00e0 None\nproportion_max = 0  # initialiser la proportion max de bases A/T \u00e0 0\nfor _ in range(n):  # it\u00e9rer n fois\n    sequence = sequence_alea(10)  # g\u00e9n\u00e9rer une s\u00e9quence ADN de taille 10\n    proportion = proportionAT(sequence)  # obtenir la proportion de bases A/T\n    if proportion &gt; proportion_max:  # si la proportion de bases A/T est sup\u00e9rieure au max actuel\n        proportion_max = proportion  # on remplace la proportion max actuelle par celle que l'on a trouv\u00e9\n        sequence_max = sequence  # on remplace l'ancienne s\u00e9quence stock\u00e9e par la nouvelle\nprint(f's\u00e9quence : {sequence_max} - proportion : {proportion_max}')  # afficher r\u00e9sultat\n</code></pre> <p>On peut \u00e9galement importer le module <code>adn</code> avec l'instruction <code>import adn</code>, auquel cas l'appel des fonctions du module sera de la forme <code>adn.&lt;NOM_FONCTION&gt;</code>, comme ceci :</p> <pre><code>import adn\n\nn = int(input(\"Saisissez un nombre n : \"))\nsequence_max = None\nproportion_max = 0\nfor _ in range(n):\n    sequence = adn.sequence_alea(10)\n    proportion = adn.proportionAT(sequence)\n    if proportion &gt; proportion_max:\n        proportion_max = proportion\n        sequence_max = sequence\nprint(f's\u00e9quence : {sequence_max} - proportion : {proportion_max}')\n</code></pre>"},{"location":"terminale/mise_au_point/ds1/#mise-au-point-et-tests","title":"Mise au point et tests","text":""},{"location":"terminale/mise_au_point/preliminaire/","title":"Activit\u00e9 pr\u00e9liminaire","text":""},{"location":"terminale/mise_au_point/preliminaire/#activite-preliminaire","title":"Activit\u00e9 pr\u00e9liminaire","text":"<p>Source</p> <p>Inspir\u00e9 d'une activit\u00e9 du Hachette NSI Terminale.</p>"},{"location":"terminale/mise_au_point/preliminaire/#ajouter-des-traces","title":"Ajouter des traces","text":"<p>La fonction suivante a \u00e9t\u00e9 \u00e9crite par un \u00e9l\u00e8ve de premi\u00e8re suite \u00e0 une consigne de son professeur pour impl\u00e9menter l\u2019algorithme de recherche dichotomique.</p> <p>La docstring, pr\u00e9sent\u00e9 dans la fonction, sp\u00e9cifie ce qu'elle est cens\u00e9e faire.</p> <pre><code>def recherche(t, v):\n    ''' Renvoie l'indice de l'\u00e9l\u00e9ment v dans le tableau t.\n    Si l'\u00e9l\u00e9ment n'est pas trouver, renvoie -1.\n    :param t: (list) un tableau d'entiers\n    :param v: (int) l'entier \u00e0 chercher\n    :return: (int) l'indice de l'\u00e9l\u00e9ment s'il est trouv\u00e9, ou -1 sinon '''\n\n    gauche = 0\n    droite = len(t)\n    while gauche &lt; droite:\n        milieu = (gauche+droite) // 2\n        if t[milieu] &lt; v:\n            gauche = milieu\n        else:\n            droite = milieu\n    return droite\n</code></pre> <p>Exercice 1</p> <p>Copier le programme ci-dessus dans l\u2019\u00e9diteur de script de Thonny</p> <ol> <li>Tester la fonction recherche avec le tableau <code>[2, 3, 4, 6, 7]</code> et la valeur 5. Qu\u2019observe-t-on ? La fonction est-elle correcte ?</li> <li> <p>Ajouter des instructions <code>print</code> pour afficher les valeurs des variables au cours de l\u2019ex\u00e9cution. Pour vous aider, vous pouvez \u00e9galement utiliser un <code>assert</code> pour tester l'invariant, ainsi qu'un <code>assert</code> pour tester le variant. On rappelle l'invariant de la recherche dichotomique : \u00ab Si l'\u00e9l\u00e9ment recherch\u00e9 <code>v</code> est pr\u00e9sent dans le tableau, alors <code>v</code> est compris entre l'\u00e9l\u00e9ment d'indice <code>gauche</code> et l'\u00e9l\u00e9ment d'indice <code>droite</code> \u00bb. On peut \u00e9crire l'assertion v\u00e9rifiant cet invariant de la mani\u00e8re suivante : </p><pre><code>assert v not in t or (v &gt;= t[gauche] and v &lt;= t[droite]) ### ajout invariant\n</code></pre> Autrement dit, soit <code>v</code> n'est pas dans le tableau, soit (si <code>v</code> est dans le tableau) <code>v</code> est compris entre les \u00e9l\u00e9ments d'indices <code>gauche</code> et <code>droite</code>. Pour ce qui est du variant, il s'agit de <code>droite - gauche + 1</code> (quantit\u00e9 positive et strictement d\u00e9croissante). Il faut v\u00e9rifier que cette quantit\u00e9 diminue \u00e0 chaque it\u00e9ration de la boucle. </li> <li> <p>Identifier la ou les erreurs \u00e0 l\u2019aide de ces traces et les corriger.</p> </li> </ol> Corrig\u00e9 d\u00e9taill\u00e9 exercice 1 <ol> <li>Lorsque l'on ex\u00e9cute la fonction telle qu'elle est donn\u00e9e, on se rend compte que l'ex\u00e9cution ne se termine pas. On peut donc deviner que la boucle <code>while</code> it\u00e8re ind\u00e9finiment.</li> <li>En ajoutant une instruction <code>print</code> pour voir le contenu des variables <code>gauche</code>, <code>milieu</code> et <code>droite</code>, on voit qu'\u00e0 un certain stade, les valeurs de <code>gauche</code> et de <code>droite</code> ne changent plus, ainsi la condition d'arr\u00eat du <code>while</code> n'est jamais rencontr\u00e9e :  Si l'on teste notre variant <code>droite - gauche + 1</code> avec une assertion, en modifiant le code de la mani\u00e8re suivante : <pre><code>def recherche(t, v):\n    gauche = 0\n    droite = len(t)\n    amplitude = droite - gauche + 1  # On stocke la valeur initiale du variant\n    while gauche &lt; droite:\n        milieu = (gauche+droite) // 2\n        print(f'gauche = {gauche} | milieu = {milieu} | droite = {droite}')\n        if t[milieu] &lt; v:\n            gauche = milieu \n        else:\n            droite = milieu\n        assert droite - gauche + 1 &lt; amplitude, 'variant non v\u00e9rifi\u00e9'\n        amplitude = droite - gauche\n    return droite\n</code></pre> En ex\u00e9cutant le programme, on obtient une <code>assertionError</code> : notre variant n'est pas v\u00e9rifi\u00e9, ce qui prouve donc que le programme ne se termine pas.  Par ailleurs, si on teste l'invariant, en rajoutant une assertion de la mani\u00e8re suivante : <pre><code>def recherche(t, v):\ngauche = 0\ndroite = len(t)\namplitude = droite - gauche + 1  # On stocke la valeur initiale du variant\nwhile gauche &lt; droite:\n    milieu = (gauche+droite) // 2\n    print(f'gauche = {gauche} | milieu = {milieu} | droite = {droite}')\n    if t[milieu] &lt; v:\n        gauche = milieu \n    else:\n        droite = milieu\n    assert v &gt;= t[gauche] and v &lt;= t[droite] ### ajout invariant\n    assert droite - gauche + 1 &lt; amplitude, 'variant non v\u00e9rifi\u00e9'\n    amplitude = droite - gauche\nreturn droite\n</code></pre> On obtient l'erreur suivante :  La valeur recherch\u00e9e doit toujours \u00eatre comprise entre l'\u00e9l\u00e9ment d'indice <code>gauche</code> et l'\u00e9l\u00e9ment d'indice <code>droite</code>. Or, l'\u00e9l\u00e9ment d'indice <code>droite</code> vaut initialement <code>len(t)</code>, alors que sa valeur devrait correspondre \u00e0 l'indice du dernier \u00e9l\u00e9ment du tableau, soit <code>len(t) - 1</code>, d'o\u00f9 l'erreur obtenue : <code>len(t)</code> ne correspond pas \u00e0 un indice du tableau.</li> <li>Finalement, voici une liste des diff\u00e9rentes erreurs que comporte la fonction donn\u00e9e :<ol> <li><code>droite</code> doit \u00eatre \u00e9gal \u00e0 l'indice du dernier \u00e9l\u00e9ment du tableau, soit <code>len(t) - 1</code></li> <li>Lorsque <code>t[milieu] &lt; v</code> (l'\u00e9l\u00e9ment recherch\u00e9 est plus grand que l'\u00e9l\u00e9ment du milieu), on sait que l'on doit r\u00e9-effectuer la recherche dans la partie du tableau \u00e0 droite de l'\u00e9l\u00e9ment du milieu. Or, dans la fonction donn\u00e9e, <code>gauche</code> prend la valeur de l'indice stock\u00e9 dans <code>milieu</code>, alors que l'on sait que l'\u00e9l\u00e9ment associ\u00e9 \u00e0 l'indice <code>milieu</code> ne peut pas \u00eatre l'\u00e9l\u00e9ment recherch\u00e9. <code>gauche</code> doit donc prendre la valeur de l'indice juste \u00e0 droite de <code>milieu</code>, soit <code>milieu + 1</code>.</li> <li>Lorsque <code>t[milieu] &gt; v</code> (l'\u00e9l\u00e9ment recherch\u00e9 est plus petit que l'\u00e9l\u00e9ment du milieu), on sait que l'on soit r\u00e9-effectuer la recherche dans la partie du tableau \u00e0 gauche de l'\u00e9l\u00e9ment du milieu. Donc, <code>droite</code> doit prendre la valeur de l'indice juste \u00e0 gauche de <code>milieu</code>, soit <code>milieu - 1.</code></li> <li>Actuellement, la boucle continue tant que <code>gauche &lt; droite</code>. Or, on oublie le cas o\u00f9 <code>gauche = droite</code>, auquel cas on doit rester dans la boucle. On ne doit sortir de la boucle que lorsque <code>gauche &gt; droite</code>. Ainsi, la condition du <code>while</code> doit devenir : <code>gauche &lt;= droite</code>.</li> <li>On oublie de traiter un cas \u00e0 l'int\u00e9rieur du <code>while</code> : celui o\u00f9 l'\u00e9l\u00e9ment <code>t[milieu]</code> correspond \u00e0 l'\u00e9lement <code>v</code> recherch\u00e9 : dans ce cas, selon la docstring, on doit renvoyer l'indice de l'\u00e9l\u00e9ment trouv\u00e9, c'est \u00e0 dire <code>milieu</code>.</li> <li>Enfin, lorsque l'on sort de la boucle <code>while</code>, c'est-\u00e0-dire lorsque l'\u00e9l\u00e9ment recherche n'a pas \u00e9t\u00e9 trouv\u00e9, la docstring indique que l'on doit renvoyer <code>-1</code>, et non pas l'indice stock\u00e9 dans <code>droite</code>. Il faut en effet toujours faire en sorte que notre fonction respecte la sp\u00e9cification, c'est-\u00e0-dire qu'elle fait bien ce qui est attendu.</li> </ol> </li> </ol> <p>Finalement, voici la bonne impl\u00e9mentation de cette fonction, apr\u00e8s avoir corrig\u00e9 toutes ces erreurs, ajout\u00e9 des <code>print</code> pour afficher une trace d'ex\u00e9cution, ajout\u00e9 une assertion pour le variant et pour l'invariant : </p><pre><code>def recherche(t, v):\n    print(t, v) # TRACE\n    gauche = 0\n    droite = len(t) - 1\n    amplitude = droite - gauche + 1  # On stocke la valeur initiale du variant\n    while gauche &lt;= droite:\n        milieu = (gauche+droite) // 2\n        print(f'gauche = {gauche} | milieu = {milieu} | droite = {droite}')\n        if t[milieu] == v:\n            return milieu\n        elif t[milieu] &lt; v:\n            gauche = milieu + 1\n        else:\n            droite = milieu - 1\n        assert v not in t or (v &gt;= t[gauche] and v &lt;= t[droite]) ### ajout invariant\n        print(f'variant = {droite - gauche + 1}')\n        assert droite - gauche + 1 &lt; amplitude, 'variant non v\u00e9rifi\u00e9'\n        amplitude = droite - gauche\n    return -1\n</code></pre> Fonction finale uniquement exercice 1 <p>Voici la bonne impl\u00e9mentation de cette fonction, apr\u00e8s avoir corrig\u00e9 toutes les erreurs, ajout\u00e9 des <code>print</code> pour afficher une trace d'ex\u00e9cution, ajout\u00e9 une assertion pour le variant et pour l'invariant :</p> <pre><code>def recherche(t, v):\n    ''' Renvoie l'indice de l'\u00e9l\u00e9ment v dans le tableau t.\n    Si l'\u00e9l\u00e9ment n'est pas trouver, renvoie -1.\n    :param t: (list) un tableau d'entiers\n    :param v: (int) l'entier \u00e0 chercher\n    :return: (int) l'indice de l'\u00e9l\u00e9ment s'il est trouv\u00e9, ou -1 sinon '''\n\n    print(t, v) # TRACE\n    gauche = 0\n    droite = len(t) - 1\n    amplitude = droite - gauche + 1  # On stocke la valeur initiale du variant\n    while gauche &lt;= droite:\n        milieu = (gauche+droite) // 2\n        print(f'gauche = {gauche} | milieu = {milieu} | droite = {droite}')\n        if t[milieu] == v:\n            return milieu\n        elif t[milieu] &lt; v:\n            gauche = milieu + 1\n        else:\n            droite = milieu - 1\n        assert v not in t or (v &gt;= t[gauche] and v &lt;= t[droite]) ### ajout invariant\n        print(f'variant = {droite - gauche + 1}')\n        assert droite - gauche + 1 &lt; amplitude, 'variant non v\u00e9rifi\u00e9'\n        amplitude = droite - gauche\n    return -1\n</code></pre>"},{"location":"terminale/mise_au_point/preliminaire/#utiliser-un-debogueur","title":"Utiliser un d\u00e9bogueur","text":"<p>L\u2019impl\u00e9mentation suivante de l\u2019algorithme de tri par s\u00e9lection contient elle aussi des erreurs.</p> <pre><code>def tri(t):\n    ''' Effectue un tri par s\u00e9lection en place du tableau entr\u00e9.\n    :param t: (list) Une liste d'\u00e9l\u00e9ments \u00e0 trier\n    :return: (None) On ne renvoie rien '''\n\n    for i in range(len(t)):\n        jmin = i\n        for j in range(i, len(t)):\n            if t[j] &lt;= t[jmin]:\n                jmin = j\n        if jmin != i:\n            t[i] = t[jmin]\n            t[jmin] = t[i]\n</code></pre> <p>Exercice 2</p> <p>Nous allons utiliser un outil de mise au point appel\u00e9 d\u00e9bogueur (ou debugger en anglais).</p> <ol> <li>Copier le programme ci-dessus dans l\u2019\u00e9diteur de script de Thonny et ajouter une instruction qui appelle la fonction <code>tri</code> avec le tableau <code>[4, 2, 6, 7, 1, 8]</code>.</li> <li>Ex\u00e9cuter le programme. Qu\u2019observe-t-on ?</li> <li>Lancer le programme avec le d\u00e9bogueur de Thonny (l'ic\u00f4ne juste \u00e0 droite de celle permettant d'ex\u00e9cuter un script). Vous pouvez \u00e9galement mettre des points d'arr\u00eat sur des lignes pr\u00e9cises pour pouvoir ex\u00e9cuter votre programme normalement et ne l'arr\u00eater qu'\u00e0 ces points d\u00e9finis en vue du d\u00e9boguage. Un autre outil bien sympathique pour vous aider \u00e0 d\u00e9boguer un programme  Python Tutor.</li> <li>Identifier la ou les erreurs \u00e0 l\u2019aide du d\u00e9bogueur et les corriger.</li> </ol>"},{"location":"terminale/modularite/","title":"Modularit\u00e9","text":""},{"location":"terminale/modularite/#modularite","title":"Modularit\u00e9","text":"Liste des contenus Description Activit\u00e9 - Utilisation d'une API Utilisation d'une API dans un programme Python. Gestion de modules Appeler, cr\u00e9er et utiliser des modules Python."},{"location":"terminale/modularite/api/","title":"Activit\u00e9 - Utilisation d'une API","text":"Ressources <ul> <li>Les diff\u00e9rents types d'API</li> </ul>"},{"location":"terminale/modularite/api/#les-api","title":"Les API","text":"<p>Une API (Application Programming Interface) permet aux d\u00e9veloppeurs d'int\u00e9grer une application \u00e0 une autre. Cela peut permettre par exemple de r\u00e9cup\u00e9rer des donn\u00e9es structur\u00e9es depuis un site web pour les exploiter de mani\u00e8re automatis\u00e9e dans un programme.</p> <p>Il existe diff\u00e9rents types d'API, notamment les API Web permettant d'acc\u00e9der \u00e0 des donn\u00e9es. Pour ce type d'API, une m\u00e9thode consiste \u00e0 \u00e9mettre une requ\u00eate HTTP permettant de r\u00e9cup\u00e9rer des donn\u00e9es sur un serveur web.</p> <p>Il existe diff\u00e9rents formats structurants de donn\u00e9es, notamment le format XML (proche du HTML) et le format JSON, qui sont devenus des standards.</p> <p>Voici quelques exemples d'API :</p> <ul> <li>https://openweathermap.org/api - Diverses API concernant le climat et la m\u00e9t\u00e9o,</li> <li>https://openfoodfacts.org/data - Base de donn\u00e9es collaborative, libre et ouverte des produits alimentaires du monde entier,</li> <li>https://openstreetmap.fr/ - Un projet collaboratif de cartographie en ligne qui vise \u00e0 constituer une base de donn\u00e9es g\u00e9ographiques libre du monde, en utilisant le syst\u00e8me GPS et d'autres donn\u00e9es libres.</li> </ul>"},{"location":"terminale/modularite/api/#activite-recuperer-la-meteo-dans-un-programme-python","title":"Activit\u00e9 - R\u00e9cup\u00e9rer la m\u00e9t\u00e9o dans un programme Python","text":"<p>Pour cette activit\u00e9, on souhaite r\u00e9cup\u00e9rer des donn\u00e9es sur la m\u00e9t\u00e9o de diff\u00e9rentes villes en utilisant les donn\u00e9es fournies par l'API de openweathermap.org.</p> <p>Plus pr\u00e9cis\u00e9ment, on utilisera la m\u00e9t\u00e9o actuelle, vous pouvez vous rendre sur cette page pour voir les diff\u00e9rentes fa\u00e7ons de faire un appel avec l'API. Vous pouvez notamment utiliser la latitude, la longitude, le nom de la ville, le code postal... openweathermap fournit des donn\u00e9es en JSON, XML et HTML. Nous utiliserons ici le format JSON.</p> <p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>meteo.py : Programme initial \u00e0 compl\u00e9ter</li> </ul> <p>Le module <code>requests</code> de Python permet d'effectuer des appels d'API \u00e0 l'aide de requ\u00eates HTTP, et ainsi de de r\u00e9cup\u00e9rer des donn\u00e9es sur le web au format JSON et de les int\u00e9grer dans un dictionnaire.</p> <p>Utilisation du programme</p> <p>Ouvrez le script <code>meteo.py</code> dans Thonny (ou dans votre IDE pr\u00e9f\u00e9r\u00e9), puis ex\u00e9cutez-le.</p> <p>En appelant <code>get_weather('Paris')</code>, vous devriez obtenir quelque chose comme ceci : </p><pre><code>{'coord': {'lon': 2.3488, 'lat': 48.8534}, \n'weather': [{'id': 800, 'main': 'Clear', 'description': 'clear sky', 'icon': '01n'}], \n'base': 'stations', \n'main': {'temp': 23.67, 'feels_like': 24, 'temp_min': 20.32, 'temp_max': 24.52, 'pressure': 1024, 'humidity': 73}, \n'visibility': 10000, \n'wind': {'speed': 5.14, 'deg': 60}, \n'clouds': {'all': 0}, \n'dt': 1693777827, \n'sys': {'type': 2, 'id': 2041230, 'country': 'FR', 'sunrise': 1693717783, 'sunset': 1693765857}, \n'timezone': 7200, \n'id': 2988507, \n'name': 'Paris', \n'cod': 200}\n</code></pre> <p>Remarque 1 : Les f-strings</p> <p>Lorsque vous souhaitez int\u00e9grer la valeur d'une variable \u00e0 une cha\u00eene de caract\u00e8res, vous avez sans doute l'habitude d'utiliser la concat\u00e9nation (avec le symbole <code>+</code>). Par exemple :</p> <pre><code>&gt;&gt;&gt; prenom = 'Erwan'\n&gt;&gt;&gt; 'Bonjour ' + prenom + ' !'\n'Bonjour Erwan !'\n</code></pre> <p>Dans la fonction <code>get_weather</code> de notre programme, vous pouvez voir la ligne suivante (ligne 12): </p><pre><code>url = f\"https://api.openweathermap.org/data/2.5/weather?q={ville},{PAYS}&amp;appid={API_KEY}&amp;units=metric\"\n</code></pre> <p>Ici, la cha\u00eene de caract\u00e8res cr\u00e9\u00e9e est un peu particuli\u00e8re : il s'agit d'une f-string. Une f-string permet d'int\u00e9grer facilement des variables \u00e0 une cha\u00eene de caract\u00e8res. Il suffit de rajouter un <code>f</code> devant la cha\u00eene de caract\u00e8res, puis de mettre le nom des variables entre accolades. De cette mani\u00e8re, les noms des variables entre accolades seront remplac\u00e9s par la valeur qui leur est associ\u00e9e.</p> <p>En reprenant l'exemple pr\u00e9c\u00e9dent :</p> <pre><code>&gt;&gt;&gt; prenom = 'Erwan'\n&gt;&gt;&gt; f'Bonjour {prenom} !'\n'Bonjour Erwan !'\n</code></pre> <p>Remarque 2 : Les annotations de types</p> <p>Chaque fonction de notre fichier <code>meteo.py</code> utilise ce que l'on appelle des annotations de types. Par exemple, si l'on regarde l'en-t\u00eate de la fonction <code>get_weather</code> :</p> <pre><code>def get_weather(ville: str) -&gt; dict:\n</code></pre> <p>Ici, on indique que la param\u00e8tre <code>ville</code> doit \u00eatre de type <code>str</code> (une cha\u00eene de caract\u00e8res), et que la fonction doit renvoyer un dictionnaire. Il s'agit simplement d'une indication qui n'a aucun effet sur l'ex\u00e9cution du programme.</p> <p>On aurait pu, \u00e0 la place, donner ces indications dans la docstring, par exemple :</p> <pre><code>def get_weather(ville: str) -&gt; dict:\n    ''' Renvoie un dictionnaire contenant les donn\u00e9es sur la m\u00e9t\u00e9o actuelle de la ville entr\u00e9e.\n    :param ville: (str) Le nom de la ville dont on souhaite obtenir la m\u00e9t\u00e9o\n    :return: (dict) Le dictionnaire contenant les donn\u00e9es sur la m\u00e9t\u00e9o\n    '''\n</code></pre> <p>Si l'on regarde l'en-t\u00eate de notre fonction <code>get_temp_from_lat_long</code> :</p> <pre><code>def get_temp_from_lat_long(lat: float, long: float) -&gt; None:\n</code></pre> <p>On peut voir qu'elle doit renvoyer un objet de type <code>None</code> : autrement dit, elle ne doit rien renvoyer. (Effectivement, il s'agit d'une fonction qui doit simplement afficher quelque chose. Les fonctions qui ne renvoient rien peuvent \u00e9galement \u00eatre appel\u00e9es proc\u00e9dures.)</p> <p>Exercice 1</p> <p>Compl\u00e9tez la fonction <code>temperature_ressentie</code>, r\u00e9utilisant la fonction <code>get_weather</code>, permettant d'afficher la temp\u00e9rature ressentie (feels_like) dans une ville donn\u00e9e en entr\u00e9e. Le message affich\u00e9 doit \u00eatre de la forme <code>Temp\u00e9rature ressentie \u00e0 Paris : 15.72 \u00b0C.</code> si l'on donne en entr\u00e9e <code>\"Paris\"</code> \u00e0 la fonction.</p> Corrig\u00e9 exercice 1 <p>Il faut simplement r\u00e9cup\u00e9rer les donn\u00e9es sur la ville pass\u00e9e en argument \u00e0 la fonction, en rappelant la fonction <code>get_weather</code>, puis afficher avec <code>print</code> la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>feels_like</code> du dictionnaire lui-m\u00eame associ\u00e9 \u00e0 la cl\u00e9 <code>main</code> du dictionnaire principal :</p> <pre><code>def temperature_ressentie(ville: str) -&gt; None:\n    ''' Affiche la temp\u00e9rature ressentie (en degr\u00e9s) dans la ville sp\u00e9cifi\u00e9e. '''\n\n    donnees = get_weather(ville)\n    print(f\"Temp\u00e9rature ressentie \u00e0 {ville} : {donnees['main']['feels_like']} \u00b0C.\")\n</code></pre> <p>Un petit test dans la console de Thonny donnera quelque chose comme ceci :</p> <pre><code>&gt;&gt;&gt; temperature_ressentie('Paris')\nTemp\u00e9rature ressentie \u00e0 Paris : 33.02 \u00b0C.\n</code></pre> <p>Rappel</p> <p>En bas du script, vous pouvez voir le bloc de code suivant : </p><pre><code>if __name__ == '__main__':\n    ''' Instructions ex\u00e9cut\u00e9es si l'on ex\u00e9cute ce fichier directement '''\n\n    pass\n</code></pre> <p>Les instructions saisies dans ce bloc ne seront prises en compte que si le script est ex\u00e9cut\u00e9 directement. Si <code>meteo.py</code> est import\u00e9 dans un autre script, ces instructions seront ignor\u00e9es.</p> <p>Exercice 2</p> <p>En vous inspirant des deux fonctions pr\u00e9c\u00e9dentes, compl\u00e9tez la fonction <code>get_temp_from_lat_long</code> permettant d'afficher la temp\u00e9rature (temp) d'un lieu localis\u00e9 par sa valeur de latitude et de longitude (voir documentation si besoin).</p> <p>Faites le test avec <code>lat = 49.23588940429046, long = 2.135797340968115</code> (localisation de M\u00e9ru).</p> <p>Dans votre url utilis\u00e9e pour l'appel, vous utiliserez la cl\u00e9 d'API contenue dans la variable globale <code>API_KEY</code>.</p> Temp\u00e9rature en degr\u00e9s celsius <p>Par d\u00e9faut, les temp\u00e9ratures obtenues sont en degr\u00e9s Kelvin. Si vous souhaitez obtenir les temp\u00e9ratures en degr\u00e9s Celsius, il faut indiquer dans la requ\u00eate HTTP que l'on souhaite utiliser le syst\u00e8me m\u00e9trique.</p> <p>Pour cela, il faut ajouter le param\u00e8tre <code>units</code> avec la valeur <code>metric</code> \u00e0 votre requ\u00eate. Autrement dit, \u00e0 la fin de votre URL, vous devez ajouter <code>&amp;units=metric</code> (le <code>&amp;</code> permet de faire la s\u00e9paration avec le param\u00e8tre pr\u00e9c\u00e9dent).</p> Corrig\u00e9 exercice 2 <p>On s'inspire du code des fonctions <code>get_weather</code> et <code>temperature_ressentie</code> :</p> <pre><code>def get_temp_from_lat_long(lat: float, long: float) -&gt; None:\n    ''' Affiche la temp\u00e9rature (en degr\u00e9s) d'une ville dont on fournit la latitude et la longitude. '''\n\n    url = f\"https://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;lon={long}&amp;appid={API_KEY}&amp;units=metric\"\n    r = requests.get(url)\n    donnees = r.json()\n\n    print(f\"Temp\u00e9rature : {donnees['main']['temp']} \u00b0C.\")\n</code></pre> <p>On souhaite maintenant obtenir les pr\u00e9visions m\u00e9t\u00e9o d'une ville de mani\u00e8re \u00e0 afficher une courbe d'\u00e9volution de la temp\u00e9rature (temp) pr\u00e9vue. L'API permet d'obtenir les pr\u00e9visions des 5 prochains jours, \u00e0 raison d'une mesure toutes les 3 heures. La page documentant les appels d'API permettant d'obtenir ces pr\u00e9visions est la suivante : https://openweathermap.org/forecast5.</p> <p>Ainsi, on obtiendra une liste de 40 mesures, la premi\u00e8re mesure correspondant aux donn\u00e9es sur la m\u00e9t\u00e9o \u00e0 l'heure actuelle, la deuxi\u00e8me mesure correspondant \u00e0 la m\u00e9t\u00e9o pr\u00e9vue dans 3 heures, la troisi\u00e8me \u00e0 celle pr\u00e9vue dans 6 heures, et ainsi de suite...</p> <p>Si l'on regarde un exemple de r\u00e9ponse de l'API :</p> Exemple de r\u00e9ponse de l'API <pre><code>{\n\"cod\": \"200\",\n\"message\": 0,\n\"cnt\": 40,\n\"list\": [\n    {\n    \"dt\": 1661871600,\n    \"main\": {\n        \"temp\": 296.76,\n        \"feels_like\": 296.98,\n        \"temp_min\": 296.76,\n        \"temp_max\": 297.87,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 933,\n        \"humidity\": 69,\n        \"temp_kf\": -1.11\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10d\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 100\n    },\n    \"wind\": {\n        \"speed\": 0.62,\n        \"deg\": 349,\n        \"gust\": 1.18\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.32,\n    \"rain\": {\n        \"3h\": 0.26\n    },\n    \"sys\": {\n        \"pod\": \"d\"\n    },\n    \"dt_txt\": \"2022-08-30 15:00:00\"\n    },\n    {\n    \"dt\": 1661882400,\n    \"main\": {\n        \"temp\": 295.45,\n        \"feels_like\": 295.59,\n        \"temp_min\": 292.84,\n        \"temp_max\": 295.45,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 931,\n        \"humidity\": 71,\n        \"temp_kf\": 2.61\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10n\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 96\n    },\n    \"wind\": {\n        \"speed\": 1.97,\n        \"deg\": 157,\n        \"gust\": 3.39\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.33,\n    \"rain\": {\n        \"3h\": 0.57\n    },\n    \"sys\": {\n        \"pod\": \"n\"\n    },\n    \"dt_txt\": \"2022-08-30 18:00:00\"\n    },\n    {\n    \"dt\": 1661893200,\n    \"main\": {\n        \"temp\": 292.46,\n        \"feels_like\": 292.54,\n        \"temp_min\": 290.31,\n        \"temp_max\": 292.46,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 931,\n        \"humidity\": 80,\n        \"temp_kf\": 2.15\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10n\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 68\n    },\n    \"wind\": {\n        \"speed\": 2.66,\n        \"deg\": 210,\n        \"gust\": 3.58\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.7,\n    \"rain\": {\n        \"3h\": 0.49\n    },\n    \"sys\": {\n        \"pod\": \"n\"\n    },\n    \"dt_txt\": \"2022-08-30 21:00:00\"\n    },\n    ....\n    {\n    \"dt\": 1662292800,\n    \"main\": {\n        \"temp\": 294.93,\n        \"feels_like\": 294.83,\n        \"temp_min\": 294.93,\n        \"temp_max\": 294.93,\n        \"pressure\": 1018,\n        \"sea_level\": 1018,\n        \"grnd_level\": 935,\n        \"humidity\": 64,\n        \"temp_kf\": 0\n    },\n    \"weather\": [\n        {\n        \"id\": 804,\n        \"main\": \"Clouds\",\n        \"description\": \"overcast clouds\",\n        \"icon\": \"04d\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 88\n    },\n    \"wind\": {\n        \"speed\": 1.14,\n        \"deg\": 17,\n        \"gust\": 1.57\n    },\n    \"visibility\": 10000,\n    \"pop\": 0,\n    \"sys\": {\n        \"pod\": \"d\"\n    },\n    \"dt_txt\": \"2022-09-04 12:00:00\"\n    }\n],\n\"city\": {\n    \"id\": 3163858,\n    \"name\": \"Zocca\",\n    \"coord\": {\n    \"lat\": 44.34,\n    \"lon\": 10.99\n    },\n    \"country\": \"IT\",\n    \"population\": 4593,\n    \"timezone\": 7200,\n    \"sunrise\": 1661834187,\n    \"sunset\": 1661882248\n}\n}\n</code></pre> <p>On peut voir qu'une liste Python est associ\u00e9e \u00e0 la cl\u00e9 <code>list</code> du dictionnaire principal obtenu. Ce tableau contient lui-m\u00eame 40 dictionnaires, chacun correspondant \u00e0 une mesure de la m\u00e9t\u00e9o.</p> <p>Voici un exemple de graphe affichant la comparaison entre l'\u00e9volution de la temp\u00e9rature de la ville de Paris et celle de la ville de M\u00e9ru, sur les 5 prochains jours :</p> <p> </p> Courbes d'\u00e9volution des temp\u00e9ratures <p>Exercice 3</p> <p>Compl\u00e9tez la fonction <code>compare_two_cities</code> prenant deux noms de villes en entr\u00e9e, et affichant un graphe contenant les courbes d'\u00e9volution de la temp\u00e9rature de ces deux villes.</p> <p>Faites le test avec deux villes de votre choix.</p> <p>Pour proc\u00e9der, vous pouvez d\u00e9couper votre travail en 3 \u00e9tapes :</p> <p>\u00c9tape 1 : R\u00e9cup\u00e9rer les dictionnaires contenant les donn\u00e9es sur la ville 1 et sur la ville 2. Pour vous aider (et parce qu'on manipule des objets, notion qui n'a pas encore \u00e9t\u00e9 \u00e9tudi\u00e9e), je vous donne le code permettant de r\u00e9cup\u00e9rer et de stocker ces donn\u00e9es dans une variable <code>r1</code> pour la ville 1 et <code>r2</code> pour la ville 2 :</p> <pre><code>    url1 = f\"https://api.openweathermap.org/data/2.5/forecast?q={ville1},{PAYS}&amp;appid={API_KEY}&amp;units=metric\"\n    url2 = f\"https://api.openweathermap.org/data/2.5/forecast?q={ville2},{PAYS}&amp;appid={API_KEY}&amp;units=metric\"\n    r1 = requests.get(url1).json()  # r1 contient le dictionnaire contenant les donn\u00e9es sur la ville 1\n    r2 = requests.get(url2).json()  # r2 contient le dictionnaire contenant les donn\u00e9es sur la ville 2\n</code></pre> <p>\u00c9tape 2 : Cr\u00e9er deux tableaux contenant respectivement les 40 temp\u00e9ratures de la ville 1 et les 40 temp\u00e9ratures de la ville 2. Vous pouvez (mais ce n'est pas obligatoire) pour cela utiliser la m\u00e9thode de cr\u00e9ation de listes par compr\u00e9hension.</p> <p>On rappelle que les donn\u00e9es sur les 40 mesures d'une ville sont contenues dans 40 dictionnaires, eux-m\u00eames contenus dans une liste associ\u00e9e \u00e0 la cl\u00e9 <code>list</code> du dictionnaire principal.</p> <p>Pour revoir un exemple de r\u00e9ponse de l'API pour vous aider, vous pouvez d\u00e9rouler le bloc suivant :</p> Exemple de r\u00e9ponse de l'API <pre><code>{\n\"cod\": \"200\",\n\"message\": 0,\n\"cnt\": 40,\n\"list\": [\n    {\n    \"dt\": 1661871600,\n    \"main\": {\n        \"temp\": 296.76,\n        \"feels_like\": 296.98,\n        \"temp_min\": 296.76,\n        \"temp_max\": 297.87,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 933,\n        \"humidity\": 69,\n        \"temp_kf\": -1.11\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10d\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 100\n    },\n    \"wind\": {\n        \"speed\": 0.62,\n        \"deg\": 349,\n        \"gust\": 1.18\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.32,\n    \"rain\": {\n        \"3h\": 0.26\n    },\n    \"sys\": {\n        \"pod\": \"d\"\n    },\n    \"dt_txt\": \"2022-08-30 15:00:00\"\n    },\n    {\n    \"dt\": 1661882400,\n    \"main\": {\n        \"temp\": 295.45,\n        \"feels_like\": 295.59,\n        \"temp_min\": 292.84,\n        \"temp_max\": 295.45,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 931,\n        \"humidity\": 71,\n        \"temp_kf\": 2.61\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10n\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 96\n    },\n    \"wind\": {\n        \"speed\": 1.97,\n        \"deg\": 157,\n        \"gust\": 3.39\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.33,\n    \"rain\": {\n        \"3h\": 0.57\n    },\n    \"sys\": {\n        \"pod\": \"n\"\n    },\n    \"dt_txt\": \"2022-08-30 18:00:00\"\n    },\n    {\n    \"dt\": 1661893200,\n    \"main\": {\n        \"temp\": 292.46,\n        \"feels_like\": 292.54,\n        \"temp_min\": 290.31,\n        \"temp_max\": 292.46,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 931,\n        \"humidity\": 80,\n        \"temp_kf\": 2.15\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10n\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 68\n    },\n    \"wind\": {\n        \"speed\": 2.66,\n        \"deg\": 210,\n        \"gust\": 3.58\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.7,\n    \"rain\": {\n        \"3h\": 0.49\n    },\n    \"sys\": {\n        \"pod\": \"n\"\n    },\n    \"dt_txt\": \"2022-08-30 21:00:00\"\n    },\n    ....\n    {\n    \"dt\": 1662292800,\n    \"main\": {\n        \"temp\": 294.93,\n        \"feels_like\": 294.83,\n        \"temp_min\": 294.93,\n        \"temp_max\": 294.93,\n        \"pressure\": 1018,\n        \"sea_level\": 1018,\n        \"grnd_level\": 935,\n        \"humidity\": 64,\n        \"temp_kf\": 0\n    },\n    \"weather\": [\n        {\n        \"id\": 804,\n        \"main\": \"Clouds\",\n        \"description\": \"overcast clouds\",\n        \"icon\": \"04d\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 88\n    },\n    \"wind\": {\n        \"speed\": 1.14,\n        \"deg\": 17,\n        \"gust\": 1.57\n    },\n    \"visibility\": 10000,\n    \"pop\": 0,\n    \"sys\": {\n        \"pod\": \"d\"\n    },\n    \"dt_txt\": \"2022-09-04 12:00:00\"\n    }\n],\n\"city\": {\n    \"id\": 3163858,\n    \"name\": \"Zocca\",\n    \"coord\": {\n    \"lat\": 44.34,\n    \"lon\": 10.99\n    },\n    \"country\": \"IT\",\n    \"population\": 4593,\n    \"timezone\": 7200,\n    \"sunrise\": 1661834187,\n    \"sunset\": 1661882248\n}\n}\n</code></pre> <p>\u00c9tape 3 : Enfin, il ne reste plus qu'\u00e0 cr\u00e9er les deux courbes avec la fonction <code>plot</code>, puis \u00e0 les afficher avec la fonction <code>show</code> de pyplot. Voir documentation de pyplot.</p> <p>Vous devrez donc appeler deux fois la fonction <code>plot</code>, en donnant les tableaux cr\u00e9\u00e9s pr\u00e9c\u00e9demment en entr\u00e9es.</p> <p>Aide Pyplot</p> <p>Vous pouvez consulter cette page pour des rappels concernant le module pyplot contenu dans la biblioth\u00e8que Matplotlib. N'oubliez pas d'importer le module dans votre script s'il ne l'est pas, en rajoutant cette ligne au d\u00e9but de votre script :</p> <pre><code>from matplotlib import pyplot\n</code></pre> <p>Si le module n'est pas install\u00e9 sur votre machine, vous devez l'installer. Pour cela, dans Thonny, cliquez sur \"Outils\" puis sur \"G\u00e9rer les paquets\", puis recherchez et installez le paquet Matplotlib.</p> <p>En l'occurence, vous n'aurez besoin que des fonctions <code>plot</code> et <code>show</code>, et \u00e9ventuellement de <code>legend</code> si vous souhaitez afficher des l\u00e9gendes.</p>"},{"location":"terminale/modularite/api_corr/","title":"Les API","text":""},{"location":"terminale/modularite/api_corr/#les-api","title":"Les API","text":"<p>Une API (Application Programming Interface) permet aux d\u00e9veloppeurs d'int\u00e9grer une application \u00e0 une autre. Cela peut permettre par exemple de r\u00e9cup\u00e9rer des donn\u00e9es structur\u00e9es depuis un site web pour les exploiter de mani\u00e8re automatis\u00e9e dans un programme.</p> <p>Il existe diff\u00e9rents types d'API, notamment les API Web permettant d'acc\u00e9der \u00e0 des donn\u00e9es. Pour ce type d'API, une m\u00e9thode consiste \u00e0 \u00e9mettre une requ\u00eate HTTP permettant de r\u00e9cup\u00e9rer des donn\u00e9es sur un serveur web.</p> <p>Il existe diff\u00e9rents formats structurants de donn\u00e9es, notamment le format XML (proche du HTML) et le format JSON, qui sont devenus des standards.</p> <p>Voici quelques exemples d'API :</p> <ul> <li>https://openweathermap.org/api - Diverses API concernant le climat et la m\u00e9t\u00e9o,</li> <li>https://openfoodfacts.org/data - Base de donn\u00e9es collaborative, libre et ouverte des produits alimentaires du monde entier,</li> <li>https://openstreetmap.fr/ - Un projet collaboratif de cartographie en ligne qui vise \u00e0 constituer une base de donn\u00e9es g\u00e9ographiques libre du monde, en utilisant le syst\u00e8me GPS et d'autres donn\u00e9es libres.</li> </ul>"},{"location":"terminale/modularite/api_corr/#activite-recuperer-la-meteo-dans-un-programme-python","title":"Activit\u00e9 - R\u00e9cup\u00e9rer la m\u00e9t\u00e9o dans un programme Python","text":"<p>Pour cette activit\u00e9, on souhaite r\u00e9cup\u00e9rer des donn\u00e9es sur la m\u00e9t\u00e9o de diff\u00e9rentes villes en utilisant les donn\u00e9es fournies par l'API de openweathermap.org.</p> <p>Plus pr\u00e9cis\u00e9ment, on utilisera la m\u00e9t\u00e9o actuelle, vous pouvez vous rendre sur cette page pour voir les diff\u00e9rentes fa\u00e7ons de faire un appel avec l'API. Vous pouvez notamment utiliser la latitude, la longitude, le nom de la ville, le code postal... openweathermap fournit des donn\u00e9es en JSON, XML et HTML. Nous utiliserons ici le format JSON.</p> <p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>meteo.py : Programme initial \u00e0 compl\u00e9ter</li> </ul> <p>Le module <code>requests</code> de Python permet d'effectuer des appels d'API \u00e0 l'aide de requ\u00eates HTTP, et ainsi de de r\u00e9cup\u00e9rer des donn\u00e9es sur le web au format JSON et de les int\u00e9grer dans un dictionnaire.</p> <p>Utilisation du programme</p> <p>Ouvrez le script <code>meteo.py</code> dans Thonny (ou dans votre IDE pr\u00e9f\u00e9r\u00e9), puis ex\u00e9cutez-le.</p> <p>En appelant <code>get_weather('Paris')</code>, vous devriez obtenir quelque chose comme ceci : </p><pre><code>{'coord': {'lon': 2.3488, 'lat': 48.8534}, \n'weather': [{'id': 800, 'main': 'Clear', 'description': 'clear sky', 'icon': '01n'}], \n'base': 'stations', \n'main': {'temp': 23.67, 'feels_like': 24, 'temp_min': 20.32, 'temp_max': 24.52, 'pressure': 1024, 'humidity': 73}, \n'visibility': 10000, \n'wind': {'speed': 5.14, 'deg': 60}, \n'clouds': {'all': 0}, \n'dt': 1693777827, \n'sys': {'type': 2, 'id': 2041230, 'country': 'FR', 'sunrise': 1693717783, 'sunset': 1693765857}, \n'timezone': 7200, \n'id': 2988507, \n'name': 'Paris', \n'cod': 200}\n</code></pre> <p>Remarque 1 : Les f-strings</p> <p>Lorsque vous souhaitez int\u00e9grer la valeur d'une variable \u00e0 une cha\u00eene de caract\u00e8res, vous avez sans doute l'habitude d'utiliser la concat\u00e9nation (avec le symbole <code>+</code>). Par exemple :</p> <pre><code>&gt;&gt;&gt; prenom = 'Erwan'\n&gt;&gt;&gt; 'Bonjour ' + prenom + ' !'\n'Bonjour Erwan !'\n</code></pre> <p>Dans la fonction <code>get_weather</code> de notre programme, vous pouvez voir la ligne suivante (ligne 12): </p><pre><code>url = f\"https://api.openweathermap.org/data/2.5/weather?q={ville},{PAYS}&amp;appid={API_KEY}&amp;units=metric\"\n</code></pre> <p>Ici, la cha\u00eene de caract\u00e8res cr\u00e9\u00e9e est un peu particuli\u00e8re : il s'agit d'une f-string. Une f-string permet d'int\u00e9grer facilement des variables \u00e0 une cha\u00eene de caract\u00e8res. Il suffit de rajouter un <code>f</code> devant la cha\u00eene de caract\u00e8res, puis de mettre le nom des variables entre accolades. De cette mani\u00e8re, les noms des variables entre accolades seront remplac\u00e9s par la valeur qui leur est associ\u00e9e.</p> <p>En reprenant l'exemple pr\u00e9c\u00e9dent :</p> <pre><code>&gt;&gt;&gt; prenom = 'Erwan'\n&gt;&gt;&gt; f'Bonjour {prenom} !'\n'Bonjour Erwan !'\n</code></pre> <p>Remarque 2 : Les annotations de types</p> <p>Chaque fonction de notre fichier <code>meteo.py</code> utilise ce que l'on appelle des annotations de types. Par exemple, si l'on regarde l'en-t\u00eate de la fonction <code>get_weather</code> :</p> <pre><code>def get_weather(ville: str) -&gt; dict:\n</code></pre> <p>Ici, on indique que la param\u00e8tre <code>ville</code> doit \u00eatre de type <code>str</code> (une cha\u00eene de caract\u00e8res), et que la fonction doit renvoyer un dictionnaire. Il s'agit simplement d'une indication qui n'a aucun effet sur l'ex\u00e9cution du programme.</p> <p>On aurait pu, \u00e0 la place, donner ces indications dans la docstring, par exemple :</p> <pre><code>def get_weather(ville: str) -&gt; dict:\n    ''' Renvoie un dictionnaire contenant les donn\u00e9es sur la m\u00e9t\u00e9o actuelle de la ville entr\u00e9e.\n    :param ville: (str) Le nom de la ville dont on souhaite obtenir la m\u00e9t\u00e9o\n    :return: (dict) Le dictionnaire contenant les donn\u00e9es sur la m\u00e9t\u00e9o\n    '''\n</code></pre> <p>Si l'on regarde l'en-t\u00eate de notre fonction <code>get_temp_from_lat_long</code> :</p> <pre><code>def get_temp_from_lat_long(lat: float, long: float) -&gt; None:\n</code></pre> <p>On peut voir qu'elle doit renvoyer un objet de type <code>None</code> : autrement dit, elle ne doit rien renvoyer. (Effectivement, il s'agit d'une fonction qui doit simplement afficher quelque chose. Les fonctions qui ne renvoient rien peuvent \u00e9galement \u00eatre appel\u00e9es proc\u00e9dures.)</p> <p>Exercice 1</p> <p>Compl\u00e9tez la fonction <code>temperature_ressentie</code> permettant d'afficher la temp\u00e9rature ressentie (feels_like) dans une ville donn\u00e9e en entr\u00e9e.</p> Corrig\u00e9 exercice 1 <p>Il faut simplement r\u00e9cup\u00e9rer les donn\u00e9es sur la ville pass\u00e9e en argument \u00e0 la fonction, en rappelant la fonction <code>get_weather</code>, puis afficher avec <code>print</code> la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>feels_like</code> du dictionnaire lui-m\u00eame associ\u00e9 \u00e0 la cl\u00e9 <code>main</code> du dictionnaire principal :</p> <pre><code>def temperature_ressentie(ville: str) -&gt; None:\n    ''' Affiche la temp\u00e9rature ressentie (en degr\u00e9s) dans la ville sp\u00e9cifi\u00e9e. '''\n\n    donnees = get_weather(ville)\n    print(f\"Temp\u00e9rature ressentie \u00e0 {ville} : {donnees['main']['feels_like']} \u00b0C.\")\n</code></pre> <p>Un petit test dans la console de Thonny donnera quelque chose comme ceci :</p> <pre><code>&gt;&gt;&gt; temperature_ressentie('Paris')\nTemp\u00e9rature ressentie \u00e0 Paris : 33.02 \u00b0C.\n</code></pre> <p>Rappel</p> <p>En bas du script, vous pouvez voir le bloc de code suivant : </p><pre><code>if __name__ == '__main__':\n    ''' Instructions ex\u00e9cut\u00e9es si l'on ex\u00e9cute ce fichier directement '''\n\n    pass\n</code></pre> <p>Les instructions saisies dans ce bloc ne seront prises en compte que si le script est ex\u00e9cut\u00e9 directement. Si <code>meteo.py</code> est import\u00e9 dans un autre script, ces instructions seront ignor\u00e9es.</p> <p>Exercice 2</p> <p>En vous inspirant des deux fonctions pr\u00e9c\u00e9dentes, compl\u00e9tez la fonction <code>get_temp_from_lat_long</code> permettant d'afficher la temp\u00e9rature (temp) d'un lieu localis\u00e9 par sa valeur de latitude et de longitude (voir documentation si besoin).</p> <p>Faites le test avec <code>lat = 49.23588940429046, long = 2.135797340968115</code> (localisation de M\u00e9ru).</p> Temp\u00e9rature en degr\u00e9s celsius <p>Par d\u00e9faut, les temp\u00e9ratures obtenues sont en degr\u00e9s Kelvin. Si vous souhaitez obtenir les temp\u00e9ratures en degr\u00e9s Celsius, il faut indiquer dans la requ\u00eate HTTP que l'on souhaite utiliser le syst\u00e8me m\u00e9trique.</p> <p>Pour cela, il faut ajouter le param\u00e8tre <code>units</code> avec la valeur <code>metric</code> \u00e0 votre requ\u00eate. Autrement dit, \u00e0 la fin de votre URL, vous devez ajouter <code>&amp;units=metric</code> (le <code>&amp;</code> permet de faire la s\u00e9paration avec le param\u00e8tre pr\u00e9c\u00e9dent).</p> Corrig\u00e9 exercice 2 <p>On s'inspire du code des fonctions <code>get_weather</code> et <code>temperature_ressentie</code> :</p> <pre><code>def get_temp_from_lat_long(lat: float, long: float) -&gt; None:\n    ''' Affiche la temp\u00e9rature (en degr\u00e9s) d'une ville dont on fournit la latitude et la longitude. '''\n\n    url = f\"https://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;lon={long}&amp;appid={API_KEY}&amp;units=metric\"\n    r = requests.get(url)\n    donnees = r.json()\n\n    print(f\"Temp\u00e9rature : {donnees['main']['temp']} \u00b0C.\")\n</code></pre> <p>On souhaite maintenant obtenir les pr\u00e9visions m\u00e9t\u00e9o d'une ville de mani\u00e8re \u00e0 afficher une courbe d'\u00e9volution de la temp\u00e9rature (temp) pr\u00e9vue. L'API permet d'obtenir les pr\u00e9visions des 5 prochains jours, \u00e0 raison d'une mesure toutes les 3 heures. La page documentant les appels d'API permettant d'obtenir ces pr\u00e9visions est la suivante : https://openweathermap.org/forecast5.</p> <p>Ainsi, on obtiendra une liste 40 mesures, la premi\u00e8re mesure correspondant aux donn\u00e9es sur la m\u00e9t\u00e9o \u00e0 l'heure actuelle, la deuxi\u00e8me mesure correspondant \u00e0 la m\u00e9t\u00e9o pr\u00e9vue dans 3 heures, la troisi\u00e8me \u00e0 celle pr\u00e9vue dans 6 heures, et ainsi de suite...</p> <p>Si l'on regarde un exemple de r\u00e9ponse de l'API :</p> Exemple de r\u00e9ponse de l'API <pre><code>{\n\"cod\": \"200\",\n\"message\": 0,\n\"cnt\": 40,\n\"list\": [\n    {\n    \"dt\": 1661871600,\n    \"main\": {\n        \"temp\": 296.76,\n        \"feels_like\": 296.98,\n        \"temp_min\": 296.76,\n        \"temp_max\": 297.87,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 933,\n        \"humidity\": 69,\n        \"temp_kf\": -1.11\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10d\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 100\n    },\n    \"wind\": {\n        \"speed\": 0.62,\n        \"deg\": 349,\n        \"gust\": 1.18\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.32,\n    \"rain\": {\n        \"3h\": 0.26\n    },\n    \"sys\": {\n        \"pod\": \"d\"\n    },\n    \"dt_txt\": \"2022-08-30 15:00:00\"\n    },\n    {\n    \"dt\": 1661882400,\n    \"main\": {\n        \"temp\": 295.45,\n        \"feels_like\": 295.59,\n        \"temp_min\": 292.84,\n        \"temp_max\": 295.45,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 931,\n        \"humidity\": 71,\n        \"temp_kf\": 2.61\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10n\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 96\n    },\n    \"wind\": {\n        \"speed\": 1.97,\n        \"deg\": 157,\n        \"gust\": 3.39\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.33,\n    \"rain\": {\n        \"3h\": 0.57\n    },\n    \"sys\": {\n        \"pod\": \"n\"\n    },\n    \"dt_txt\": \"2022-08-30 18:00:00\"\n    },\n    {\n    \"dt\": 1661893200,\n    \"main\": {\n        \"temp\": 292.46,\n        \"feels_like\": 292.54,\n        \"temp_min\": 290.31,\n        \"temp_max\": 292.46,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 931,\n        \"humidity\": 80,\n        \"temp_kf\": 2.15\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10n\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 68\n    },\n    \"wind\": {\n        \"speed\": 2.66,\n        \"deg\": 210,\n        \"gust\": 3.58\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.7,\n    \"rain\": {\n        \"3h\": 0.49\n    },\n    \"sys\": {\n        \"pod\": \"n\"\n    },\n    \"dt_txt\": \"2022-08-30 21:00:00\"\n    },\n    ....\n    {\n    \"dt\": 1662292800,\n    \"main\": {\n        \"temp\": 294.93,\n        \"feels_like\": 294.83,\n        \"temp_min\": 294.93,\n        \"temp_max\": 294.93,\n        \"pressure\": 1018,\n        \"sea_level\": 1018,\n        \"grnd_level\": 935,\n        \"humidity\": 64,\n        \"temp_kf\": 0\n    },\n    \"weather\": [\n        {\n        \"id\": 804,\n        \"main\": \"Clouds\",\n        \"description\": \"overcast clouds\",\n        \"icon\": \"04d\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 88\n    },\n    \"wind\": {\n        \"speed\": 1.14,\n        \"deg\": 17,\n        \"gust\": 1.57\n    },\n    \"visibility\": 10000,\n    \"pop\": 0,\n    \"sys\": {\n        \"pod\": \"d\"\n    },\n    \"dt_txt\": \"2022-09-04 12:00:00\"\n    }\n],\n\"city\": {\n    \"id\": 3163858,\n    \"name\": \"Zocca\",\n    \"coord\": {\n    \"lat\": 44.34,\n    \"lon\": 10.99\n    },\n    \"country\": \"IT\",\n    \"population\": 4593,\n    \"timezone\": 7200,\n    \"sunrise\": 1661834187,\n    \"sunset\": 1661882248\n}\n}\n</code></pre> <p>On peut voir qu'une liste Python est associ\u00e9e \u00e0 la cl\u00e9 <code>list</code> du dictionnaire principal obtenu. Ce tableau contient lui-m\u00eame 40 dictionnaires, chacun correspondant \u00e0 une mesure de la m\u00e9t\u00e9o.</p> <p>Voici un exemple de graphe affichant la comparaison entre l'\u00e9volution de la temp\u00e9rature de la ville de Paris et celle de la ville de M\u00e9ru, sur les 5 prochains jours :</p> <p> </p> Courbes d'\u00e9volution des temp\u00e9ratures <p>Exercice 3</p> <p>Compl\u00e9tez la fonction <code>compare_two_cities</code> prenant deux noms de villes en entr\u00e9e, et affichant un graphe contenant les courbes d'\u00e9volution de la temp\u00e9rature de ces deux villes.</p> <p>Faites le test avec deux villes de votre choix.</p> <p>Pour proc\u00e9der, vous pouvez d\u00e9couper votre travail en 3 \u00e9tapes :</p> <p>\u00c9tape 1 : R\u00e9cup\u00e9rer les dictionnaires contenant les donn\u00e9es sur la ville 1 et sur la ville 2. Pour vous aider (et parce qu'on manipule des objets, notion qui n'a pas encore \u00e9t\u00e9 \u00e9tudi\u00e9e), je vous donne le code permettant de r\u00e9cup\u00e9rer et de stocker ces donn\u00e9es dans une variable <code>r1</code> pour la ville 1 et <code>r2</code> pour la ville 2 :</p> <pre><code>    url1 = f\"https://api.openweathermap.org/data/2.5/forecast?q={ville1},{PAYS}&amp;appid={API_KEY}&amp;units=metric\"\n    url2 = f\"https://api.openweathermap.org/data/2.5/forecast?q={ville2},{PAYS}&amp;appid={API_KEY}&amp;units=metric\"\n    r1 = requests.get(url1).json()  # r1 contient le dictionnaire contenant les donn\u00e9es sur la ville 1\n    r2 = requests.get(url2).json()  # r2 contient le dictionnaire contenant les donn\u00e9es sur la ville 2\n</code></pre> <p>\u00c9tape 2 : Cr\u00e9er deux tableaux contenant respectivement les 40 temp\u00e9ratures de la ville 1 et les 40 temp\u00e9ratures de la ville 2. Vous pouvez (mais ce n'est pas obligatoire) pour cela utiliser la m\u00e9thode de cr\u00e9ation de listes par compr\u00e9hension.</p> <p>On rappelle que les donn\u00e9es sur les 40 mesures d'une ville sont contenues dans 40 dictionnaires, eux-m\u00eames contenus dans une liste associ\u00e9e \u00e0 la cl\u00e9 <code>list</code> du dictionnaire principal.</p> <p>Pour revoir un exemple de r\u00e9ponse de l'API pour vous aider, vous pouvez d\u00e9rouler le bloc suivant :</p> Exemple de r\u00e9ponse de l'API <pre><code>{\n\"cod\": \"200\",\n\"message\": 0,\n\"cnt\": 40,\n\"list\": [\n    {\n    \"dt\": 1661871600,\n    \"main\": {\n        \"temp\": 296.76,\n        \"feels_like\": 296.98,\n        \"temp_min\": 296.76,\n        \"temp_max\": 297.87,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 933,\n        \"humidity\": 69,\n        \"temp_kf\": -1.11\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10d\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 100\n    },\n    \"wind\": {\n        \"speed\": 0.62,\n        \"deg\": 349,\n        \"gust\": 1.18\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.32,\n    \"rain\": {\n        \"3h\": 0.26\n    },\n    \"sys\": {\n        \"pod\": \"d\"\n    },\n    \"dt_txt\": \"2022-08-30 15:00:00\"\n    },\n    {\n    \"dt\": 1661882400,\n    \"main\": {\n        \"temp\": 295.45,\n        \"feels_like\": 295.59,\n        \"temp_min\": 292.84,\n        \"temp_max\": 295.45,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 931,\n        \"humidity\": 71,\n        \"temp_kf\": 2.61\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10n\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 96\n    },\n    \"wind\": {\n        \"speed\": 1.97,\n        \"deg\": 157,\n        \"gust\": 3.39\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.33,\n    \"rain\": {\n        \"3h\": 0.57\n    },\n    \"sys\": {\n        \"pod\": \"n\"\n    },\n    \"dt_txt\": \"2022-08-30 18:00:00\"\n    },\n    {\n    \"dt\": 1661893200,\n    \"main\": {\n        \"temp\": 292.46,\n        \"feels_like\": 292.54,\n        \"temp_min\": 290.31,\n        \"temp_max\": 292.46,\n        \"pressure\": 1015,\n        \"sea_level\": 1015,\n        \"grnd_level\": 931,\n        \"humidity\": 80,\n        \"temp_kf\": 2.15\n    },\n    \"weather\": [\n        {\n        \"id\": 500,\n        \"main\": \"Rain\",\n        \"description\": \"light rain\",\n        \"icon\": \"10n\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 68\n    },\n    \"wind\": {\n        \"speed\": 2.66,\n        \"deg\": 210,\n        \"gust\": 3.58\n    },\n    \"visibility\": 10000,\n    \"pop\": 0.7,\n    \"rain\": {\n        \"3h\": 0.49\n    },\n    \"sys\": {\n        \"pod\": \"n\"\n    },\n    \"dt_txt\": \"2022-08-30 21:00:00\"\n    },\n    ....\n    {\n    \"dt\": 1662292800,\n    \"main\": {\n        \"temp\": 294.93,\n        \"feels_like\": 294.83,\n        \"temp_min\": 294.93,\n        \"temp_max\": 294.93,\n        \"pressure\": 1018,\n        \"sea_level\": 1018,\n        \"grnd_level\": 935,\n        \"humidity\": 64,\n        \"temp_kf\": 0\n    },\n    \"weather\": [\n        {\n        \"id\": 804,\n        \"main\": \"Clouds\",\n        \"description\": \"overcast clouds\",\n        \"icon\": \"04d\"\n        }\n    ],\n    \"clouds\": {\n        \"all\": 88\n    },\n    \"wind\": {\n        \"speed\": 1.14,\n        \"deg\": 17,\n        \"gust\": 1.57\n    },\n    \"visibility\": 10000,\n    \"pop\": 0,\n    \"sys\": {\n        \"pod\": \"d\"\n    },\n    \"dt_txt\": \"2022-09-04 12:00:00\"\n    }\n],\n\"city\": {\n    \"id\": 3163858,\n    \"name\": \"Zocca\",\n    \"coord\": {\n    \"lat\": 44.34,\n    \"lon\": 10.99\n    },\n    \"country\": \"IT\",\n    \"population\": 4593,\n    \"timezone\": 7200,\n    \"sunrise\": 1661834187,\n    \"sunset\": 1661882248\n}\n}\n</code></pre> <p>\u00c9tape 3 : Enfin, il ne reste plus qu'\u00e0 cr\u00e9er les deux courbes avec la fonction <code>plot</code>, puis \u00e0 les afficher avec la fonction <code>show</code> de pyplot. Voir documentation de pyplot.</p> <p>Vous devrez donc appeler deux fois la fonction <code>plot</code>, en donnant les tableaux cr\u00e9\u00e9s pr\u00e9c\u00e9demment en entr\u00e9es.</p> <p>Aide Pyplot</p> <p>Vous pouvez consulter cette page pour des rappels concernant le module pyplot contenu dans la biblioth\u00e8que Matplotlib. N'oubliez pas d'importer le module dans votre script s'il ne l'est pas, en rajoutant cette ligne au d\u00e9but de votre script :</p> <pre><code>from matplotlib import pyplot\n</code></pre> <p>Si le module n'est pas install\u00e9 sur votre machine, vous devez l'installer. Pour cela, dans Thonny, cliquez sur \"Outils\" puis sur \"G\u00e9rer les paquets\", puis recherchez et installez le paquet Matplotlib.</p> <p>En l'occurence, vous n'aurez besoin que des fonctions <code>plot</code> et <code>show</code>, et \u00e9ventuellement de <code>legend</code> si vous souhaitez afficher des l\u00e9gendes.</p>"},{"location":"terminale/modularite/modules/","title":"Gestion de modules","text":""},{"location":"terminale/modularite/modules/#gestion-de-modules","title":"Gestion de modules","text":"<p>Comme vu dans le chapitre pr\u00e9c\u00e9dent, le travail sur les API a \u00e9t\u00e9 grandement facilit\u00e9 par l'utilisation du module <code>requests</code> de Python, qui a fait une bonne partie du travail pour nous. Sans avoir eu \u00e0 inspecter le code de ce module, nous avons pu l'utiliser facilement et avons ainsi \u00e9vit\u00e9 de longues heures de d\u00e9veloppement pour obtenir le m\u00eame r\u00e9sultat.</p> <p>Lorsque le code d\u2019un programme devient volumineux, il devient difficile de le mettre au point, c\u2019est-\u00e0-dire de corriger ses bugs et de le maintenir, de le faire \u00e9voluer, notamment pour int\u00e9grer de nouvelles fonctionnalit\u00e9s.</p> <p>Il est alors indispensable de le d\u00e9couper en plusieurs parties aussi ind\u00e9pendantes que possible les unes des autres. La plupart des programmes sont ainsi d\u00e9coup\u00e9s en plusieurs modules, on parle de programmation modulaire.</p> <p>On peut alors tester chaque module ind\u00e9pendamment (tests unitaires), et tester les modules ensemble (tests d\u2019int\u00e9gration), nous reviendrons sur les tests plus tard. La modularit\u00e9 facilite \u00e9galement la r\u00e9utilisation : un module bien con\u00e7u peut \u00eatre utilis\u00e9 par d\u2019autres programmes et mis \u00e0 disposition de la communaut\u00e9.</p> <p>Les modules Python permettent ainsi d'enrichir le langage de nouvelles fonctionnalit\u00e9s et de nouveaux objets r\u00e9utilisables facilement.</p>"},{"location":"terminale/modularite/modules/#importer-un-module","title":"Importer un module","text":"<p>Un module s'importe par son nom, qui correspond au nom du fichier Python priv\u00e9 de l'extension .py.</p> <p>Par exemple, le module <code>random</code> qui regroupe des fonctions en lien avec l'al\u00e9atoire (randint, choice, shuffle, ...) peut \u00eatre appel\u00e9 de la mani\u00e8re suivante :</p> <pre><code>import random\n</code></pre> <p>Le contenu du module est alors import\u00e9 dans un espace de noms, ici \"random\". Si l'on souhaite par exemple appeler la fonction <code>randint</code>, on \u00e9crira donc :</p> <pre><code>alea = random.randint(1,5)\n</code></pre> <p>On peut \u00e9galement utiliser un espace de noms diff\u00e9rent :</p> <p></p><pre><code>import random as rd\nalea = rd.randint(1,5)\n</code></pre> Cela permet de rendre l'appel plus concis et d'\u00e9viter que des m\u00e9thodes qui auraient le m\u00eame nom se court-circuitent. <p>Une autre mani\u00e8re de faire est d'utiliser le symbole <code>*</code> pour tout importer depuis un module :</p> <pre><code>from random import *\nalea = randint(1,6)\n</code></pre> <p>Attention !</p> <p>En utilisant cette m\u00e9thode, il y a un risque de conflit si le module contient des fonctions portant le m\u00eame nom que d'autres fonctions d\u00e9j\u00e0 existantes.</p> <p>Si l'on souhaite simplement, par exemple, importer la fonction <code>randint</code> et la fonction <code>choices</code> du module <code>random</code>, on peut \u00e9crire :</p> <pre><code>from random import randint, choices\nalea = randint(1,6)\nalea_lst = choices[1,2,4,3,7]\n</code></pre>"},{"location":"terminale/modularite/modules/#obtenir-de-laide-sur-une-fonction","title":"Obtenir de l'aide sur une fonction","text":"<p>Un module s'apparente \u00e0 une bo\u00eete noire, on a donc en g\u00e9n\u00e9ral pas le code des fonctions sous les yeux, d'o\u00f9 l'int\u00e9r\u00eat d'une bonne documentation.</p> <p>La sp\u00e9cification d'une fonction permet d'informer les utilisateurs des t\u00e2ches effectu\u00e9es par cette fonction, des contraintes impos\u00e9es sur les param\u00e8tres, des r\u00e9sultats attendus, (\u00e9ventuellement) des erreurs affich\u00e9es en cas de mauvaise utilisation...</p> <p>On utilise pour cela une docstring (commentaire sur plusieurs lignes) qui :</p> <ul> <li>d\u00e9crit ce que fait de la fonction.</li> <li>pr\u00e9cise les param\u00e8tres d'entr\u00e9e et leur type</li> <li>pr\u00e9cise la valeur de sortie et son type</li> <li>\u00e9ventuellement :<ul> <li>sp\u00e9cifie les conditions d'utilisation (pr\u00e9conditions) d'une fonction.</li> <li>indique les effets de bord d'une fonction.</li> <li>propose des exemples d'utilisation d'une fonction.</li> <li>indique les erreurs lev\u00e9es en cas de mauvaise utilisation...</li> <li>etc.</li> </ul> </li> </ul> <p>Voici un exemple avec une fonction <code>produit</code> qio calcule le produit de deux entiers <code>a</code> et <code>b</code> :</p> <pre><code>def produit(a, b):\n    ''' Fonction qui renvoie le produit de a et b.\n    :CU: type(a) == type(b) == int\n    :param a: (int) Un entier\n    :param b: (int) Un autre entier\n    :return: (int) Le produit de a et b\n\n    :Exemple:\n    &gt;&gt;&gt; produit(4, 6)\n    24\n    '''\n    assert type(a) == type(b) == int\n    res = 0\n    for _ in range(b):\n        res += a\n    assert res == a*b\n    return res\n</code></pre> Rappels annotations de types <p>On peut \u00e9galement indiquer les types des param\u00e8tres de fonctions sous la forme d'annotations de types, plut\u00f4t que de les sp\u00e9cifier dans la docstring. Une fonction <code>produit</code> qui calcule le produit de deux entiers <code>a</code> et <code>b</code> pourrait donc \u00eatre pr\u00e9sent\u00e9e ainsi :</p> <pre><code>def produit(a, b):\n    ''' Fonction qui renvoie le produit de a et b.\n    :param a: (int) Un entier\n    :param b: (int) Un autre entier\n    :return: (int) Le produit de a et b\n\n    :Exemple:\n    &gt;&gt;&gt; produit(4, 6)\n    24\n    '''\n    [...]\n</code></pre> <p>ou</p> <pre><code>def produit(a: int, b: int) -&gt; int:\n    ''' Fonction qui renvoie le produit de deux entiers a et b.\n\n    :Exemple:\n    &gt;&gt;&gt; produit(4, 6)\n    24\n    '''\n    [...]\n</code></pre> <p>La fonction <code>help</code> de Python permet d'obtenir la documentation des modules et fonctions. Par exemple, les instructions suivantes permettent d'afficher toute la documentation du module <code>random</code> (classes, m\u00e9thodes, fonctions...) :</p> <pre><code>&gt;&gt;&gt; import random\n&gt;&gt;&gt; help(random)\n</code></pre> <p>De plus, le module pydoc permet de g\u00e9n\u00e9rer de la documentation \u00e0 partir de docstrings.</p> <p><code>pydoc &lt;nom_classe&gt;</code> : Afficher la documentation sur terminal <code>pydoc -w &lt;nom_classe&gt;</code> : G\u00e9n\u00e9rer un fichier HTML</p> <p>\u00c0 vous de jouer</p> <p>\u00c0 l'aide de la fonction <code>help</code>, d\u00e9terminez \u00e0 quoi sert la fonction <code>randrange</code> du module <code>random</code>, le nombre et le nom de ses param\u00e8tres. Combien y a t-il de param\u00e8tres obligatoires ? Facultatifs ?</p> <p>Note</p> <p>On parle ici de \"fonctions\", mais en r\u00e9alit\u00e9 on devrait plut\u00f4t parler de \"m\u00e9thodes\", c'est-\u00e0-dire de fonctions contenues dans des \"classes\". Tout cela sera abord\u00e9 lors du chapitre sur la programmation orient\u00e9e objet (POO).</p>"},{"location":"terminale/modularite/modules/#activite-creer-un-module","title":"Activit\u00e9 - Cr\u00e9er un module","text":"<p>Vous allez cr\u00e9er un module permettant d'effectuer un certain nombre d'op\u00e9rations sur des listes d'entiers.</p> <p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>operations.py - Module permettant d'effectuer des op\u00e9rations sur des listes.</li> <li>main.py - Programme principal</li> </ul> <p>Correction</p> <ul> <li>operations_corr.py - Module corrig\u00e9 permettant d'effectuer des op\u00e9rations sur des listes.</li> <li>main_corr.py - Programme principal corrig\u00e9</li> </ul> <p>Exercice 1</p> <p>Compl\u00e9tez le corps des fonctions <code>sum_lst</code>, <code>min_lst</code> et <code>max_lst</code> permettant de renvoyer respectivement la somme des \u00e9l\u00e9ments, l'\u00e9l\u00e9ment minimal et l'\u00e9l\u00e9ment maximal d'une liste d'entiers pass\u00e9e en argument. Compl\u00e9tez \u00e9galement le corps de la fonction <code>ajouter_debut</code> permettant d'ajouter un \u00e9l\u00e9ment au d\u00e9but d'une liste.</p> Corrig\u00e9 exercice 1 <pre><code>def sum_lst(lst: list) -&gt; int:\n    ''' Renvoie le r\u00e9sultat de la somme des \u00e9l\u00e9ments d'une liste.\n\n    :Exemples:\n    &gt;&gt;&gt; sum_lst([2,4,6,8])\n    20\n    '''\n\n    res = 0\n    for el in lst:\n        res += el\n    return res\n\ndef min_lst(lst: list) -&gt; int:\n    ''' Renvoie la valeur minimale d'une liste.\n\n    :Exemples:\n    &gt;&gt;&gt; min_lst([8,1,9,2,7])\n    1\n    '''\n\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] &lt; min:\n            min = lst[i]\n    return min\n\ndef max_lst(lst: list) -&gt; int:\n    ''' Renvoie la valeur maximale d'une liste.\n\n    :Exemples:\n    &gt;&gt;&gt; max_lst([8,1,9,2,7])\n    9\n    '''\n\n    max = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] &gt; max:\n            max = lst[i]\n    return max\n\ndef ajouter_debut(lst: list, el: int) -&gt; list:\n    ''' Renvoie une nouvelle liste contenant les \u00e9l\u00e9ments de lst incluant l'\u00e9l\u00e9ment el en premi\u00e8re position.\n\n    :Exemples:\n    &gt;&gt;&gt; ajouter_debut([2,9,4,5], 8)\n    [8, 2, 9, 4, 5]\n    '''\n\n    return [el] + lst\n</code></pre> <p>Exercice 2</p> <p>Ouvrez le script nomm\u00e9 <code>main.py</code>, et y importer le module <code>operations</code>.</p> <p>Compl\u00e9ter la fonction <code>to_bin</code> permettant de transformer un entier en nombre binaire stock\u00e9 sous la forme d'une liste de 0 et de 1. Vous utiliserez pour cela la fonction <code>ajouter_debut</code> d\u00e9finie dans le module <code>operations</code>.</p> Corrig\u00e9 exercice 2 <p>Il ne faut pas oublier d'importer la fonction <code>ajouter_debut</code> du module <code>operations</code> au d\u00e9but de votre script : </p><pre><code>from operations import ajouter_debut\n</code></pre> <p>Pour r\u00e9aliser la fonction <code>to_bin</code>, on utilise la m\u00e9thode des divisions successives :</p> <pre><code>def to_bin(ent: int) -&gt; list:\n    ''' Renvoie la repr\u00e9sentation binaire de l'entier sp\u00e9cifi\u00e9, sous la forme d'une liste.\n    On utilise la m\u00e9thode des divisions euclidiennes successives.\n\n    :Exemples:\n    &gt;&gt;&gt; to_bin(10)\n    [1, 0, 1, 0]\n    '''\n\n    lst = []\n    while ent != 0:\n        lst = ajouter_debut(lst, ent%2)\n        ent //= 2\n    return lst\n</code></pre> <p>Exercice 3</p> <p>Compl\u00e9tez la fonction <code>moyenne</code> permettant de calculer la moyenne des \u00e9l\u00e9ments d'une liste, en utilisant la fonction <code>sum_lst</code> de <code>operations</code>.</p> Corrig\u00e9 exercice 3 <p>Il ne faut pas oublier d'importer la fonction <code>sum_lst</code> du module <code>operations</code> au d\u00e9but de votre script. Pour importer \u00e0 la fois <code>ajouter_debut</code> et <code>sum_lst</code> : </p><pre><code>from operations import ajouter_debut, sum_lst\n</code></pre> <pre><code>def moyenne(lst: list) -&gt; float:\n    ''' Renvoie la moyenne des \u00e9l\u00e9ments d'une liste.\n\n    :Exemples:\n    &gt;&gt;&gt; moyenne([12,15,10,20])\n    14.25\n    '''\n\n    return sum_lst(lst) / len(lst)\n</code></pre>"},{"location":"terminale/modularite/modules/#la-notion-dinterface","title":"La notion d'interface","text":"<p>Extrait du Balabonski Terminale</p> <p>Pour chaque module, on distingue:</p> <ul> <li>sa r\u00e9alisation (on dit aussi souvent impl\u00e9mentation), c'est-\u00e0-dire le code lui-m\u00eame, et </li> <li>son interface, consistant en une \u00e9num\u00e9ration des fonctions d\u00e9finies dans le module qui sont destin\u00e9es \u00e0 \u00eatre utilis\u00e9es dans la r\u00e9alisation d'autres modules, appel\u00e9s clients. </li> </ul> <p>L'interface d'un module est li\u00e9e \u00e0 sa documentation, et doit notamment expliciter ce qu'un utilisateur a besoin de conna\u00eetre des fonctions propos\u00e9es: comment et pour quoi les utiliser. Pour chaque fonction de l'interface, on a ainsi besoin de son nom, de la liste de ses param\u00e8tres et de sa sp\u00e9cification, c'est-\u00e0-dire les conditions auxquelles la fonction peut \u00eatre appliqu\u00e9e et les r\u00e9sultats \u00e0 attendre. Des informations suppl\u00e9mentaires concernant des caract\u00e9ristiques comme le temps d'ex\u00e9cution ou l'espace m\u00e9moire requis peuvent \u00e9galement \u00eatre utiles.</p> <p>L'objectif est que ces fonctions incluses dans l'interface soient suffisantes pour permettre \u00e0 un utilisateur de faire appel aux fonctionnalit\u00e9s du module, et qu'elles puissent \u00eatre utilis\u00e9es sans avoir besoin d'aller consulter le code du module. L'interface peut \u00eatre d\u00e9crite comme une abstraction du module: une description de ce qui caract\u00e9rise le module, mais faite \u00e0 un niveau assez haut, ignorant les d\u00e9tails concrets de la r\u00e9alisation. La documentation de l'interface peut \u00eatre vue comme un contrat entre l'auteur d'un module et ses utilisateurs, qui simplifie l'utilisation du module en limitant le nombre de choses qu'il faille lire, comprendre et m\u00e9moriser pour utiliser le module.</p> <p>Voici un exemple d'interface :</p> <p></p> <p>Notion d'encapsulation</p> <p>Le contrat qu'une interface \u00e9tablit entre l'utilisateur et l'auteur d'un module porte sur les r\u00e9sultats, et non pas sur les moyens mis en oeuvre : il est notamment libre d'introduire des fonctions, variables, constantes, ..., qui ne sont pas incluses dans l'interface. On parle alors de fonctions, variables, constantes encapsul\u00e9es dans le module. (On reviendra sur cette notion d'encapsulation dans la partie sur la POO.)</p> <p>En Python, l'auteur d'un module peut indiquer que certains \u00e9l\u00e9ments sont priv\u00e9s (c'est-\u00e0-dire encapsul\u00e9s) en faisant commencer leur nom par un caract\u00e8re <code>_</code>. Toutefois, contrairement \u00e0 d'autres langages, en Python, on ne peut pas r\u00e9ellement emp\u00eacher l'utilisation de donn\u00e9es \"priv\u00e9es\". Il s'agit plus d'une indication tacite \u00e0 destination de l'utilisateur, que celui-ci doit respecter pour garantir le bon fonctionnement du module.</p> <p>\u00c0 vous de jouer !</p> <p>Voici une interface permettant de cr\u00e9er et manipuler des dictionnaires :</p> fonction description <code>cree()</code> cr\u00e9e et renvoie un dictionnaire vide <code>cle(d, k)</code> renvoie <code>True</code> si et seulement si le dictionnaire <code>d</code>contient la cl\u00e9 <code>k</code>. <code>lit(d, k)</code> renvoie la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>k</code> dans le dictionnaire <code>d</code>, et <code>None</code> si la cl\u00e9 <code>k</code> n'apparait pas. <code>ecrit(d, k, v)</code> ajoute au dictionnaire <code>d</code> l'association entre la cl\u00e9 <code>k</code> et la valeur <code>v</code>, en rempla\u00e7ant une \u00e9ventuelle association d\u00e9j\u00e0 pr\u00e9sente pour <code>k</code>. <p>Impl\u00e9mentez un module <code>dictionnaire</code>, dans un fichier nomm\u00e9 <code>dictionnaire.py</code>, qui correspond \u00e0 cette interface.</p> Corrig\u00e9 - \u00c0 vous de jouer ! <p></p> T\u00e9l\u00e9charger le fichier Python corrig\u00e9"},{"location":"terminale/poo/","title":"Programmation orient\u00e9e objet","text":""},{"location":"terminale/poo/#programmation-orientee-objet","title":"Programmation orient\u00e9e objet","text":"Liste des contenus Description Activit\u00e9 pr\u00e9liminaire D\u00e9couverte des classes \u00e0 travers une petite activit\u00e9. Cours POO Le cours sur la programmation orient\u00e9e objet. TP - Un jeu pok\u00e9mon TP - R\u00e9alisation d'un jeu de combats de pok\u00e9mons. Exercices Exercices sur la POO."},{"location":"terminale/poo/cours/","title":"Cours","text":"Sources <ul> <li>courspython</li> </ul>"},{"location":"terminale/poo/cours/#programmation-orientee-objet","title":"Programmation orient\u00e9e objet","text":""},{"location":"terminale/poo/cours/#introduction","title":"Introduction","text":"<p>Vous avez vu en premi\u00e8re diff\u00e9rentes mani\u00e8res du structurer des donn\u00e9es : avec des listes, des tuples, des dictionnaires... Tous ces types de donn\u00e9es de base sont des types natifs de Python. Il s'agit de classes (<code>int</code>, <code>float</code>, <code>str</code>, <code>NoneType</code>...) d\u00e9j\u00e0 d\u00e9finies dans la biblioth\u00e8que standard distribu\u00e9e avec Python.</p> <p>Lorsque vous d\u00e9finissez par un exemple un entier <code>42</code> :</p> <pre><code>nombre = 42\n</code></pre> <p>Vous cr\u00e9ez ici ce que l'on appelle une instance de la classe <code>int</code>, que l'on appelle \u00e9galement un objet. Un objet est une instance d'une classe.</p> <p>De m\u00eame, lorsque vous d\u00e9finissez une liste :</p> <pre><code>lst = [1,3,5]\n</code></pre> <p>Vous cr\u00e9ez ici une instance de la classe <code>list</code> de Python.</p> <p>La programmation orient\u00e9e objet (ou POO) est le paradigme de programmation le plus utilis\u00e9 du monde moderne. Des smartphones aux superordinateurs, des applications de toutes tailles utilisent ce paradigme de programmation. \u00c0 l'issu de ce cours, vous serez capable d'aller beaucoup plus loin dans la conception de vos programmes !</p>"},{"location":"terminale/poo/cours/#creer-une-classe","title":"Cr\u00e9er une classe","text":"<p>Imaginons que l'on souhaite cr\u00e9er une application num\u00e9rique demandant l\u2019utilisation de points rep\u00e9r\u00e9s par des coordonn\u00e9es dans un rep\u00e8re g\u00e9om\u00e9trique \u00e0 deux dimensions. Nous avons pour cela besoin d'au minimum 2 informations : les coordonn\u00e9es <code>x</code> et <code>y</code> de ce point.</p> <p>En utilisant les types de base inclus avec le langage Python, on pourrait repr\u00e9senter ce point par un tuple <code>(x, y)</code>, une liste <code>[x, y]</code>, ou enocre un dictionnaire <code>{'x': x , 'y': y}</code>.'</p> <p>Gr\u00e2ce \u00e0 la programmation orient\u00e9e objet (POO), nous allons cr\u00e9er une nouvelle structure de donn\u00e9es \u00e0 l'aide d'une nouvelle classe que l'on appellera <code>Point</code> :</p> <pre><code>class Point:\n    ''' D\u00e9finition d'un point g\u00e9om\u00e9trique. '''\n    pass\n</code></pre> <p>Convention en Python</p> <p>Par convention, le nom identifiant une classe (qu\u2019on appelle aussi son identifiant) d\u00e9bute par une majuscule. Ici <code>Point</code> d\u00e9bute par un P majuscule.</p> <p>Une classe d\u00e9finit des attributs et des m\u00e9thodes :</p> <ul> <li>Les attributs sont les propri\u00e9t\u00e9s qui caract\u00e9riseront nos objets de type <code>Point</code>. Ici par exemple, on pourra cr\u00e9er deux attributs :</li> <li>Un attribut <code>x</code> : La coordonn\u00e9e en abscisse du point.</li> <li>Un attribut <code>y</code> : La coordonn\u00e9e en ordonn\u00e9e du point.</li> <li>Les m\u00e9thodes sont des fonctions d\u00e9finies \u00e0 l'int\u00e9rieur de notre classe et qui permettront d'effectuer des actions sur nos objets de type <code>Point</code>.</li> </ul>"},{"location":"terminale/poo/cours/#affectation-a-une-variable-de-la-reference-a-un-objet","title":"Affectation \u00e0 une variable de la r\u00e9f\u00e9rence \u00e0 un objet","text":"<p>Nous avons d\u00e9fini notre classe <code>Point</code>. Pour cr\u00e9er une instance de cette classe, c'est-\u00e0-dire un objet de type <code>Point</code>, il suffit de saisir :</p> <pre><code>Point()\n</code></pre> <p>Nous pouvons d\u00e8s maintenant utiliser la classe <code>Point</code> pour cr\u00e9er des objets de ce type, par instanciation. Pour cr\u00e9er un nouvel objet et stocker la r\u00e9f\u00e9rence \u00e0 cet objet dans la variable <code>p</code> :</p> <pre><code>p = Point()\n</code></pre> <p>On peut v\u00e9rifier \u00e0 quelle adresse m\u00e9moire est stock\u00e9 notre objet :</p> <pre><code>&gt;&gt;&gt; print(p)\n&lt;__main__.Point object at 0x7ff9c2f838d0&gt;\n</code></pre> <p>Le message renvoy\u00e9 par Python indique que <code>p</code> contient une r\u00e9f\u00e9rence \u00e0 une instance de la classe <code>Point</code>, qui est d\u00e9finie elle-m\u00eame au niveau principal du programme. Elle est situ\u00e9e dans un emplacement bien d\u00e9fini de la m\u00e9moire vive, dont l\u2019adresse appara\u00eet ici en notation hexad\u00e9cimale.</p> <p>On peut cr\u00e9er plusieurs points (c'est-\u00e0-dire plusieurs instances de la classe <code>Point</code>) :</p> <pre><code>p1 = Point()\np2 = Point()\n</code></pre> <p>Nous avons ici 2 instances de la classe <code>Point</code> (soit 2 objets) :</p> <ul> <li>la premi\u00e8re \u00e0 laquelle on fait r\u00e9f\u00e9rence au moyen de la variable <code>p1</code>,</li> <li>la seconde \u00e0 laquelle on fait r\u00e9f\u00e9rence au moyen de la variable <code>p2</code>.</li> </ul> <pre><code>&gt;&gt;&gt; print(p1)\n&lt;__main__.Point object at 0x7ff9c2f83950&gt;\n&gt;&gt;&gt; print(p2)\n&lt;__main__.Point object at 0x7ff9c2f839d0&gt;\n</code></pre>"},{"location":"terminale/poo/cours/#definir-les-attributs","title":"D\u00e9finir les attributs","text":"<p>On peut d\u00e9finir nos attributs de la mani\u00e8re suivante :</p> <pre><code>class Point:\n    \"Definition d'un point geometrique\"\n    pass\n\np = Point()\np.x = 1\np.y = 2\n</code></pre> <p>On peut afficher les valeurs de ces attributs :</p> <pre><code>&gt;&gt;&gt; print(\"p : x =\", p.x, \"y =\", p.y)\np : x = 1 y = 2\n</code></pre> <p>Il faut bien faire la distinction entre variable et objet :</p> <pre><code>class Point:\n    \"Definition d'un point geometrique\"\n\na = Point()\na.x = 1\na.y = 2\nb = a\nprint(\"a : x =\", a.x, \"y =\", a.y)\nprint(\"b : x =\", b.x, \"y =\", b.y)\na.x = 3\na.y = 4\nprint(\"a : x =\", a.x, \"y =\", a.y)\nprint(\"b : x =\", b.x, \"y =\", b.y)\n</code></pre> <p>Visualiser sur Python Tutor</p> <p>Les variables <code>a</code> et <code>b</code> font ici r\u00e9f\u00e9rence au m\u00eame objet. En effet, lors de l\u2019affectation <code>b = a</code>, on met dans la variable <code>b</code> la r\u00e9f\u00e9rence contenue dans la variable <code>a</code>. Donc, toute modification des valeurs des attributs de l\u2019objet dont la r\u00e9f\u00e9rence est contenue dans <code>a</code> provoque une modification pour <code>b</code>.</p> <p>Attributs sp\u00e9ciaux</p> <p>Il existe des attributs sp\u00e9ciaux qui sont pr\u00e9d\u00e9finis, on les reconna\u00eet car ils sont pr\u00e9c\u00e9d\u00e9s et suivis par deux underscores <code>__</code>. un attribut pr\u00e9d\u00e9fini <code>__doc__</code> permet de r\u00e9cup\u00e9rer la documentation associ\u00e9e \u00e0 notre classe :</p> <pre><code>&gt;&gt;&gt; print(p.__doc__)\nDefinition d'un point geometrique\n</code></pre>"},{"location":"terminale/poo/cours/#definir-les-methodes","title":"D\u00e9finir les m\u00e9thodes","text":"<p>Une m\u00e9thode est une fonction d\u00e9finie \u00e0 l'int\u00e9rieur d'une classe.</p> <p>Par exemple, si l'on reprend notre classe <code>Point</code>, on peut par exemple cr\u00e9er une m\u00e9thode permettant de modifier les attributs <code>x</code> et <code>y</code> en y ajoutant respectivement une valeur <code>dx</code> et <code>dy</code> donn\u00e9es.</p> <pre><code>class Point:\n    \"Definition d'un point geometrique\"\n\n    def deplacer(self, dx, dy):\n        self.x = self.x + dx\n        self.y = self.y + dy\n</code></pre> <p>Si l'on veut appeler cette m\u00e9thode, on proc\u00e9dera comme suit :</p> <pre><code>a = Point()\na.x = 1  # initialiser l'attribut x \u00e0 1\na.y = 2  # initialiser l'attribut y \u00e0 2\nprint(\"a : x =\", a.x, \"y =\", a.y)\na.deplacer(4, 6)  # Appel de la m\u00e9thode deplacer de la classe Point\nprint(\"a : x =\", a.x, \"y =\", a.y)\n</code></pre> <p>Visualiser sur Python Tutor</p> <p>Pour d\u00e9finir une m\u00e9thode, il faut :</p> <ul> <li>indiquer son nom (ici <code>deplace()</code>).</li> <li>indiquer les arguments entre des parenth\u00e8ses. Le premier argument d\u2019une m\u00e9thode doit \u00eatre <code>self</code>.</li> </ul> <p>Pour acc\u00e9der aux m\u00e9thodes d\u2019un objet, on indique :</p> <ul> <li>le nom de la variable qui fait r\u00e9f\u00e9rence \u00e0 cet objet</li> <li>un point</li> <li>le nom de la m\u00e9thode</li> </ul> <p>Le param\u00e8tre <code>self</code></p> <p>Lors d'un appel \u00e0 une m\u00e9thode, on ne passe pas d'argument pour le param\u00e8tre <code>self</code>, car la valeur qu'il prend est la r\u00e9f\u00e9rence \u00e0 l\u2019objet. Lors de l'appel, il y a donc toujours un param\u00e8tre de moins que lors de la d\u00e9finition de la m\u00e9thode.</p>"},{"location":"terminale/poo/cours/#le-constructeur","title":"Le constructeur","text":"<p>Jusqu'ici, nous avons d\u00e9fini manuellement les attributs des instances de notre classe <code>Point</code>. Si l'on cr\u00e9e plusieurs objets, nous sommes contraints de d\u00e9finir ces attributs pour chaque objet, ce qui peut \u00eatre un petit peu r\u00e9barbatif.</p> <p>Il existe une solution bien plus pratique pour automatiquement d\u00e9finir des attributs \u00e0 chaque cr\u00e9ation d'un nouvel objet : Le constructeur.</p> <p>Il s'agit d'une m\u00e9thode sp\u00e9ciale, nomm\u00e9e <code>__init__</code>, appel\u00e9e \u00e0 chaque cr\u00e9ation d'un objet.</p> <p>Les m\u00e9thodes sp\u00e9ciales</p> <p>Les m\u00e9thodes sp\u00e9ciales, ou m\u00e9thodes magiques, comme <code>__init__</code>, poss\u00e8dent toutes un nom commen\u00e7ant par deux underscores et finissant par deux underscores. Comme autres m\u00e9thodes sp\u00e9ciales, on peut citer :</p> <ul> <li><code>__len__</code> : La valeur renvoy\u00e9e par cette m\u00e9thode peut \u00eatre obtenue en appelant <code>len(objet)</code>, o\u00f9 <code>objet</code> est une instance d'une classe contenant la m\u00e9thode <code>__len__</code>. G\u00e9n\u00e9ralement, <code>len</code> fait r\u00e9f\u00e9rence \u00e0 une longueur (si l'on a une classe <code>Liste</code> par exemple, cela pourrait permettre d'obtenir la longueur d'une liste.)</li> <li><code>__str__</code> : La valeur renvoy\u00e9e par cette m\u00e9thode, g\u00e9n\u00e9ralement une cha\u00eene de caract\u00e8res, sera affich\u00e9e lors d'un appel \u00e0 <code>print(objet)</code>, o\u00f9 <code>objet</code> est une instance d'une classe contenant la m\u00e9thode <code>__str__</code>. C'est une m\u00e9thode permettant de g\u00e9rer un affichage textuel d'un objet.</li> <li><code>__eq__</code> : Cette m\u00e9thode sp\u00e9ciale est appel\u00e9e lorsque l'on compare deux objets avec un op\u00e9rateur de comparaison <code>==</code>. Il existe \u00e9galement <code>__ne__</code> pour l'op\u00e9rateur <code>!=</code>, <code>__le__</code> pour <code>&lt;=</code>, <code>__ge__</code> pour <code>&gt;=</code>, etc.</li> <li>Il existe \u00e9norm\u00e9ment d'autres m\u00e9thodes sp\u00e9ciales, comme <code>__hash__</code>, <code>__bool__</code>, <code>__contains__</code>...</li> </ul> <p>Voici une nouvelle d\u00e9finition de notre classe <code>Point</code> avec notre constructeur :</p> <pre><code>class Point:\n    def __init__(self):\n        self.x = 0  # initialiser la position en x \u00e0 0\n        self.y = 0  # initialiser la position en y \u00e0 0\n</code></pre> <p>Ici, le constructeur ne prend aucun param\u00e8tre en dehors du param\u00e8tre <code>self</code> (qui est obligatoire pour toutes les m\u00e9thodes). Lors de la cr\u00e9ation d'un objet, deux attributs <code>x</code> et <code>y</code> sont initialis\u00e9s :</p> <pre><code>&gt;&gt;&gt; p = Point()\n&gt;&gt;&gt; p.x\n0\n&gt;&gt;&gt; p.y\n0\n</code></pre> <p>On peut ajouter d'autres param\u00e8tres \u00e0 notre constructeur :</p> <pre><code>class Point:\n    def __init__(self, x, y):\n        self.x = x  # initialiser la position en x \u00e0 0\n        self.y = y  # initialiser la position en y \u00e0 0\n</code></pre> <p>On peut sans probl\u00e8me avoir des param\u00e8tres qui portent les m\u00eames noms que les attributs, car les deux ne sont pas dans le m\u00eame espace de nom. Les param\u00e8tres sont des variables locales \u00e0 la fonction, tandis que les attributs de l'objet appartiennent \u00e0 l'espace de nom de l'instance.</p> <p>Il est \u00e9galement possible de faire en sorte que des param\u00e8tres soient optionnels, en leur attribuant une valeur par d\u00e9faut :</p> <pre><code>class Point:\n    def __init__(self, x = 0, y = 0):\n        self.x = x  # initialiser la position en x \u00e0 0\n        self.y = y  # initialiser la position en y \u00e0 0\n</code></pre> <p>Param\u00e8tres optionnels</p> <p>Les param\u00e8tres optionnels d'une fonction ou d'une m\u00e9thode doivent toujours \u00eatre plac\u00e9s en dernier. Par ailleurs, lors de l'appel d'une fonction, on peut nommer les param\u00e8tres pour lesquels on souhaite entrer une valeur.</p> <p>Par exemple :</p> <pre><code>def generer_liste(max, min = 0, pas = 1):\n    return list(range(min, max + 1, pas))\n</code></pre> <p>On pourrait appeler cette fonction de plusieurs mani\u00e8res, par exemple :</p> <pre><code>&gt;&gt;&gt; generer_liste(10)\n&gt;&gt;&gt; generer_liste(15, 5, 3)\n&gt;&gt;&gt; generer_liste(10, pas = 2)\n&gt;&gt;&gt; generer_liste(10, pas = 2, min = 5)\n</code></pre> <p>Voici une nouvelle version de notre classe <code>Point</code> incluant le constructeur et la m\u00e9thode <code>deplacer</code>, n'h\u00e9sitez pas \u00e0 ex\u00e9cuter ce code et \u00e0 le modifier \u00e0 votre guise :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>class Point:bksl-nl    def py-undpy-undinitpy-undpy-und(self, x = 0, y = 0):bksl-nl        self.x = x  # initialiser la position en x \u00e0 0bksl-nl        self.y = y  # initialiser la position en y \u00e0 0bksl-nlbksl-nl    def deplacer(self, dx, dy):bksl-nl        self.x = self.x + dxbksl-nl        self.y = self.y + dybksl-nlbksl-nlp1 = Point(5, 3)  # cr\u00e9ation d'une instance de la classe avec argumentsbksl-nlp2 = Point()  # cr\u00e9ation d'une autre instance sans argumentsbksl-nlprint(f'p1.x = {p1.x} - p1.y = {p1.y}')bksl-nlprint(f'p2.x = {p2.x} - p1.y = {p2.y}')bksl-nlp2.deplacer(3, 2)bksl-nlprint('Apr\u00e8s d\u00e9placement :')bksl-nlprint(f'p1.x = {p1.x} - p1.y = {p1.y}')bksl-nlprint(f'p2.x = {p2.x} - p1.y = {p2.y}')bksl-nl</p> <p>Il faut bien faire la distinction entre la d\u00e9finition d'une classe, et les instances de cette classe. Lors de la cr\u00e9ation d'un objet (c'est-\u00e0-dire d'une instance d'une classe), on passe des arguments (un peu comme lorsque l'on appelle une fonction), qui sont automatiquement pass\u00e9s en entr\u00e9es du constructeur de la classe. Le constructeur va ensuite d\u00e9finir les attributs en utilisant ces valeurs.</p>"},{"location":"terminale/poo/cours/#accesseurs-et-mutateurs","title":"Accesseurs et mutateurs","text":"<ul> <li>les accesseurs (ou getters) fournissent des informations relatives \u00e0 l\u2019\u00e9tat d\u2019un objet, c\u2019est-\u00e0-dire aux valeurs de certains de ses attributs sans les modifier ;</li> <li>les mutateurs (ou setters) modifient l\u2019\u00e9tat d\u2019un objet, donc les valeurs de certains de ses attributs.</li> </ul> <p>La notion d'encapsulation</p> <p>L'encapsulation consiste \u00e0 masquer des donn\u00e9es de l'\u00e9tat interne pour prot\u00e9ger l'int\u00e9grit\u00e9 de l'objet.</p> <p>L'id\u00e9e est de faire en sorte qu'un objet laisse les autres objets lire ses donn\u00e9es, mais qu'il soit le seul \u00e0 pouvoir les modifier.</p> <p>Concr\u00e8tement, on fait utilise des accesseurs et des mutateurs pour manipuler les attributs, plut\u00f4t que de les modifier directement.</p> <p>En reprenant notre classe <code>Point</code> et en lui ajoutant des accesseurs permettant d'acc\u00e9der aux attributs <code>x</code> et <code>y</code> et des mutateurs permettant de modifier les attributs <code>x</code> et <code>y</code>, cela pourrait donner :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>class Point:bksl-nl    def py-undpy-undinitpy-undpy-und(self, x = 0, y = 0):bksl-nl        self.x = x  # initialiser la position en x \u00e0 0bksl-nl        self.y = y  # initialiser la position en y \u00e0 0bksl-nlbksl-nl    # Accesseursbksl-nl    def getpy-undx(self):bksl-nl        return self.xbksl-nl    bksl-nl    def getpy-undy(self):bksl-nl        return self.ybksl-nl    bksl-nl    # Mutateursbksl-nl    def setpy-undx(self, nx):bksl-nl        self.x = nxbksl-nlbksl-nl    def setpy-undy(self, ny):bksl-nl        self.y = nybksl-nlbksl-nl    def deplacer(self, dx, dy):bksl-nl        self.setpy-undx(self.getpy-undx() + dx)bksl-nl        self.setpy-undy(self.getpy-undy() + dy)bksl-nlbksl-nlp = Point()bksl-nlp.deplacer(5,7)bksl-nlprint(f'p.x = {p.getpy-undx()} - p.y = {p.getpy-undy()}')bksl-nl</p> <p>Dans notre <code>print</code>, nous n'acc\u00e9dons plus directement aux attributs de notre objet, mais l'on appelle cette fois les accesseurs qui se chargent de renvoyer la valeur de ces attributs.</p> <p>Membres publiques, prot\u00e9g\u00e9s et priv\u00e9s</p> <p>En Python, contrairement \u00e0 d'autres langages comme le Java ou le C++, il n'est pas possible de restreindre techniquement l'acc\u00e8s \u00e0 des m\u00e9thodes ou des attributs d'une classe.</p> <p>Toutefois, il existe des conventions qui permettent d'indiquer des attributs ou des m\u00e9thodes comme \u00e9tant publiques (public), prot\u00e9g\u00e9s (protected) ou priv\u00e9s (private).</p> <p>Public : Les attributs et m\u00e9thodes publiques sont accessibles m\u00eame en dehors de la classe.</p> <p>Protected : Les attributs et m\u00e9thodes prot\u00e9g\u00e9s commencent par un underscore et sont accessibles par une classe et ses sous-classes (les classes-filles, qui h\u00e9ritent de celle-ci).</p> <p>Private : Les attributs et m\u00e9thodes priv\u00e9s commencent par deux underscores et sont uniquement accessibles dans la classe o\u00f9 ils sont d\u00e9finis. Si l'on essaie d'acc\u00e9der \u00e0 un attribut priv\u00e9 ou une m\u00e9thode priv\u00e9e, une <code>AttributeError</code> sera lev\u00e9e. Mais il est facile de contourner cela, raison pour laquelle il ne s'agit pas d'une v\u00e9ritable restriction comme c'est le cas dans d'autres langages.</p>"},{"location":"terminale/poo/cours/#manipulation-des-objets","title":"Manipulation des objets","text":"<p>Voici quelques caract\u00e9ristiques suppl\u00e9mentaires sur les classes :</p> <ul> <li>les noms des classes et des attributs permettent de mieux d\u00e9crire la nature des objets, d'o\u00f9 l'int\u00e9r\u00eat de leur utilisation : <code>p = Point()</code> est plus explicite que <code>p = [0,0]</code> ou <code>p = (0,0)</code> par exemple, et <code>p.y</code> est plus clair que <code>p[1]</code> ;</li> <li>les attributs des objets peuvent \u00eatre d\u2019autres objets, ce qui permet de cr\u00e9er des structures complexes ;</li> <li>des op\u00e9rations similaires peuvent \u00eatre impl\u00e9ment\u00e9es par des m\u00e9thodes de m\u00eame nom dans plusieurs classes.</li> <li>les m\u00e9thodes \u00e9tant li\u00e9es \u00e0 la classe de l\u2019objet lui-m\u00eame (contrairement \u00e0 une fonction), cela permert une meilleure lisibilit\u00e9 du programme et \u00e9vite ainsi certaubes erreurs de programmation.</li> </ul> <p>\u00c0 vous de jouer</p> <p>\u00c9crire une nouvelle classe <code>Segment</code> qui r\u00e9utilise la classe <code>Point</code> et qui contient :</p> <ul> <li>Un constructeur qui initialise deux attributs, <code>p1</code> et <code>p2</code>, deux objets de type <code>Point</code> fournis en arguments lors de la cr\u00e9ation de l'objet,</li> <li>Une m\u00e9thode <code>deplacer</code> qui prend deux param\u00e8tres <code>dx</code> et <code>dy</code> (ne pas oublier \u00e9galement <code>self</code>) et qui d\u00e9place le segment (en ajoutant <code>dx</code> \u00e0 la position en <code>x</code> et <code>dy</code> \u00e0 la position en <code>y</code> des deux points),</li> <li>une m\u00e9thode <code>milieu</code> qui ne prend pas de param\u00e8tres (en dehors de <code>self</code> bien s\u00fbr) et qui renvoie un nouveau point situ\u00e9 au milieu du segment.</li> <li>une m\u00e9thode sp\u00e9ciale <code>__len__</code> qui renvoie la longueur du segment, on rappelle la formule : si l'on a deux points \\(P1(X1, Y1)\\) et \\(P2(X2, Y2)\\), la longueur est \\(\\sqrt{(X2-X1)\u00b2 + (Y2-Y1)\u00b2}\\)</li> </ul> <p>En dessous de la d\u00e9finition des classes, des instructions qui permettent de cr\u00e9er un nouveau segment (c'est-\u00e0-dire une instance de la classe <code>Segment</code>) doivent \u00eatre pr\u00e9sentes. Apr\u00e8s avoir ex\u00e9cut\u00e9 le programme, vous pouvez faire des tests de manipulation de votre objet stock\u00e9 dans <code>s</code> dans l'interpr\u00e9teur Python. Par exemple, pour appeler une m\u00e9thode de la classe <code>Segment</code> sur votre objet dont la r\u00e9f\u00e9rence est stock\u00e9e dans une variable <code>s</code>, vous devrez donc saisir <code>s.nom_de_la_methode(ARGUMENTS \u00c9VENTUELS)</code>.</p> <p>Vous pouvez, au choix :</p> <ul> <li>cliquer ici pour t\u00e9l\u00e9charger un fichier <code>point.py</code> (contenant la classe <code>Point</code> ainsi qu'une base pour r\u00e9aliser votre classe <code>Segment</code>) et l'ouvrir sur Thonny,</li> <li>reprendre la classe <code>Point</code> que nous avons r\u00e9alis\u00e9e ensemble en classe.</li> </ul>"},{"location":"terminale/poo/cours/#attributs-et-methodes-de-classes","title":"Attributs et m\u00e9thodes de classes","text":"<p>En programmation orient\u00e9e objet, les attributs de classe, les m\u00e9thodes de classe ou encore les m\u00e9thodes statiques jouent un r\u00f4le important en offrant diff\u00e9rentes fa\u00e7ons de g\u00e9rer le comportement et les donn\u00e9es d\u2019une classe.</p>"},{"location":"terminale/poo/cours/#attributs-de-classes","title":"Attributs de classes","text":"<p>Un attribut de classe est une variable qui appartient \u00e0 la classe elle-m\u00eame, et non aux instances de cette classe.</p> <p>Il est partag\u00e9 entre toutes les instances, ce qui signifie que si l\u2019on modifie cet attribut \u00e0 partir d\u2019une instance, la modification affecte toutes les autres instances.</p> <p>Voici un exemple :</p> <pre><code>class A:\n    nb = 0  # cr\u00e9ation d'un attribut de classe nb\n\n    def __init__(self, x):\n        ''' Constructeur de la classe A. Cr\u00e9ation d'un objet de type A. '''\n\n        self.x = x  # cr\u00e9ation d'un attribut d'instance x\n        A.nb = A.nb + 1  # incr\u00e9menter l'attribut de classe nb\n\nprint(\"A : nb = \", A.nb)  # afficher l'attribut de classe\n\na = A(3)  # cr\u00e9ation d'une nouvelle instance de A\nprint(\"A : nb = \", A.nb)  # afficher l'attribut de classe\nprint(\"a : x = \", a.x, \" nb = \", a.nb)  # afficher les attributs de a\n\nb = A(6)  # cr\u00e9ation d'une nouvelle instance de A\nprint(\"A : nb = \", A.nb)  # afficher l'attribut de classe\nprint(\"a : x = \", a.x, \" nb = \", a.nb)  # afficher les attributs de a\nprint(\"b : x = \", b.x, \" nb = \", b.nb)  # afficher les attributs de b\n\nc = A(8)  # cr\u00e9ation d'une nouvelle instance de A\nprint(\"A : nb = \", A.nb)  # afficher l'attribut de classe\nprint(\"a : x = \", a.x, \" nb = \", a.nb)  # afficher les attributs de a\nprint(\"b : x = \", b.x, \" nb = \", b.nb)  # afficher les attributs de b\nprint(\"c : x = \", c.x, \" nb = \", c.nb)  # afficher les attributs de c\n</code></pre> Tester ce programme <p></p>### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder class A:bksl-nl    nb = 0  # cr\u00e9ation d'un attribut de classe nbbksl-nlbksl-nl    def py-undpy-undinitpy-undpy-und(self, x):bksl-nl        ''' Constructeur de la classe A. Cr\u00e9ation d'un objet de type A. '''bksl-nlbksl-nl        self.x = x  # cr\u00e9ation d'un attribut d'instance xbksl-nl        A.nb = A.nb + 1  # incr\u00e9menter l'attribut de classe nbbksl-nlbksl-nlprint(\"A : nb = \", A.nb)  # afficher l'attribut de classebksl-nlbksl-nla = A(3)  # cr\u00e9ation d'une nouvelle instance de Abksl-nlprint(\"A : nb = \", A.nb)  # afficher l'attribut de classebksl-nlprint(\"a : x = \", a.x, \" nb = \", a.nb)  # afficher les attributs de abksl-nlbksl-nlb = A(6)  # cr\u00e9ation d'une nouvelle instance de Abksl-nlprint(\"A : nb = \", A.nb)  # afficher l'attribut de classebksl-nlprint(\"a : x = \", a.x, \" nb = \", a.nb)  # afficher les attributs de abksl-nlprint(\"b : x = \", b.x, \" nb = \", b.nb)  # afficher les attributs de bbksl-nlbksl-nlc = A(8)  # cr\u00e9ation d'une nouvelle instance de Abksl-nlprint(\"A : nb = \", A.nb)  # afficher l'attribut de classebksl-nlprint(\"a : x = \", a.x, \" nb = \", a.nb)  # afficher les attributs de abksl-nlprint(\"b : x = \", b.x, \" nb = \", b.nb)  # afficher les attributs de bbksl-nlprint(\"c : x = \", c.x, \" nb = \", c.nb)  # afficher les attributs de cbksl-nl <p>Comme on le voit, on peut acc\u00e9der ou modifier un attribut de classe :</p> <ul> <li>directement \u00e0 partir de la r\u00e9f\u00e9rence de la classe : <code>&lt;CLASSE&gt;.&lt;ATTRIBUT_CLASSE&gt;</code></li> <li>depuis la r\u00e9f\u00e9rence d'une instance de la classe : <code>&lt;INSTANCE&gt;.&lt;ATTRIBUT_CLASSE&gt;</code>.</li> </ul>"},{"location":"terminale/poo/cours/#methodes-de-classes","title":"M\u00e9thodes de classes","text":"<p>Une m\u00e9thode de classe est une m\u00e9thode qui appartient \u00e0 la classe plut\u00f4t qu\u2019aux instances.</p> <p>Elle est d\u00e9finie \u00e0 l\u2019aide du d\u00e9corateur <code>@classmethod</code> et prend la r\u00e9f\u00e9rence de la classe comme premier param\u00e8tre, g\u00e9n\u00e9ralement appel\u00e9 <code>cls</code>. Cela permet de manipuler ou interagir avec les attributs de la classe.</p> <p>Par exemple :</p> <pre><code>class A:\n    nb = 0  # cr\u00e9ation d'un attribut de classe nb\n\n    def __init__(self, x):\n        ''' Constructeur de la classe A. Cr\u00e9ation d'un objet de type A. '''\n\n        A.nb = A.nb + 1  # incr\u00e9menter l'attribut de classe nb\n        self.x = x  # cr\u00e9ation d'un attribut d'instance x\n\n    @classmethod\n    def get_nb(cls):\n        ''' M\u00e9thode de classe qui renvoie l'attribut de classe nb. '''\n\n        return A.nb\n\n    @classmethod\n    def nouveau(cls):\n        ''' M\u00e9thode de classe qui renvoie l'attribut de classe nb. '''\n\n        return cls(10)\n\nprint(f\"objets = {A.get_nb()}\")\n\na = A(8)\nprint(f\"a.x = {a.x} - objets = {A.get_nb()}\")\n\nb = A.nouveau()\nprint(f\"b.x = {b.x} - objets = {A.get_nb()}\")\n</code></pre> Tester ce programme <p></p>### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder class A:bksl-nl    nb = 0  # cr\u00e9ation d'un attribut de classe nbbksl-nlbksl-nl    def py-undpy-undinitpy-undpy-und(self, x):bksl-nl        ''' Constructeur de la classe A. Cr\u00e9ation d'un objet de type A. '''bksl-nl        bksl-nl        A.nb = A.nb + 1  # incr\u00e9menter l'attribut de classe nbbksl-nl        self.x = x  # cr\u00e9ation d'un attribut d'instance xbksl-nlbksl-nl    @classmethodbksl-nl    def getpy-undnb(cls):bksl-nl        ''' M\u00e9thode de classe qui renvoie l'attribut de classe nb. '''bksl-nlbksl-nl        return A.nbbksl-nlbksl-nl    @classmethodbksl-nl    def nouveau(cls):bksl-nl        ''' M\u00e9thode de classe qui renvoie l'attribut de classe nb. '''bksl-nl        bksl-nl        return cls(10)bksl-nlbksl-nlprint(f\"objets = {A.getpy-undnb()}\")bksl-nlbksl-nla = A(8)bksl-nlprint(f\"a.x = {a.x} - objets = {A.getpy-undnb()}\")bksl-nlbksl-nlb = A.nouveau()bksl-nlprint(f\"b.x = {b.x} - objets = {A.getpy-undnb()}\")bksl-nl"},{"location":"terminale/poo/cours/#methodes-statiques","title":"M\u00e9thodes statiques","text":"<p>Une m\u00e9thode statique est une m\u00e9thode qui n\u2019a pas acc\u00e8s \u00e0 l\u2019instance ni \u00e0 la classe elle-m\u00eame. Elle est d\u00e9finie \u00e0 l\u2019aide du d\u00e9corateur <code>@staticmethod</code>.</p> <p>On l\u2019utilise souvent lorsque la m\u00e9thode ne d\u00e9pend ni des attributs d\u2019instance ni des attributs de classe, mais est tout de m\u00eame li\u00e9e logiquement \u00e0 la classe.</p> <p>Voici un exemple :</p> <pre><code>import math\n\nclass Cercle:\n    ''' D\u00e9finition d'une classe Cercle. '''\n\n    @staticmethod\n    def aire(rayon):\n        ''' M\u00e9thode statique pour calculer l'aire d'un cercle \u00e0 partir du rayon. '''\n\n        return math.pi * rayon ** 2\n\nmon_cercle = Cercle()  # cr\u00e9ation d'une instance de la classe Cercle\n\n# Utilisation de la m\u00e9thode statique pour calculer l'aire,\n# elle peut \u00eatre appel\u00e9e directement via la classe ou via l'instance.\naire_du_cercle = Cercle.aire(5)  # OU BIEN mon_cercle.aire(5)\n\nprint(f\"L'aire d'un cercle avec un rayon de 5 est {aire_du_cercle}\")\n</code></pre> Tester ce programme <p></p>### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder import mathbksl-nlbksl-nlclass Cercle:bksl-nl    ''' D\u00e9finition d'une classe Cercle. '''bksl-nlbksl-nl    @staticmethodbksl-nl    def aire(rayon):bksl-nl        ''' M\u00e9thode statique pour calculer l'aire d'un cercle \u00e0 partir du rayon. '''bksl-nlbksl-nl        return math.pi py-str rayon py-strpy-str 2bksl-nlbksl-nlmonpy-undcercle = Cercle(5)  # cr\u00e9ation d'une instance de la classe Cerclebksl-nlbksl-nl# Utilisation de la m\u00e9thode statique pour calculer l'aire,bksl-nl# elle peut \u00eatre appel\u00e9e directement via la classe ou via l'instance.bksl-nlairepy-unddupy-undcercle = Cercle.aire(5)  # OU BIEN monpy-undcercle.aire(5)bksl-nlbksl-nlprint(f\"L'aire d'un cercle avec un rayon de 5 est {airepy-unddupy-undcercle}\")bksl-nl <p>La m\u00e9thode statique est id\u00e9ale dans cet exemple car elle ne d\u00e9pend d\u2019aucune donn\u00e9e sp\u00e9cifique \u00e0 l\u2019instance ou \u00e0 la classe, seulement du param\u00e8tre qu\u2019on lui passe.</p>"},{"location":"terminale/poo/exercices/","title":"Exercices","text":""},{"location":"terminale/poo/exercices/#exercices-sur-la-poo","title":"Exercices sur la POO","text":"<p>Voici deux notebooks pour approfondir votre apprentissage de la POO. Les liens suivants redirigent vers la plateforme Capytale.</p> Notebooks Contenu TD1 sur la POO Premier TD sur la POO (exercices faciles). Correction TD1 sur la POO Correction du premier TD sur la POO. TD2 sur la POO Second TD sur la POO (exercices plus difficiles)."},{"location":"terminale/poo/exercices/#sujets-pratiques-du-bac","title":"Sujets pratiques du bac","text":"<p>Voici quelques sujets pratiques issus d'\u00e9preuves de bac de ces derni\u00e8res ann\u00e9es :</p> Sujet Fichier <code>.py</code> Description 2022 - Sujet 5 T\u00e9l\u00e9charger Un jeu de cartes en POO 2023 - Sujet 32 T\u00e9l\u00e9charger Encore un jeu de cartes."},{"location":"terminale/poo/exercices/#extrait-depreuve-ecrite-du-baccalaureat","title":"Extrait d'\u00e9preuve \u00e9crite du baccalaur\u00e9at","text":"<p>Activit\u00e9 - Le codage de C\u00e9sar</p> <ul> <li>activite_codage_cesar.pdf - Activit\u00e9 qui reprend un sujet du bac de 2021 sur le codage de C\u00e9sar.</li> <li>cesar.py - Fichier Python \u00e0 utiliser pour l'activit\u00e9.</li> </ul>"},{"location":"terminale/poo/pokemon/","title":"TP - Un jeu Pok\u00e9mon","text":""},{"location":"terminale/poo/pokemon/#tp-un-jeu-pokemon","title":"TP - Un jeu pok\u00e9mon","text":"<p>Modalit\u00e9s de rendus</p> <p>Vous rendrez une archive ZIP contenant tous les fichiers de votre travail via \u00c9l\u00e9a. Pour rappel, pour cr\u00e9er une archive, s\u00e9lectionnez tous vos fichiers, puis faites un clic droit envoyer vers dossier compress\u00e9.</p>"},{"location":"terminale/poo/pokemon/#objectif-du-tp","title":"Objectif du TP","text":"<p>L'objectif de ce TP est de r\u00e9aliser, en Python, un jeu de combats de pok\u00e9mons. En particulier, on s'inspirera du jeu Pok\u00e9mon.</p> <p>\u00c0 t\u00e9l\u00e9charger</p> <ul> <li>tp_pokemons.zip - Fichiers Python \u00e0 compl\u00e9ter.</li> </ul> <p>Correction + Un petit d\u00e9fi</p> <p>Voici la correction de ce TP :</p> <ul> <li>tp_pokemons_correction.zip - Fichiers corrig\u00e9s du TP Pok\u00e9mon.</li> </ul> <p>D\u00e9fi pour 3 points bonus : Vous souhaitez obtenir JUSQU'\u00c0 TROIS POINTS BONUS \u00e0 votre note obtenue sur le TP Pok\u00e9mon ?</p> <p>Voici comment faire :</p> <ul> <li>Ajoutez 3 nouveaux pok\u00e9mons dans la base de donn\u00e9es des pok\u00e9mons (fichier <code>pokemons.txt</code>), en utilisant les donn\u00e9es du pok\u00e9dex.</li> <li>Cr\u00e9ez un nouveau type d'attaque, comme le sommeil par exemple (qui emp\u00eache un pok\u00e9mon d'attaquer pendant un certain nombre de tours), ou encore la confusion (qui fait qu'un pok\u00e9mon attaquant va subir des d\u00e9g\u00e2ts 50% du temps), vous pouvez consulter cette page pour voir la liste des statuts possibles.</li> <li>Ajouter la prise en compte des types des Pok\u00e9mons, en vous aidant de la table des types. Vous devrez faire en sorte que la puissance d'attaque soit adapt\u00e9e selon les types du Pok\u00e9mon attaquant et les types du Pok\u00e9mon cibles. Chaque Pok\u00e9mon peut avoir deux types, il faut donc bien tenir compte des deux types dans le calcul de la puissance des attaques.</li> </ul> <p>Autre am\u00e9lioration :</p> <ul> <li>Vous pouvez ajuster le calcul des points de d\u00e9g\u00e2ts inflig\u00e9s par une attaque. Actuellement, le calcul des points de d\u00e9g\u00e2ts en fonction de la puissance d'une attaque, de l'attaque du Pok\u00e9mon attaquant et de la d\u00e9fense du Pok\u00e9mon cible est imparfait. Pour mettre \u00e0 jour ce calcul, cela se passe dans la m\u00e9thode <code>attaquer</code> de la classe <code>Combat</code>, plus pr\u00e9cis\u00e9ment sur la ligne : <pre><code>degats_infliges = (puissance_attaque * attaquant.get_attaque()) / (cible.get_defense() * 2.4 + 1)\n</code></pre></li> </ul> <p>Ce projet est constitu\u00e9 des fichiers suivants :</p> <ul> <li><code>main.py</code> - Programme principal permettant l'ex\u00e9cution du jeu</li> <li><code>jeu.py</code> - Classe qui g\u00e8re l'ensemble du jeu et r\u00e9utilise les autres classes</li> <li><code>combat.py</code> - Classe permettant de repr\u00e9senter un combat du jeu</li> <li><code>pokemon.py</code> - Classe permettant de repr\u00e9senter les Pok\u00e9mons</li> <li><code>pokemons.txt</code> - Fichier texte contenant la base de donn\u00e9es des pok\u00e9mons du jeu (contenant leurs noms, caract\u00e9ristiques et attaques.)</li> </ul> <p>Voici une capture de ce que l'on souhaite obtenir :</p> <p> </p> Exemple d'ex\u00e9cution du jeuVoir l'image en taille r\u00e9elle"},{"location":"terminale/poo/pokemon/#modelisation","title":"Mod\u00e9lisation","text":"<p>Voici une mod\u00e9lisation sous forme de diagramme des diff\u00e9rentes classes constituant ce projet :</p> <p> </p> Mod\u00e9lisation des classes du jeuVoir l'image en taille r\u00e9elle <p>Notes :</p> <p>Base de donn\u00e9es des pok\u00e9mons</p> <p>Les donn\u00e9es sur les pok\u00e9mons sont stock\u00e9es dans un fichier <code>pokemons.txt</code>.</p> <p>L'inscription d'un pok\u00e9mon se fait de la mani\u00e8re suivante :</p> <pre><code>Bulbizarre  Plante,Poison   45  49  49\nCharge,50   Rugissement,attaque-e,5 Vampigraine,drainage,3\n</code></pre> <p>Chaque donn\u00e9e est s\u00e9par\u00e9e par une tabulation. La premi\u00e8re ligne renseigne les donn\u00e9es principales sur le Pok\u00e9mon : Son nom, ses types, son nombre de vies, son attaque et enfin sa d\u00e9fense. La deuxi\u00e8me ligne contient les attaques du pok\u00e9mon :</p> <ul> <li>S'il s'agit d'une attaque qui inflige simplement des d\u00e9g\u00e2ts, on l'\u00e9crit sous la forme : <code>Nom_de_lattaque,puissance</code> (donc seulement deux \u00e9l\u00e9ments).</li> <li>S'il s'agit d'une attaque qui n'inflige pas de d\u00e9g\u00e2ts mais effectue une autre action, ou inflige une alt\u00e9ration d'\u00e9tat, on l'\u00e9crira sous la forme suivante (3 \u00e9l\u00e9ments) :<ul> <li><code>Nom_attaque,poison,3</code> : empoisonnement pendant 3 tours,</li> <li><code>Nom_attaque,attaque+,10</code> : augmenter de 10 points l'attaque du pok\u00e9mon alli\u00e9,</li> <li><code>Nom_attaque,defense+,10</code> : augmenter de 10 points la d\u00e9fense du pok\u00e9mon alli\u00e9,</li> <li><code>Nom_attaque,attaque-e,10</code> : diminuer de 10 points l'attaque du pok\u00e9mon ennemi,</li> <li><code>Nom_attaque,defense-e,10</code> : diminuer de 10 points la d\u00e9fense du pok\u00e9mon ennemi.</li> </ul> </li> </ul> <p>Alt\u00e9rations d'\u00e9tat</p> <p>Pour l'instant, il existe :</p> <ul> <li><code>poison</code> : empoisonner l'ennemi,</li> <li><code>paralysie</code> : paralyser l'ennemi,</li> <li><code>drainage</code> : drainer la vie de l'ennemi (vole des PV au pok\u00e9mon adverse),</li> <li><code>attaque+</code>, <code>attaque-</code>, <code>defense+</code>, <code>defense-</code> : augmenter/diminuer l'attaque ou la d\u00e9fense alli\u00e9e,</li> <li><code>attaque+e</code>, <code>defense+e</code>, <code>attaque-e</code>, <code>defense-e</code> : augmenter/diminuer l'attaque ou la d\u00e9fense ennemie.</li> <li>Rien ne vous emp\u00eache de cr\u00e9er de nouveaux effets, si vous vous sentez capable de les rajouter dans le code !</li> </ul> <p>Attaques</p> <p>Apr\u00e8s lecture du fichier <code>pokemons.txt</code>, les attaques de chaque <code>Pokemon</code> sont enregistr\u00e9es dans l'attribut <code>_liste_attaques</code> sous la forme d'une liste de dictionnaires. Par exemple, s'il y a 2 attaques : <code>[{\"nom_attaque\": \"Charge\", \"degats_attaque\": 35}, {\"nom_attaque\": \"Rugissement\", \"nom_effet\": \"attaque-e\", \"valeur_effet\": 5}]</code></p> <ul> <li>La premi\u00e8re attaque \"Charge\" a une puissance de 35.</li> <li>La seconde attaque diminue l'attaque de l'ennemi de 5 points.</li> </ul> <p>\u00c9tat du pok\u00e9mon</p> <p>L'\u00e9tat du pok\u00e9mon est stock\u00e9e sous la forme d'un dictionnaire :</p> <ul> <li>Initialement, l'attribut <code>_etat</code> est \u00e9gal \u00e0 <code>{\"nom_etat\": \"normal\", \"duree_etat\": -1}</code>  Cela indique que le pok\u00e9mon est dans son \u00e9tat normal (le <code>-1</code> indique que l'\u00e9tat est permanent).</li> <li>S'il est empoisonn\u00e9 par exemple, <code>_etat</code> devient \u00e9gal \u00e0 <code>{\"nom_etat\": \"poison\", \"duree_etat\": 3}</code>  Empoisonnement pendant encore 3 tours. (M\u00eame principe pour la paralysie, ou le drainage).</li> </ul> <p>Vous pouvez ajouter de nouveaux pok\u00e9mons dans le fichier <code>pokemons.txt</code>, en respectant bien le format. Vous pouvez cr\u00e9er vos propres pok\u00e9mons ou vous inspirer du pok\u00e9dex.</p>"},{"location":"terminale/poo/pokemon/#realisation","title":"R\u00e9alisation","text":"<p>\u00c0 faire</p> <p>Les fichiers <code>pokemon.py</code>, <code>combat.py</code> et <code>jeu.py</code>, qui d\u00e9finissent les classes <code>Pokemon</code>, <code>Combat</code> et <code>Jeu</code> n\u00e9cessaires au bon fonctionnement du jeu sont pr\u00e9-remplis, mais vous devez les compl\u00e9ter.</p> <p>Les zones \u00e0 compl\u00e9ter sont marqu\u00e9es par des pointill\u00e9s <code>.........</code>.</p> <p>Les m\u00e9thodes (fonctions inclues dans des classes) contiennent la mention \"\u00c0 COMPL\u00c9TER\" ou \"COMPL\u00c9TER\" dans la docstring lorsqu'il y a des zones \u00e0 compl\u00e9ter, certaines m\u00e9thodes sont d\u00e9j\u00e0 compl\u00e8tement \u00e9crites.</p> <p>Lisez bien les documentations et les commentaires pour vous assurer de bien comprendre le fonctionnement du programme !</p>"},{"location":"terminale/poo/pokemon/#deroulement-du-jeu","title":"D\u00e9roulement du jeu","text":"<p>Le jeu, d\u00e9fini dans la classe <code>Jeu</code>, se d\u00e9roule ind\u00e9finiment et ne s'arr\u00eate que si :</p> <ul> <li>le nombre de victoires correspond \u00e0 la valeur de la variable globale <code>NB_VICTOIRES</code>,</li> <li>le nombre de d\u00e9faites correspond \u00e0 la valeur de la variable globale <code>NB_DEFAITES</code>,</li> <li>il reste moins de 2 pok\u00e9mons en jeu.</li> </ul> <p>Si aucune de ces conditions n'est remplie :</p> <ul> <li>on demande au joueur de choisir un pok\u00e9mon parmi les pok\u00e9mons encore vivants du jeu,</li> <li>l'adversaire choisit un pok\u00e9mon de mani\u00e8re al\u00e9atoire,</li> <li>on lance un combat,</li> <li>\u00e0 la fin du combat : en cas de victoire, on incr\u00e9mente la valeur du nombre de victoires, en cas de d\u00e9faite, on incr\u00e9mente la valeur du nombre de d\u00e9faites,</li> <li>on recommence le m\u00eame d\u00e9roulement tant qu'aucune des 3 conditions d\u00e9finies pr\u00e9c\u00e9demment n'est remplie.</li> </ul>"},{"location":"terminale/poo/pokemon/#deroulement-dun-combat","title":"D\u00e9roulement d'un combat","text":"<p>Pour vous aider \u00e0 comprendre, voici une explication du d\u00e9roulement d'un combat (m\u00e9thode <code>jouer</code> de la classe <code>Combat</code>) :</p> <ul> <li>on v\u00e9rifie si le pok\u00e9mon du joueur est mort. Si oui, fin du combat, avec un message de d\u00e9faite.</li> <li>sinon, on v\u00e9rifie si le pok\u00e9mon de l'ennemi est mort. Si oui, fin du combat, avec message de victoire.</li> <li>si aucun pok\u00e9mon n'est mort :</li> <li>on affiche les infos sur les pok\u00e9mons du combat (points de vies, \u00e9tat, attaque, d\u00e9fense...),</li> <li>on active les effets relatifs aux alt\u00e9rations d'\u00e9tat,</li> <li>si c'est au tour du joueur, le joueur choisit une attaque,</li> <li>si c'est au tour du joueur adversaire, l'attaque est choisie al\u00e9atoirement,</li> <li>\u00e0 la fin, on incr\u00e9mente le nombre de tours.</li> </ul>"},{"location":"terminale/poo/preliminaire/","title":"Activit\u00e9 d'introduction","text":""},{"location":"terminale/poo/preliminaire/#activite-dintroduction","title":"Activit\u00e9 d'introduction","text":"<p>Source</p> <p>Inspir\u00e9 d'une activit\u00e9 du Hachette NSI Terminale.</p> <p>Pour simuler la trajectoire d\u2019un projectile que l\u2019on lance en l\u2019air avec une certaine vitesse et qui est soumis \u00e0 la gravit\u00e9, on a besoin de conna\u00eetre sa position \\(x\\) et \\(y\\) et sa vitesse \\(vx\\) et \\(vy\\). Apr\u00e8s un intervalle de temps \\(dt\\), la position et la vitesse du projectile sont modifi\u00e9es ainsi :</p> <ul> <li>\\(x = x + dt \\times vx ; y = y + dt \\times vy\\) ;</li> <li>\\(vy = vy \u2212 g \\times dt\\) o\u00f9 \\(g\\) est l\u2019intensit\u00e9 de la pesanteur (\\(9,81 m/s^2\\) sur Terre).</li> </ul> <p>Pour repr\u00e9senter le projectile, nous allons utiliser un nouveau type de donn\u00e9es : un objet.</p> <p>Pour cr\u00e9er un objet repr\u00e9sentant un projectile, il faut d\u2019abord d\u00e9finir une classe, que l\u2019on appellera ici <code>Projectile</code>.</p> <p>La fonction <code>Projectile()</code> renverra alors un nouvel objet de type <code>Projectile</code>, qui est comme une coquille vide. On peut ensuite \u00ab remplir \u00bb cette coquille avec des attributs qui repr\u00e9sentent l\u2019\u00e9tat du projectile, ici <code>x</code>, <code>y</code>, <code>vx</code> et <code>vy</code>, auxquels on acc\u00e8de par la notation point\u00e9e :</p> <pre><code>class Projectile:  # d\u00e9clarer une classe\n    pass\n\nballe = Projectile()  # cr\u00e9er un objet\nballe.x = 0  # affecter son attribut x,\nballe.y = 0  # son attribut y,\nballe.vx = 10  # son attribut vx,\nballe.vy = 20  # et son attribut vy\n</code></pre> <p> </p> Repr\u00e9sentation de l'objet `balle` <p>\u00c0 faire</p> <p>T\u00e9l\u00e9charger et ouvrir dans Thonny le script Python suivant :</p> <ul> <li>projectile.py : script Python \u00e0 compl\u00e9ter (en suivant les exercices suivants)</li> </ul> <p>Exercice 1</p> <p>\u00c9crire la fonction <code>pas(balle, dt)</code> (en dehors de la classe) qui prend une balle en param\u00e8tre et modifie son \u00e9tat apr\u00e8s l\u2019intervalle de temps <code>dt</code> (vous devez donc red\u00e9finir les attributs <code>x</code>, <code>y</code> et <code>vy</code>).</p> <p>Exercice 2</p> <p>\u00c9crire un programme qui cr\u00e9e une balle et appelle 50 fois la fonction <code>pas</code> avec le param\u00e8tre <code>dt = 0.1</code> en affichant \u00e0 chaque fois la position de la balle.</p> <p>Exercice 3</p> <p>Modifier la fonction <code>pas</code> pour qu\u2019elle affiche la trajectoire de la balle en dessinant un trait depuis sa derni\u00e8re position. On utilisera la biblioth\u00e8que <code>turtle</code> et notamment la fonction <code>goto(x,y)</code> qui d\u00e9place la tortue \u00e0 la position <code>x</code>, <code>y</code> en tra\u00e7ant un trait.</p> <p>La fonction <code>pas</code> n\u2019a de sens que si on lui passe un projectile comme premier param\u00e8tre. Pour rendre cela explicite, on peut la d\u00e9finir \u00e0 l\u2019int\u00e9rieur de la classe <code>Projectile</code>. On dit que l\u2019on d\u00e9finit la m\u00e9thode <code>pas</code> de la classe <code>Projectile</code>.</p> <p>Au lieu d\u2019appeler la fonction <code>pas(balle, dt)</code>, on utilisera alors la notation point\u00e9e pour appeler cette m\u00e9thode, comme ceci : <code>balle.pas(dt)</code>.</p> <pre><code>class Projectile:\n    def pas(self , dt):  # d\u00e9finir la m\u00e9thode `pas` dans la classe `Projectile`\n        ...              # `self` est l'objet sur lequel on a appel\u00e9 la m\u00e9thode\n...\nballe.pas(dt)            # appeler la m\u00e9thode `pas` pour l'objet `balle`\n</code></pre> <p>Exercice 4</p> <p>Modifier le programme pr\u00e9c\u00e9dent pour d\u00e9finir la fonction <code>pas</code> sous forme d\u2019une m\u00e9thode de la classe <code>Projectile</code>.</p> <p>Exercice 5</p> <p>Modifier la m\u00e9thode <code>pas</code> pour programmer le rebond sur le sol : si la coordonn\u00e9e \\(y\\) du projectile devient n\u00e9gative, on inverse la vitesse verticale \\(vy\\).</p> <p>Note : Tel que programm\u00e9 ici, le rebond n\u2019a pas lieu au moment o\u00f9 la balle touche le sol \u00e0 proprement parler, mais apr\u00e8s qu\u2019elle l\u2019ait d\u00e9j\u00e0 travers\u00e9. Il en r\u00e9sulte que la vitesse verticale risque d\u2019\u00eatre plus \u00e9lev\u00e9e que dans la r\u00e9alit\u00e9, et la balle risque de rebondir plus haut que son rebond pr\u00e9c\u00e9dent. Une simulation correcte devrait estimer le moment pr\u00e9cis o\u00f9 la balle.</p> <p>Exercice 6</p> <p>Modifier le programme pour cr\u00e9er plusieurs balles avec des positions et des vitesses initiales diff\u00e9rentes, et lancer une simulation en appelant r\u00e9p\u00e9titivement la m\u00e9thode <code>pas</code> de chaque balle \u00e0 tour de r\u00f4le.</p> <p>On pourra utiliser les fonctions <code>penup()</code> et <code>pendown()</code> du module <code>Turtle</code> pour relever et rabaisser le crayon pour passer d'une balle \u00e0 une autre.</p>"},{"location":"terminale/recursivite/","title":"R\u00e9cursivit\u00e9","text":""},{"location":"terminale/recursivite/#recursivite","title":"R\u00e9cursivit\u00e9","text":"Liste des contenus Description Cours Cours sur la r\u00e9cursivit\u00e9. Exercices Exercices et notebooks sur la r\u00e9cursivit\u00e9."},{"location":"terminale/recursivite/cours/","title":"Cours","text":""},{"location":"terminale/recursivite/cours/#cours-la-recursivite","title":"Cours - La r\u00e9cursivit\u00e9","text":""},{"location":"terminale/recursivite/cours/#introduction","title":"Introduction","text":"<p>La r\u00e9cursivit\u00e9 est une d\u00e9marche largement utilis\u00e9e dans de nombreux domaines, y compris en informatique. Elle repose sur le principe de r\u00e9soudre un probl\u00e8me en le divisant en sous-probl\u00e8mes plus petits, souvent de mani\u00e8re r\u00e9p\u00e9titive, jusqu'\u00e0 ce que les sous-probl\u00e8mes deviennent suffisamment simples pour \u00eatre r\u00e9solus directement. En programmation, cela se traduit par une fonction qui s'appelle elle-m\u00eame pour r\u00e9soudre un probl\u00e8me plus vaste.</p> <p>La r\u00e9cursivit\u00e9 n'est pas seulement un outil de r\u00e9solution de probl\u00e8mes, mais aussi un concept profond\u00e9ment enracin\u00e9 dans l'histoire des math\u00e9matiques et de l'informatique. En fait, le math\u00e9maticien indien du 12e si\u00e8cle, Bhaskara II, est souvent cr\u00e9dit\u00e9 comme l'un des premiers \u00e0 avoir utilis\u00e9 la r\u00e9cursivit\u00e9 pour r\u00e9soudre des \u00e9quations math\u00e9matiques. Cependant, le concept de r\u00e9cursivit\u00e9 a vraiment pris de l'ampleur avec le math\u00e9maticien britannique George Boole au 19e si\u00e8cle et plus tard avec l'\u0153uvre d'Alan Turing et d'autres pionniers de l'informatique au 20e si\u00e8cle.</p>"},{"location":"terminale/recursivite/cours/#les-fonctions-recursives","title":"Les fonctions r\u00e9cursives","text":""},{"location":"terminale/recursivite/cours/#quest-ce-que-cest","title":"Qu'est-ce que c'est ?","text":"<p>Une fonction r\u00e9cursive est une fonction qui s'appelle elle-m\u00eame dans sa propre d\u00e9finition. Elle est compos\u00e9e de deux parties principales :</p> <ul> <li>Le cas de base : C'est le point d'arr\u00eat de la r\u00e9cursion. Il sp\u00e9cifie quand la fonction doit cesser de s'appeler elle-m\u00eame et renvoyer une valeur.</li> <li>Le cas r\u00e9cursif : C'est la partie o\u00f9 la fonction s'appelle elle-m\u00eame avec des arguments modifi\u00e9s, g\u00e9n\u00e9ralement plus petits, afin de progresser vers le cas de base.</li> </ul> <p>Voici un exemple simple en Python pour illustrer ce concept :</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>def comptepy-undapy-undrebours(n):bksl-nl    if n &lt;= 0:bksl-nl        print(\"Fin du compte \u00e0 rebours!\")bksl-nl    else:bksl-nl        print(n)bksl-nl        comptepy-undapy-undrebours(n - 1)bksl-nlbksl-nlcomptepy-undapy-undrebours(3)  # test avec n = 3bksl-nl</p> <p>Visualiser sur Python Tutor</p> <p>Dans cet exemple, <code>compte_a_rebours</code> est une fonction r\u00e9cursive qui affiche les nombres de n jusqu'\u00e0 1, puis affiche <code>\"Fin du compte \u00e0 rebours!\"</code>.</p> D\u00e9roulement d\u00e9taill\u00e9 de compte_a_rebours <p>N'h\u00e9sitez pas \u00e0 visualiser le d\u00e9roulement de <code>compte_a_rebours</code> sur Python Tutor.</p> <p>Supposons que nous appelions <code>compte_a_rebours(3)</code>. Voici comment cela se d\u00e9roule :</p> <ol> <li> <p>La fonction <code>compte_a_rebours(3)</code> est appel\u00e9e.</p> </li> <li> <p>La condition <code>if n &lt;= 0:</code> n'est pas satisfaite, donc la fonction affiche <code>3</code> et appelle <code>compte_a_rebours(2)</code>.</p> <ul> <li>La fonction <code>compte_a_rebours(2)</code> est appel\u00e9e.</li> <li>Elle affiche <code>2</code> et appelle <code>compte_a_rebours(1)</code>.<ul> <li>La fonction <code>compte_a_rebours(1)</code> est appel\u00e9e.</li> <li>Elle affiche <code>1</code> et appelle <code>compte_a_rebours(0)</code>.<ul> <li>La fonction <code>compte_a_rebours(0)</code> est appel\u00e9e.</li> <li>La condition <code>if n &lt;= 0:</code> est satisfaite, donc elle affiche <code>\"Fin du compte \u00e0 rebours!\"</code> et ne renvoie rien (<code>None</code>).</li> </ul> </li> <li>La fonction <code>compte_a_rebours(1)</code> revient \u00e0 son appelant (qui est <code>compte_a_rebours(2)</code>).</li> </ul> </li> <li>La fonction <code>compte_a_rebours(2)</code> revient \u00e0 son appelant (qui est <code>compte_a_rebours(3)</code>).</li> </ul> </li> <li> <p>La fonction <code>compte_a_rebours(3)</code> revient \u00e0 son appelant (qui peut \u00eatre l'appel initial).</p> </li> </ol>"},{"location":"terminale/recursivite/cours/#plusieurs-cas-de-base","title":"Plusieurs cas de base","text":"<p>Voici un autre exemple de fonction Python r\u00e9cursive qui pr\u00e9sente plusieurs cas de base. Cette fonction calcule le \\(n-i\u00e8me\\) terme de la suite de Fibonacci, une suite math\u00e9matique c\u00e9l\u00e8bre o\u00f9 chaque terme est la somme des deux termes pr\u00e9c\u00e9dents : \\(F(n) = F(n-1) + F(n-2)\\).</p> ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>def fibonacci(n):bksl-nl    if n &lt;= 0:bksl-nl        return 0bksl-nl    elif n == 1:bksl-nl        return 1bksl-nl    else:bksl-nl        return fibonacci(n - 1) + fibonacci(n - 2)bksl-nlbksl-nlprint(f'fibonacci(8) = {fibonacci(8)}')  # test avec n = 8bksl-nl</p> <p>Visualiser sur Python Tutor</p> <p>Dans cette fonction <code>fibonacci</code>, nous avons trois cas principaux :</p> <ul> <li>Le cas de base 1 : Si <code>n</code> est inf\u00e9rieur ou \u00e9gal \u00e0 <code>0</code>, nous renvoyons <code>0</code>, car \\(F(0) = 0\\).</li> <li>Le cas de base 2 : Si <code>n</code> est \u00e9gal \u00e0 <code>1</code>, nous renvoyons <code>1</code>, car \\(F(1) = 1\\).</li> <li>Le cas r\u00e9cursif : Pour les valeurs de <code>n</code> sup\u00e9rieures \u00e0 <code>1</code>, nous appelons r\u00e9cursivement <code>fibonacci(n - 1)</code> et <code>fibonacci(n - 2)</code> pour calculer les deux termes pr\u00e9c\u00e9dents dans la suite, puis nous les additionnons pour obtenir le \\(n-i\u00e8me\\) terme.</li> </ul> <p>L'utilisation de deux appels r\u00e9cursifs avec des valeurs diff\u00e9rentes de <code>n</code> cr\u00e9e une structure de r\u00e9cursivit\u00e9 en arbre, o\u00f9 chaque n\u0153ud a deux enfants :</p> <pre><code>graph TD\n  5(fibonacci 5)\n  4(fibonacci 4)\n  3(fibonacci 3)\n  33(fibonacci 3)\n  2(fibonacci 2)\n  22(fibonacci 2)\n  222(fibonacci 2)\n  1(fibonacci 1)\n  11(fibonacci 1)\n  111(fibonacci 1)\n  1111(fibonacci 1)\n  11111(fibonacci 1)\n  0(fibonacci 0)\n  00(fibonacci 0)\n  000(fibonacci 0)\n\n  5 --&gt; 4\n  5 --&gt; 3\n  4 --&gt; 33\n  4 --&gt; 2\n  3 --&gt; 22\n  3 --&gt; 1\n  2 --&gt; 11\n  2 --&gt; 0\n  33 --&gt; 222\n  33 --&gt; 111\n  22 --&gt; 1111\n  22 --&gt; 00\n  222 --&gt; 11111\n  222 --&gt; 000</code></pre> <p>Co\u00fbt algorithmique exponentiel</p> <p>Le probl\u00e8me de la fonction telle que nous l'avons \u00e9crite est que son co\u00fbt algorithmique est exponentiel en raison de la duplication de calculs (voir arbre ci-dessus). Vous pouvez par exemple faire le test avec une valeur comme <code>n = 37</code> (sur un IDE externe comme Thonny, car l'IDE int\u00e9gr\u00e9 \u00e0 la page, bien que pratique, est peu performant et risque de planter m\u00eame pour des petites valeurs de <code>n</code>), vous verrez que le r\u00e9sultat prendra un certain temps \u00e0 s'afficher (plus ou moins 10 secondes selon la puissance de votre machine).</p> <p>Maintenant, si vous essayez avec <code>n = 100</code>, il faudra faire 1 146 295 688 027 634 168 201 appels r\u00e9cursifs ! Ce qui prendra environ... 13 197 652 000 000 000 secondes, soit 418 494 799 ann\u00e9es, 216 jours, 20 heures, 26 minutes et 40 secondes de temps de calcul.</p> <p>Ainsi, pour des valeurs de \\(n\\) plus \u00e9lev\u00e9es, cette approche devient inefficace, et il est pr\u00e9f\u00e9rable d'utiliser des techniques de programmation dynamique pour optimiser le calcul des termes de Fibonacci (on abordera cela plus tard dans l'ann\u00e9e).</p>"},{"location":"terminale/recursivite/cours/#plusieurs-cas-recursifs","title":"Plusieurs cas r\u00e9cursifs","text":"<p>Il est \u00e9galement possible de d\u00e9finir une fonction avec plusieurs cas r\u00e9cursifs. Par exemple, on souhaite proposer une fonction <code>puissance(x, n)</code>, renvoyant le r\u00e9sultat de \\(x^n\\), en distinguant deux cas en fonction de la parit\u00e9 de <code>n</code>.</p> <p>Math\u00e9matiquement, on peut d\u00e9finir \\(x^n\\) de la fa\u00e7on suivante :</p> <p></p> \\(x^n=\\left\\{ \\begin{array}{lll} 1 \\;si \\; n=0\\\\ {(x^\\frac{n}{2})}^2 \\;si \\; n \\geq 1 \\;et\\; n \\;pair\\\\ x \\times (x^{\\frac{(n-1)}{2}})^2 \\;si \\; n \\geq 1 \\;et\\; n \\;impair \\end{array} \\right.\\) <p>On a donc ici un cas de base (non r\u00e9cursif) et deux cas r\u00e9cursifs selon si <code>n</code> est pair ou impair.</p> <p>L'op\u00e9ration de division est ici suppos\u00e9e \u00eatre la division enti\u00e8re (on utilisera le symbole <code>//</code> en Python).</p> <p>On \u00e9crira pour impl\u00e9menter cela :</p> <ul> <li>une fonction <code>carre(x)</code> qui renvoie le carr\u00e9 d'un nombre <code>x</code> donn\u00e9,</li> <li>une fonction <code>puissance(x, n)</code> d\u00e9finie de la mani\u00e8re suivante :</li> </ul> <p></p> \\(puissance(x,n)=\\left\\{ \\begin{array}{lll} 1 \\;si \\; n=0\\\\ carre(puissance(x,\\frac{n}{2})) \\;si \\; n \\geq 1 \\;et\\; n \\;pair\\\\ x \\times carre(puissance(x,\\frac{n-1}{2}) \\;si \\; n \\geq 1 \\;et\\; n \\;impair \\end{array} \\right.\\) ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder <p>def carre(x):bksl-nl    ''' Renvoie le carr\u00e9 d'un nombre x.bksl-nl    :param x: (int|float) nombre \u00e0 mettre au carr\u00e9bksl-nl    :return (int|float): le carr\u00e9 de x '''bksl-nl    bksl-nl    return xpy-strxbksl-nlbksl-nldef puissance(x,n):bksl-nl    ''' Calcule la puissance n-i\u00e8me de x.bksl-nl    :param x: (int|float) nombre \u00e0 mettre \u00e0 la puissance nbksl-nl    :param n: (int) la puissancebksl-nl    :return (int|float): la puissance n-i\u00e8me de x '''bksl-nlbksl-nl    if n==0:bksl-nl        return 1bksl-nl    elif n%2 == 0:bksl-nl        return carre(puissance(x,n/2))bksl-nl    else :bksl-nl        return xpy-strcarre(puissance(x,(n-1)/2))bksl-nl    bksl-nlassert(puissance(2,0)==1)bksl-nlassert(puissance(4,1)==4)bksl-nlassert(puissance(3,3)==27)bksl-nl</p> <p>On constate donc que les seules op\u00e9rations arithm\u00e9tiques sont effectu\u00e9es dans la fonction <code>carre(x)</code>, et dans le cas o\u00f9 <code>n</code> est impair dans la fonction <code>puissance(x,n)</code>. Les appels r\u00e9cursifs font que ces op\u00e9rations sont r\u00e9p\u00e9t\u00e9es autant de fois qu'il faut pour calculer \\(x^n\\).</p>"},{"location":"terminale/recursivite/cours/#a-vous-de-jouer","title":"\u00c0 vous de jouer !","text":"<p>La fonction factorielle</p> <p>\u00c9crire la fonction factorielle d'abord de fa\u00e7on it\u00e9rative, puis de fa\u00e7on r\u00e9cursive. On rappelle que <code>factorielle(n) = 1</code> si <code>n = 0</code>, <code>factorielle(n) = 1 x 2 x ... x (n-1) x n</code> si <code>n &gt;= 1</code>.</p> <p></p>### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder def factorielle(n):bksl-nl    ''' D\u00e9finition it\u00e9rative de la fonction factorielle. '''bksl-nl    passbksl-nlbksl-nldef factoriellepy-undrec(n):bksl-nl    ''' D\u00e9finition r\u00e9cursive de la fonction factorielle. '''bksl-nl    passbksl-nl"},{"location":"terminale/recursivite/cours/#les-piles-dexecution","title":"Les Piles d'ex\u00e9cution","text":"<p>Lorsque l'on appelle une fonction r\u00e9cursive, le syst\u00e8me doit garder une trace de chaque appel de fonction active et de ses param\u00e8tres pour pouvoir revenir \u00e0 ces appels une fois que les appels r\u00e9cursifs sont termin\u00e9s. Cela se fait \u00e0 l'aide d'une structure de donn\u00e9es appel\u00e9e pile d'ex\u00e9cution (ou call stack en anglais).</p> <p>Voici comment cela fonctionne, en prenant l'exemple de <code>fibonacci</code> :</p> <ul> <li>Appel Initial : Lorsque vous appelez une fonction r\u00e9cursive pour la premi\u00e8re fois (par exemple, <code>fibonacci(5)</code>), un nouvel appel de fonction est ajout\u00e9 au sommet de la pile d'appels. Les param\u00e8tres de cet appel (dans ce cas, <code>n=5</code>) sont stock\u00e9s sur la pile.</li> <li>Appels R\u00e9cursifs : Si la fonction r\u00e9cursive effectue des appels r\u00e9cursifs (comme <code>fibonacci(n-1)</code> et <code>fibonacci(n-2)</code> dans le cas de Fibonacci), chaque nouvel appel est ajout\u00e9 au sommet de la pile avec ses propres param\u00e8tres. La pile continue de s'accumuler avec ces appels tant que les conditions de base ne sont pas atteintes.</li> <li>Retours : Lorsque les cas de base sont atteints (par exemple, <code>fibonacci(0)</code> et <code>fibonacci(1)</code> dans le cas de Fibonacci), la fonction commence \u00e0 renvoyer des valeurs. Les appels de fonctions les plus r\u00e9cents sont retir\u00e9s de la pile et leurs r\u00e9sultats sont utilis\u00e9s pour calculer les valeurs des appels pr\u00e9c\u00e9dents.</li> <li>D\u00e9pilement : La pile d'appels est d\u00e9charg\u00e9e de haut en bas, ce qui signifie que le dernier appel est le premier \u00e0 \u00eatre retir\u00e9 (c'est pourquoi on parle de \"pile\"). Les valeurs de retour des appels de fonction sont utilis\u00e9es pour remonter dans la pile jusqu'\u00e0 ce que l'appel initial soit atteint.</li> <li>R\u00e9sultat Final : Une fois que l'appel initial a \u00e9t\u00e9 \u00e9valu\u00e9, la pile est compl\u00e8tement vid\u00e9e, et vous obtenez le r\u00e9sultat final de la fonction r\u00e9cursive.</li> </ul> <p>\u00c0 chaque \u00e9tape, la fonction est empil\u00e9e sur la pile d'appels jusqu'\u00e0 ce que le cas de base soit atteint (n &lt;= 0), puis les fonctions commencent \u00e0 se d\u00e9piler et \u00e0 revenir successivement \u00e0 leur appelant.</p>"},{"location":"terminale/recursivite/cours/#exemple-une-fonction-somme_recursive","title":"Exemple : une fonction <code>somme_recursive</code>","text":"<p>Nous allons utiliser une fonction r\u00e9cursive pour calculer la somme des nombres de <code>1</code> \u00e0 <code>n</code> (c'est-\u00e0-dire <code>1 + 2 + 3 + ... + n</code>).</p> <p>Voici la fonction Python pour calculer la somme r\u00e9cursivement :</p> <pre><code>def somme_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return n + somme_recursive(n - 1)\n</code></pre>"},{"location":"terminale/recursivite/cours/#etape-1-appel-initial","title":"\u00c9tape 1 : Appel initial","text":"<p>Au d\u00e9but, nous appelons <code>somme_recursive(5)</code>. La pile d'appels est vide.</p> <pre><code>graph TD\n  A[somme_recursive 5]</code></pre>"},{"location":"terminale/recursivite/cours/#etape-2-appels-recursifs","title":"\u00c9tape 2 : Appels R\u00e9cursifs","text":"<p>L'appel initial g\u00e9n\u00e8re des appels r\u00e9cursifs. Nous ajoutons (empilons) <code>somme_recursive(4)</code>, puis <code>somme_recursive(3)</code>, et ainsi de suite, jusqu'\u00e0 ce que <code>somme_recursive(1)</code> soit atteint.</p> <pre><code>graph TD\n  A[somme_recursive 5] --&gt; B[somme_recursive 4]\n  B --&gt; C[somme_recursive 3]\n  C --&gt; D[somme_recursive 2]\n  D --&gt; E[somme_recursive 1]</code></pre>"},{"location":"terminale/recursivite/cours/#etape-3-retours-et-calculs","title":"\u00c9tape 3 : Retours et Calculs","text":"<p>Maintenant, nous commen\u00e7ons \u00e0 retirer (d\u00e9piler) les appels de la pile et \u00e0 calculer les r\u00e9sultats \u00e0 chaque \u00e9tape. Les r\u00e9sultats sont ensuite renvoy\u00e9s \u00e0 l'appel pr\u00e9c\u00e9dent pour le calcul final.</p> <pre><code>graph TD\n  A[somme_recursive 5] --&gt; B[somme_recursive 4]\n  B --&gt; C[somme_recursive 3]\n  C --&gt; D[somme_recursive 2]\n  D --&gt; E[somme_recursive 1]\n\n  E --&gt;|Renvoie 1| D[somme_recursive 2]\n  D --&gt;|Renvoie 3| C[somme_recursive 3]\n  C --&gt;|Renvoie 6| B[somme_recursive 4]\n  B --&gt;|Renvoie 10| A[somme_recursive 5]</code></pre>"},{"location":"terminale/recursivite/cours/#etape-4-resultat-final","title":"\u00c9tape 4 : R\u00e9sultat Final","text":"<p>La pile est compl\u00e8tement vid\u00e9e, et nous obtenons le r\u00e9sultat final de <code>somme_recursive(5)</code>, qui est <code>15</code>.</p> <pre><code>graph TD\n  A[somme_recursive 5] --&gt; B[somme_recursive 4]\n  B --&gt; C[somme_recursive 3]\n  C --&gt; D[somme_recursive 2]\n  D --&gt; E[somme_recursive 1]\n\n  E --&gt;|Renvoie 1| D[somme_recursive 2]\n  D --&gt;|Renvoie 3| C[somme_recursive 3]\n  C --&gt;|Renvoie 6| B[somme_recursive 4]\n  B --&gt;|Renvoie 10| A[somme_recursive 5]\n\n  A --&gt;|Renvoie 15| R[R\u00e9sultat final : 15]</code></pre> <p>C'est ainsi que fonctionne la pile d'appels dans ce sc\u00e9nario r\u00e9cursif. Chaque appel est ajout\u00e9 \u00e0 la pile, les r\u00e9sultats sont renvoy\u00e9s et utilis\u00e9s pour calculer le r\u00e9sultat final une fois que tous les appels r\u00e9cursifs ont \u00e9t\u00e9 r\u00e9solus.</p>"},{"location":"terminale/recursivite/exercices/","title":"Exercices","text":""},{"location":"terminale/recursivite/exercices/#exercices-la-recursivite","title":"Exercices - La r\u00e9cursivit\u00e9","text":""},{"location":"terminale/recursivite/exercices/#notebook","title":"Notebook","text":"<p>\u00c0 t\u00e9l\u00e9charger</p> <p>T\u00e9l\u00e9chargez l'archive ZIP suivante, puis d\u00e9zippez-la dans votre <code>H:\\Travail</code> :</p> <ul> <li>Notebook_Recursivite.ipynb - Notebook Jupyter, n\u00e9cessite une connexion \u00e0 internet pour le chargement des images. </li> <li>recursivite_notebook.zip - Archive contenant le notebook Jupyter et fichiers images associ\u00e9s, peut \u00eatre utilis\u00e9 sans connexion \u00e0 internet.</li> </ul>"},{"location":"terminale/recursivite/exercices/#exercice-les-tours-de-hanoi","title":"Exercice : Les tours de Hano\u00ef","text":"<p>Source : https://www.codingame.com/playgrounds/56923/apprendre-les-bases-de-python-pour-reussir-en-n-s-i-/tours-de-hanoi.</p> <p>Les tours de Hano\u00ef est un casse-t\u00eate compos\u00e9 de trois tours et une pile de disques rang\u00e9s du plus grand au plus petit comme sur la photo ci-dessous :</p> <p></p> <p>Le but est de d\u00e9placer la pile de disques sur la tour de droite en ne d\u00e9pla\u00e7ant \u00e0 chaque fois qu'un seul disque et un disque ne peut pas \u00eatre pos\u00e9 sur un disque plus petit. Voici une animation de ce qu'il faut faire dans le cas o\u00f9 il y a 4 disques.</p> <p></p> <p>Vous pouvez consulter Wikip\u00e9dia par exemple pour plus d'informations.</p> <p>Nous allons voir qu'il est tr\u00e8s simple de cr\u00e9er un programme r\u00e9cursif qui nous dit quoi faire pour r\u00e9soudre le probl\u00e8me. Tout d'abord on appelle les tours <code>A</code>, <code>B</code> et <code>C</code>. On appelle <code>n</code> le nombre de disque pr\u00e9sents au d\u00e9part dans la tour <code>A</code>. Pour d\u00e9placer tous les disques de la tour <code>A</code> vers la tour <code>C</code>, on peut raisonner comme suit :</p> <ul> <li>On d\u00e9place <code>n-1</code> disques de <code>A</code> vers la tour <code>B</code></li> <li>On d\u00e9place le dernier disque de <code>A</code> vers <code>C</code></li> <li>On d\u00e9place les <code>n-1</code> disques de <code>B</code> vers <code>C</code></li> </ul> <p>L'astuce ici est de cr\u00e9er une fonction <code>hanoi</code> qui prend 4 param\u00e8tres : <code>hanoi(n,debut,inter,fin)</code> o\u00f9 <code>n</code> est le nombre de disques \u00e0 d\u00e9placer, <code>debut</code> est la tour de d\u00e9part de nos <code>n</code> disques, <code>inter</code> est la tour interm\u00e9diaire que l'on peut utiliser pour d\u00e9placer et <code>fin</code> est la tour ou doivent se trouver les <code>n</code> disques au final.</p> <p>Ainsi, on va initialement appeler <code>hanoi(n,\"A\",\"B\",\"C\")</code>, et lorsque l'on voudra d\u00e9placer les <code>n-1</code> disques de <code>A</code> vers <code>B</code>, on appelera <code>hanoi(n-1,\"A\",\"C\",\"B\")</code> .</p> <p>Exercice</p> <p>\u00c9crire cette fonction r\u00e9cursive <code>hanoi(n,debut,inter,fin)</code> de mani\u00e8re \u00e0 afficher (avec print) \u00e0 chaque \u00e9tape le d\u00e9placement \u00e0 effectuer sous la forme <code>\"A B\"</code> pour un d\u00e9placement de la tour \"A\" vers la tour \"B\" par exemple.</p> <p>On souhaite :</p> <ul> <li>donner en entr\u00e9e : <code>(n,\"A\",\"B\",\"C\")</code> o\u00f9 <code>n</code> est un entier.</li> <li>obtenir en sortie : Les instructions \u00e0 suivre pour d\u00e9placer les <code>n</code> disques de la tour <code>\"A\"</code> \u00e0 la tour <code>\"C\"</code> donn\u00e9e sous la forme <code>\"A B\"</code> pour signifier un d\u00e9placement de <code>A</code> vers <code>B</code> et affich\u00e9 avec <code>print</code>.</li> </ul>"},{"location":"terminale/recursivite/exercices/#sujets-de-bac","title":"Sujets de bac","text":"<p>\u00c0 t\u00e9l\u00e9charger</p> <p>Extrait du sujet z\u00e9ro B - 2023</p>"}]}